const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://your-project.supabase.co';
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testFolderCreation() {
  console.log('üîç Test de cr√©ation de dossier avec authentification...');
  
  try {
    // 1. R√©cup√©rer la session actuelle
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error('‚ùå Erreur r√©cup√©ration session:', sessionError);
      return;
    }
    
    if (!session) {
      console.log('‚ö†Ô∏è Aucune session active, impossible de tester');
      return;
    }
    
    console.log('‚úÖ Session trouv√©e pour utilisateur:', session.user.id);
    
    // 2. R√©cup√©rer un classeur existant pour le test
    const { data: classeurs, error: classeursError } = await supabase
      .from('classeurs')
      .select('id, slug, name')
      .eq('user_id', session.user.id)
      .limit(1);
    
    if (classeursError || !classeurs || classeurs.length === 0) {
      console.log('‚ö†Ô∏è Aucun classeur trouv√©, cr√©ation d\'un classeur de test...');
      
      // Cr√©er un classeur de test
      const { data: newClasseur, error: createClasseurError } = await supabase
        .from('classeurs')
        .insert({
          name: 'Test Classeur',
          user_id: session.user.id,
          slug: 'test-classeur-' + Date.now(),
          position: 0
        })
        .select()
        .single();
      
      if (createClasseurError) {
        console.error('‚ùå Erreur cr√©ation classeur de test:', createClasseurError);
        return;
      }
      
      console.log('‚úÖ Classeur de test cr√©√©:', newClasseur.id);
      var testClasseurId = newClasseur.id;
    } else {
      testClasseurId = classeurs[0].id;
      console.log('‚úÖ Classeur trouv√© pour le test:', testClasseurId);
    }
    
    // 3. Test de cr√©ation de dossier
    const testFolderName = 'Test Folder ' + Date.now();
    console.log('üìÅ Test cr√©ation dossier:', testFolderName);
    
    const response = await fetch('http://localhost:3000/api/v1/folder/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      },
      body: JSON.stringify({
        name: testFolderName,
        notebook_id: testClasseurId
      })
    });
    
    console.log('üì° Status de la r√©ponse:', response.status);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Test r√©ussi: Dossier cr√©√© avec authentification');
      console.log('üìã R√©sultat:', result);
      
      // Nettoyer le dossier de test
      const { error: deleteError } = await supabase
        .from('folders')
        .delete()
        .eq('id', result.folder.id);
      
      if (deleteError) {
        console.log('‚ö†Ô∏è Impossible de nettoyer le dossier de test:', deleteError);
      } else {
        console.log('üßπ Dossier de test nettoy√©');
      }
    } else {
      const error = await response.text();
      console.log('‚ùå Test √©chou√©: Erreur lors de la cr√©ation du dossier');
      console.log('üìã Erreur:', error);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

testFolderCreation(); 