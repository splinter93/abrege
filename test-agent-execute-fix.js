#!/usr/bin/env node

/**
 * Test de l'endpoint d'ex√©cution des agents apr√®s correction
 * V√©rifie que la vraie r√©ponse du LLM est retourn√©e au lieu de "R√©ponse g√©n√©r√©e"
 */

const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3000';
const TEST_AGENT_SLUG = 'test-agent'; // Remplacez par un agent existant

async function testAgentExecute() {
  console.log('üß™ Test de l\'endpoint d\'ex√©cution des agents...\n');

  try {
    // Test avec un agent existant
    const response = await fetch(`${API_BASE}/api/v2/agents/execute`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer YOUR_JWT_TOKEN_HERE' // Remplacez par un vrai token
      },
      body: JSON.stringify({
        ref: TEST_AGENT_SLUG,
        input: 'Bonjour, peux-tu me dire bonjour en retour ?',
        options: {
          temperature: 0.7
        }
      })
    });

    const result = await response.json();
    
    console.log('üìä R√©sultat de l\'ex√©cution:');
    console.log('Status:', response.status);
    console.log('Success:', result.success);
    
    if (result.success && result.data) {
      console.log('Agent:', result.data.agent_name);
      console.log('Mod√®le:', result.data.model_used);
      console.log('Temps d\'ex√©cution:', result.data.execution_time + 'ms');
      console.log('\nüìù R√©ponse re√ßue:');
      console.log('‚îÄ'.repeat(50));
      console.log(result.data.response);
      console.log('‚îÄ'.repeat(50));
      
      // V√©rifier si c'est la vraie r√©ponse ou le fallback
      if (result.data.response === 'R√©ponse g√©n√©r√©e') {
        console.log('\n‚ùå PROBL√àME: La r√©ponse est toujours le fallback "R√©ponse g√©n√©r√©e"');
        console.log('üîç V√©rifiez les logs du serveur pour voir pourquoi orchestratorResult.content est vide');
      } else {
        console.log('\n‚úÖ SUCC√àS: La vraie r√©ponse du LLM est retourn√©e !');
        console.log('üìè Longueur de la r√©ponse:', result.data.response.length, 'caract√®res');
      }
    } else {
      console.log('‚ùå Erreur:', result.error || result.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Fonction pour lister les agents disponibles
async function listAvailableAgents() {
  console.log('üìã R√©cup√©ration des agents disponibles...\n');
  
  try {
    const response = await fetch(`${API_BASE}/api/v2/agents`, {
      headers: {
        'Authorization': 'Bearer YOUR_JWT_TOKEN_HERE' // Remplacez par un vrai token
      }
    });

    const result = await response.json();
    
    if (result.success && result.data) {
      console.log('Agents disponibles:');
      result.data.forEach(agent => {
        console.log(`- ${agent.slug} (${agent.display_name}) - ${agent.model}`);
      });
    } else {
      console.log('‚ùå Erreur lors de la r√©cup√©ration des agents:', result.error);
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

// Ex√©cuter les tests
async function main() {
  console.log('üöÄ Test de correction de l\'endpoint d\'ex√©cution des agents\n');
  
  // D'abord lister les agents
  await listAvailableAgents();
  console.log('\n' + '='.repeat(60) + '\n');
  
  // Puis tester l'ex√©cution
  await testAgentExecute();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testAgentExecute, listAvailableAgents };
