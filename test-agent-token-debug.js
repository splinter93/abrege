#!/usr/bin/env node

/**
 * Test de debug pour tracer le flux de token d'authentification
 * quand un agent appelle un autre agent via executeAgent
 */

// const fetch = require('node-fetch'); // Pas n√©cessaire pour ce test

const BASE_URL = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';

async function testAgentTokenDebug() {
  console.log('üîç TEST DE DEBUG: Flux de token d\'authentification\n');

  try {
    // 1. Simuler un appel d'agent √† agent avec un userId
    console.log('1Ô∏è‚É£ Simulation d\'un appel d\'agent √† agent...');
    
    const testUserId = '12345678-1234-1234-1234-123456789012'; // UUID de test
    
    const agentCallPayload = {
      ref: 'agent-cible-tool-calls', // Supposons qu'il existe
      input: 'Peux-tu lister mes classeurs et mes notes r√©centes ? Utilise les outils disponibles.',
      options: {
        temperature: 0.7,
        max_tokens: 1000
      }
    };

    console.log('üì§ Appel √† l\'endpoint d\'ex√©cution d\'agents...');
    console.log('   - Agent cible: agent-cible-tool-calls');
    console.log('   - UserId simul√©:', testUserId);
    console.log('   - Payload:', JSON.stringify(agentCallPayload, null, 2));
    
    // Headers d'impersonation (comme le ferait l'ApiV2HttpClient)
    const headers = {
      'Content-Type': 'application/json',
      'X-Client-Type': 'agent',
      'X-User-Id': testUserId,
      'X-Service-Role': 'true'
    };
    
    console.log('\nüì§ Headers envoy√©s:');
    console.log(JSON.stringify(headers, null, 2));
    
    // Dans un vrai test, on ferait l'appel HTTP ici
    // const response = await fetch(`${BASE_URL}/api/v2/agents/execute`, {
    //   method: 'POST',
    //   headers,
    //   body: JSON.stringify(agentCallPayload)
    // });

    console.log('\n‚úÖ Test simul√© termin√©');
    console.log('\nüìã Points de v√©rification dans les logs:');
    console.log('1. [ApiV2HttpClient] üîë IMPERSONATION D√âTECT√âE - userId: 12345678...');
    console.log('2. [ApiV2HttpClient] üì§ Headers d\'impersonation: {...}');
    console.log('3. [AuthUtils] ü§ñ IMPERSONATION D\'AGENT D√âTECT√âE - userId: 12345678...');
    console.log('4. [AuthUtils] üîë Headers re√ßus: {...}');
    console.log('5. [Agents Execute] üîë TOKEN D\'AUTHENTIFICATION POUR L\'AGENT APPEL√â: {...}');
    
    console.log('\nüîç Si l\'erreur 401 persiste, v√©rifier:');
    console.log('- Les headers sont-ils bien envoy√©s ?');
    console.log('- getAuthenticatedUser() d√©tecte-t-il l\'impersonation ?');
    console.log('- L\'agent appel√© re√ßoit-il le bon token ?');
    console.log('- Les tool calls de l\'agent appel√© utilisent-ils le bon token ?');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    process.exit(1);
  }
}

// Ex√©cuter le test
testAgentTokenDebug().catch(console.error);
