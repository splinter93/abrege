#!/usr/bin/env node

/**
 * üß™ Test de la correction d'authentification avec les cl√©s d'API
 * 
 * Ce script teste que les agents peuvent maintenant ex√©cuter des tool calls
 * quand ils sont appel√©s via une cl√© d'API (comme ChatGPT).
 */

const fetch = require('node-fetch');

// Configuration
const BASE_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
const TEST_AGENT_SLUG = 'harvey'; // Agent Harvey pour le test
const TEST_MESSAGE = 'Liste mes classeurs pour v√©rifier que les tool calls fonctionnent avec une cl√© d\'API';

// Cl√© d'API de test (remplacer par votre vraie cl√© d'API)
const TEST_API_KEY = process.env.TEST_API_KEY || 'your-api-key-here';

async function testApiKeyAuthFix() {
  console.log('üß™ Test de la correction d\'authentification avec les cl√©s d\'API...\n');

  try {
    // Test 1: Appel avec cl√© d'API (simule ChatGPT)
    console.log('üì° Test 1: Appel avec cl√© d\'API (simule ChatGPT)');
    console.log(`   Agent: ${TEST_AGENT_SLUG}`);
    console.log(`   Message: ${TEST_MESSAGE}`);
    console.log(`   Auth: API Key`);
    
    const response = await fetch(`${BASE_URL}/api/v2/agents/execute`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': TEST_API_KEY, // Utiliser la cl√© d'API au lieu du token JWT
        'X-Client-Type': 'chatgpt' // Simuler ChatGPT
      },
      body: JSON.stringify({
        ref: TEST_AGENT_SLUG,
        input: TEST_MESSAGE,
        options: {
          temperature: 0.7,
          max_tokens: 1000
        }
      })
    });

    console.log(`   Status: ${response.status}`);
    
    if (response.ok) {
      const result = await response.json();
      console.log('   ‚úÖ Succ√®s - Harvey a pu ex√©cuter listClasseurs avec la cl√© d\'API');
      console.log(`   Agent: ${result.data?.agent_name}`);
      console.log(`   R√©ponse: ${result.data?.response?.substring(0, 200)}...`);
      
      // V√©rifier que la r√©ponse contient des classeurs (signe que le tool call a fonctionn√©)
      if (result.data?.response?.includes('classeur') || result.data?.response?.includes('Classeur')) {
        console.log('   üéØ Tool call listClasseurs confirm√© - Harvey a bien acc√©d√© aux donn√©es avec la cl√© d\'API');
      } else {
        console.log('   ‚ö†Ô∏è  R√©ponse re√ßue mais pas de classeurs d√©tect√©s');
      }
    } else {
      const error = await response.text();
      console.log('   ‚ùå Erreur:', error);
      
      // V√©rifier les types d'erreurs possibles
      if (error.includes('Impossible d\'extraire l\'utilisateur du token')) {
        console.log('   üîç Erreur d\'extraction du token - la correction n\'a pas fonctionn√©');
      } else if (error.includes('Token JWT requis')) {
        console.log('   üîç Token JWT manquant - probl√®me d\'authentification');
      } else if (error.includes('API Key')) {
        console.log('   üîç Probl√®me avec la cl√© d\'API');
      } else {
        console.log('   üîç Erreur diff√©rente - possiblement un autre probl√®me');
      }
    }

    console.log('');

    // Test 2: V√©rification HEAD avec cl√© d'API
    console.log('üì° Test 2: V√©rification HEAD avec cl√© d\'API');
    
    const headResponse = await fetch(`${BASE_URL}/api/v2/agents/execute?ref=${TEST_AGENT_SLUG}`, {
      method: 'HEAD',
      headers: {
        'X-API-Key': TEST_API_KEY,
        'X-Client-Type': 'chatgpt'
      }
    });

    console.log(`   Status: ${headResponse.status}`);
    
    if (headResponse.ok) {
      console.log('   ‚úÖ Succ√®s - Agent trouv√© et accessible avec la cl√© d\'API');
      console.log(`   Agent: ${headResponse.headers.get('X-Agent-Name')}`);
      console.log(`   Mod√®le: ${headResponse.headers.get('X-Agent-Model')}`);
    } else {
      console.log('   ‚ùå Erreur - Agent non trouv√© ou non accessible');
    }

    console.log('');

    // Test 3: Test avec un autre agent (Andr√©)
    console.log('üì° Test 3: Test avec Andr√© (cr√©ation de note)');
    
    const andreResponse = await fetch(`${BASE_URL}/api/v2/agents/execute`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': TEST_API_KEY,
        'X-Client-Type': 'chatgpt'
      },
      body: JSON.stringify({
        ref: 'andre', // Agent Andr√©
        input: 'Cr√©e une note de test pour v√©rifier les tool calls avec la cl√© d\'API',
        options: {
          temperature: 0.7,
          max_tokens: 1000
        }
      })
    });

    console.log(`   Status: ${andreResponse.status}`);
    
    if (andreResponse.ok) {
      const result = await andreResponse.json();
      console.log('   ‚úÖ Succ√®s - Andr√© a pu ex√©cuter ses tool calls avec la cl√© d\'API');
      console.log(`   Agent: ${result.data?.agent_name}`);
    } else {
      const error = await andreResponse.text();
      console.log('   ‚ùå Erreur Andr√©:', error);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Instructions d'utilisation
console.log('üîß INSTRUCTIONS D\'UTILISATION:');
console.log('1. Assurez-vous que le serveur Next.js est d√©marr√©');
console.log('2. Configurez votre cl√© d\'API :');
console.log('   - TEST_API_KEY : Votre cl√© d\'API (pas un token JWT)');
console.log('3. Ex√©cutez: node test-api-key-auth-fix.js\n');

// Ex√©cuter le test
if (TEST_API_KEY === 'your-api-key-here') {
  console.log('‚ö†Ô∏è  Veuillez configurer votre cl√© d\'API :');
  console.log('   TEST_API_KEY=your-actual-api-key node test-api-key-auth-fix.js');
} else {
  testApiKeyAuthFix();
}
