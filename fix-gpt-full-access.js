#!/usr/bin/env node

/**
 * Correction pour donner acc√®s complet √† tous les tools pour GPT/Grok
 * Remplace le filtrage par capacit√©s par un acc√®s complet
 */

const fs = require('fs');

console.log('üîß Correction pour acc√®s complet GPT/Grok...');

// Chemin du fichier
const routeFile = 'src/app/api/chat/llm/route.ts';

// Lire le fichier
let content = fs.readFileSync(routeFile, 'utf8');

console.log('üìñ Lecture du fichier:', routeFile);

// Compter les occurrences avant correction
const beforeCount = (content.match(/agentConfig\?\.api_v2_capabilities\?\.length > 0/g) || []).length;
console.log(`üîç Occurrences trouv√©es: ${beforeCount}`);

// Remplacer toutes les occurrences
const oldPattern = /\/\/ ‚úÖ ACC√àS COMPLET: Tous les mod√®les ont acc√®s √† tous les endpoints\s+const tools = agentConfig\?\.api_v2_capabilities\?\.length > 0\s+\? agentApiV2Tools\.getToolsForFunctionCalling\(agentConfig\.api_v2_capabilities\)\s+: undefined;/g;
const newPattern = `// üîß ACC√àS COMPLET: GPT/Grok ont acc√®s √† TOUS les tools
      const tools = agentApiV2Tools.getToolsForFunctionCalling(); // Tous les tools disponibles`;

const correctedContent = content.replace(oldPattern, newPattern);

// Compter les occurrences apr√®s correction
const afterCount = (correctedContent.match(/agentConfig\?\.api_v2_capabilities\?\.length > 0/g) || []).length;
console.log(`üîç Occurrences restantes: ${afterCount}`);

// V√©rifier si des changements ont √©t√© appliqu√©s
if (content === correctedContent) {
  console.log('‚ùå Aucun changement appliqu√©. Pattern non trouv√©.');
  
  // Essayer un pattern plus simple
  const simpleOldPattern = /const tools = agentConfig\?\.api_v2_capabilities\?\.length > 0\s+\? agentApiV2Tools\.getToolsForFunctionCalling\(agentConfig\.api_v2_capabilities\)\s+: undefined;/g;
  const simpleNewPattern = `const tools = agentApiV2Tools.getToolsForFunctionCalling(); // Tous les tools disponibles`;
  
  const simpleCorrectedContent = content.replace(simpleOldPattern, simpleNewPattern);
  
  if (content === simpleCorrectedContent) {
    console.log('‚ùå Aucun changement appliqu√© avec le pattern simple.');
  } else {
    fs.writeFileSync(routeFile, simpleCorrectedContent);
    console.log('‚úÖ Correction appliqu√©e avec succ√®s (pattern simple) !');
  }
} else {
  // √âcrire le fichier corrig√©
  fs.writeFileSync(routeFile, correctedContent);
  console.log('‚úÖ Correction appliqu√©e avec succ√®s !');
}

// V√©rifier les lignes modifi√©es
console.log('\nüîç V√©rification des lignes modifi√©es:');
const lines = correctedContent.split('\n');
for (let i = 0; i < lines.length; i++) {
  if (lines[i].includes('agentApiV2Tools.getToolsForFunctionCalling()')) {
    console.log(`üìç Ligne ${i + 1}: ${lines[i].trim()}`);
  }
}

console.log('\nüéØ R√âSULTAT:');
console.log('‚úÖ GPT/Grok ont maintenant acc√®s √† TOUS les tools');
console.log('‚úÖ Plus de filtrage par capacit√©s d\'agent');
console.log('‚úÖ Acc√®s complet √† tous les endpoints');

console.log('\nüìù PROCHAINES √âTAPES:');
console.log('1. Red√©marrer le serveur de d√©veloppement');
console.log('2. Tester avec GPT/Grok');
console.log('3. V√©rifier que tous les tools fonctionnent'); 