#!/usr/bin/env node

/**
 * üîß Script pour appliquer la migration via l'API de l'application
 */

console.log('üîß APPLICATION DE LA MIGRATION VIA API');
console.log('=====================================');

async function applyMigrationViaAPI() {
  console.log('\nüîß √âTAPE 1: Test de connexion √† l\'API');
  
  try {
    // Test de connexion √† l'API
    const response = await fetch('http://localhost:3000/api/v2/classeurs', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'X-Client-Type': 'llm'
      }
    });
    
    if (response.ok) {
      console.log('   ‚úÖ API accessible');
    } else {
      console.log('   ‚ùå API non accessible:', response.status);
      return false;
    }
    
    console.log('\nüîß √âTAPE 2: Application de la migration');
    console.log('   üí° Pour appliquer la migration, tu dois:');
    console.log('   1. Aller dans ton dashboard Supabase');
    console.log('   2. Ouvrir l\'√©diteur SQL');
    console.log('   3. Ex√©cuter cette requ√™te:');
    console.log('');
    console.log('   ALTER TABLE agents ADD COLUMN IF NOT EXISTS api_v2_capabilities TEXT[] DEFAULT \'{}\';');
    console.log('   CREATE INDEX IF NOT EXISTS idx_agents_api_v2_capabilities ON agents USING gin(api_v2_capabilities);');
    console.log('   COMMENT ON COLUMN agents.api_v2_capabilities IS \'Liste des capacit√©s API v2 disponibles pour l\'agent\';');
    console.log('');
    console.log('   4. Puis ex√©cuter cette requ√™te pour configurer les agents:');
    console.log('');
    console.log('   UPDATE agents SET api_v2_capabilities = ARRAY[\'create_note\', \'update_note\', \'add_content_to_note\', \'move_note\', \'delete_note\', \'create_folder\', \'get_note_content\', \'get_tree\', \'get_notebooks\'];');
    console.log('');
    
    return true;
    
  } catch (error) {
    console.log('   ‚ùå Erreur de connexion:', error.message);
    return false;
  }
}

async function testFunctionCalling() {
  console.log('\nüß™ √âTAPE 3: Test des function calls');
  
  console.log('   üì§ Test avec l\'application en cours d\'ex√©cution');
  console.log('   üí° Essaie de tester avec Donna:');
  console.log('   "Cr√©er une note \'Test Migration\' avec le contenu \'Ceci est un test de migration\'"');
  
  console.log('\nüìã **CAPACIT√âS √Ä ACTIVER:**');
  console.log('   - create_note: Cr√©er une nouvelle note');
  console.log('   - update_note: Modifier une note existante');
  console.log('   - add_content_to_note: Ajouter du contenu √† une note');
  console.log('   - move_note: D√©placer une note');
  console.log('   - delete_note: Supprimer une note');
  console.log('   - create_folder: Cr√©er un dossier');
  console.log('   - get_note_content: R√©cup√©rer le contenu d\'une note');
  console.log('   - get_tree: R√©cup√©rer la structure d\'un classeur');
  console.log('   - get_notebooks: Lister tous les classeurs');
}

async function main() {
  console.log('üöÄ D√âBUT DE LA MIGRATION VIA API...\n');
  
  const apiOk = await applyMigrationViaAPI();
  if (!apiOk) {
    console.log('\n‚ùå API non accessible. Arr√™t.');
    process.exit(1);
  }
  
  await testFunctionCalling();
  
  console.log('\n‚úÖ INSTRUCTIONS DE MIGRATION PR√äTES !');
  console.log('\nüéØ PROCHAINES √âTAPES:');
  console.log('   1. Appliquer la migration SQL dans Supabase');
  console.log('   2. Red√©marrer l\'application: npm run dev');
  console.log('   3. Tester avec Donna: "Cr√©er une note de test"');
  console.log('   4. V√©rifier que les function calls sont d√©tect√©s automatiquement');
  
  console.log('\nüöÄ **FUNCTION CALLS SERONT OP√âRATIONNELS APR√àS LA MIGRATION !**');
}

main().catch(console.error); 