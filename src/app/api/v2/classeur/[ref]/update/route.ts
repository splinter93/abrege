import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { logApi } from '@/utils/logger';
import { V2ResourceResolver } from '@/utils/v2ResourceResolver';
import { getAuthenticatedUser } from '@/utils/authUtils';
import { updateClasseurV2Schema, validatePayload, createValidationErrorResponse } from '@/utils/v2ValidationSchemas';

// üîß CORRECTIONS APPLIQU√âES:
// - Authentification simplifi√©e via getAuthenticatedUser uniquement
// - Suppression de la double v√©rification d'authentification
// - Client Supabase standard sans token manuel
// - Plus de 401 caus√©s par des conflits d'authentification

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ ref: string }> }
): Promise<NextResponse> {
  const startTime = Date.now();
  const { ref } = await params;
  const clientType = request.headers.get('X-Client-Type') || 'unknown';
  const context = {
    operation: 'v2_classeur_update',
    component: 'API_V2',
    ref,
    clientType
  };

  logApi.info(`üöÄ D√©but mise √† jour classeur v2 ${ref}`, context);

  // üîê Authentification
  const authResult = await getAuthenticatedUser(request);
  if (!authResult.success) {
    logApi.info(`‚ùå Authentification √©chou√©e: ${authResult.error}`, context);
    return NextResponse.json(
      { error: authResult.error },
      { status: authResult.status || 401, headers: { "Content-Type": "application/json" } }
    );
  }

  const userId = authResult.userId!;
  
  // üîß CORRECTION: Client Supabase standard, getAuthenticatedUser a d√©j√† valid√©
  const supabase = createClient(supabaseUrl, supabaseAnonKey);

  try {
    const body = await request.json();
    
    // Validation du payload
    const validationResult = validatePayload(updateClasseurV2Schema, body);
    if (!validationResult.success) {
      return createValidationErrorResponse(validationResult);
    }

    const { name, emoji, color } = validationResult.data;

    // R√©soudre la r√©f√©rence (UUID ou slug)
    const resolveResult = await V2ResourceResolver.resolveRef(ref, 'classeur', userId, context);
    if (!resolveResult.success) {
      return NextResponse.json(
        { error: resolveResult.error },
        { status: resolveResult.status, headers: { "Content-Type": "application/json" } }
      );
    }

    const classeurId = resolveResult.id;

    // V√©rifier que l'utilisateur est propri√©taire du classeur
    const { data: existingClasseur, error: checkError } = await supabase
      .from('classeurs')
      .select('id, name')
      .eq('id', classeurId)
      .eq('user_id', userId)
      .single();

    if (checkError || !existingClasseur) {
      logApi.info(`‚ùå Classeur non trouv√© ou acc√®s refus√©: ${classeurId}`, context);
      return NextResponse.json(
        { error: 'Classeur non trouv√© ou acc√®s refus√©' },
        { status: 404, headers: { "Content-Type": "application/json" } }
      );
    }

    // Pr√©parer les donn√©es de mise √† jour
    const updateData: any = {};
    if (name !== undefined) updateData.name = name;
    if (emoji !== undefined) updateData.emoji = emoji;
    if (color !== undefined) updateData.color = color;

    // Mettre √† jour le classeur
    const { data: updatedClasseur, error: updateError } = await supabase
      .from('classeurs')
      .update(updateData)
      .eq('id', classeurId)
      .eq('user_id', userId)
      .select()
      .single();

    if (updateError) {
      logApi.error(`‚ùå Erreur mise √† jour classeur: ${updateError.message}`, context);
      return NextResponse.json(
        { error: 'Erreur lors de la mise √† jour du classeur' },
        { status: 500, headers: { "Content-Type": "application/json" } }
      );
    }

    const apiTime = Date.now() - startTime;
    logApi.info(`‚úÖ Classeur mis √† jour en ${apiTime}ms`, context);

    // üöÄ D√âCLENCHER LE POLLING AUTOMATIQUEMENT
    try {
      const { triggerUnifiedRealtimePolling } = await import('@/services/unifiedRealtimeService');
      await triggerUnifiedRealtimePolling('classeurs', 'UPDATE');
      logApi.info('‚úÖ Polling d√©clench√© pour classeurs', context);
    } catch (pollingError) {
      logApi.warn('‚ö†Ô∏è Erreur lors du d√©clenchement du polling', context);
    }

    return NextResponse.json({
      success: true,
      classeur: updatedClasseur
    }, { headers: { "Content-Type": "application/json" } });

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erreur inconnue';
    logApi.error(`‚ùå Erreur inattendue: ${errorMessage}`, context);
    
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
} 