import { NextRequest, NextResponse } from 'next/server';
import { logApi } from '@/utils/logger';
import { getAuthenticatedUser } from '@/utils/authUtils';
import { V2DatabaseUtils } from '@/utils/v2DatabaseUtils';
import { V2ResourceResolver } from '@/utils/v2ResourceResolver';

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ ref: string }> }
): Promise<NextResponse> {
  const startTime = Date.now();
  const { ref } = await params;
  const clientType = request.headers.get('X-Client-Type') || 'unknown';
  const context = {
    operation: 'v2_classeur_delete',
    component: 'API_V2',
    ref,
    clientType
  };

  logApi.info(`üöÄ D√©but suppression classeur v2 ${ref}`, context);

  // üîê Authentification simplifi√©e
  const authResult = await getAuthenticatedUser(request);
  if (!authResult.success) {
    logApi.info(`‚ùå Authentification √©chou√©e: ${authResult.error}`, context);
    return NextResponse.json(
      { error: authResult.error },
      { status: authResult.status || 401, headers: { "Content-Type": "application/json" } }
    );
  }

  const userId = authResult.userId!;

  try {
    // R√©soudre la r√©f√©rence (UUID ou slug) en ID
    const resolveResult = await V2ResourceResolver.resolveRef(ref, 'classeur', userId, context);
    if (!resolveResult.success) {
      logApi.info(`‚ùå Erreur r√©solution r√©f√©rence: ${resolveResult.error}`, context);
      return NextResponse.json(
        { error: resolveResult.error },
        { status: resolveResult.status || 400, headers: { "Content-Type": "application/json" } }
      );
    }

    const classeurId = resolveResult.id;
    logApi.info(`‚úÖ R√©f√©rence r√©solue: ${ref} ‚Üí ${classeurId}`, context);

    // Utiliser V2DatabaseUtils pour l'acc√®s direct √† la base de donn√©es
    const result = await V2DatabaseUtils.deleteClasseur(classeurId, userId, context);

    const apiTime = Date.now() - startTime;
    logApi.info(`‚úÖ Classeur supprim√© en ${apiTime}ms`, context);

    // üöÄ D√âCLENCHER LE POLLING AUTOMATIQUEMENT
    try {
      const { triggerUnifiedRealtimePolling } = await import('@/services/unifiedRealtimeService');
      await triggerUnifiedRealtimePolling('classeurs', 'DELETE');
      logApi.info('‚úÖ Polling d√©clench√© pour classeurs', context);
    } catch (pollingError) {
      logApi.warn('‚ö†Ô∏è Erreur lors du d√©clenchement du polling', pollingError);
    }

    return NextResponse.json({
      success: true,
      message: 'Classeur supprim√© avec succ√®s',
      deletedClasseurId: classeurId
    });

  } catch (err: unknown) {
    const error = err as Error;
    logApi.info(`‚ùå Erreur serveur: ${error}`, context);
    return NextResponse.json(
      { error: 'Erreur serveur' },
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
} 