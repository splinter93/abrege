/**
 * Service centralis√© pour la gestion du sch√©ma OpenAPI V2
 * Charge et fournit le sch√©ma OpenAPI V2 actuel pour l'int√©gration LLM
 */

import { readFileSync } from 'fs';
import { join } from 'path';

export interface OpenAPISchema {
  openapi: string;
  info: {
    title: string;
    description: string;
    version: string;
  };
  paths: Record<string, any>;
  components: {
    schemas: Record<string, any>;
    securitySchemes: Record<string, any>;
  };
  tags: Array<{
    name: string;
    description: string;
  }>;
}

export class OpenAPISchemaService {
  private static instance: OpenAPISchemaService;
  private schema: OpenAPISchema | null = null;
  private schemaPath: string;

  private constructor() {
    // Chemin vers le sch√©ma OpenAPI V2 pour ChatGPT
    this.schemaPath = join(process.cwd(), 'docs/api/OPENAPI CHAT GPT 30 ENDPOINTS.json');
  }

  /**
   * Singleton pattern
   */
  public static getInstance(): OpenAPISchemaService {
    if (!OpenAPISchemaService.instance) {
      OpenAPISchemaService.instance = new OpenAPISchemaService();
    }
    return OpenAPISchemaService.instance;
  }

  /**
   * Charger le sch√©ma OpenAPI V2 depuis le fichier local
   */
  public loadSchema(): OpenAPISchema {
    if (this.schema) {
      return this.schema;
    }

    // üîß CORRECTION: V√©rifier que nous sommes c√¥t√© serveur
    if (typeof window !== 'undefined') {
      console.warn('[OpenAPISchemaService] ‚ö†Ô∏è Tentative de chargement c√¥t√© client - utilisation du sch√©ma par d√©faut');
      // Retourner un sch√©ma minimal pour √©viter les erreurs c√¥t√© client
      this.schema = {
        openapi: '3.0.0',
        info: { title: 'API V2', description: 'API par d√©faut', version: '1.0.0' },
        paths: {},
        components: { schemas: {}, securitySchemes: {} },
        tags: []
      };
      return this.schema;
    }

    try {
      console.log('[OpenAPISchemaService] üîß Chargement du sch√©ma OpenAPI V2...');
      
      const schemaContent = readFileSync(this.schemaPath, 'utf-8');
      this.schema = JSON.parse(schemaContent) as OpenAPISchema;
      
      console.log(`[OpenAPISchemaService] ‚úÖ Sch√©ma charg√©: ${this.schema.info.title} v${this.schema.info.version}`);
      console.log(`[OpenAPISchemaService] üìä ${Object.keys(this.schema.paths).length} endpoints disponibles`);
      
      return this.schema;
    } catch (error) {
      console.error('[OpenAPISchemaService] ‚ùå Erreur lors du chargement du sch√©ma:', error);
      throw new Error(`Impossible de charger le sch√©ma OpenAPI V2: ${error}`);
    }
  }

  /**
   * Obtenir le sch√©ma (charge si n√©cessaire)
   */
  public getSchema(): OpenAPISchema {
    return this.loadSchema();
  }

  /**
   * V√©rifier si le sch√©ma est charg√©
   */
  public isLoaded(): boolean {
    return this.schema !== null;
  }

  /**
   * Obtenir les endpoints disponibles
   */
  public getEndpoints(): string[] {
    const schema = this.getSchema();
    return Object.keys(schema.paths);
  }

  /**
   * Obtenir les sch√©mas de composants
   */
  public getSchemas(): Record<string, any> {
    const schema = this.getSchema();
    return schema.components.schemas;
  }

  /**
   * Obtenir les tags disponibles
   */
  public getTags(): Array<{ name: string; description: string }> {
    const schema = this.getSchema();
    return schema.tags;
  }

  /**
   * Rechercher un endpoint par nom ou pattern
   */
  public findEndpoint(pattern: string): string[] {
    const endpoints = this.getEndpoints();
    return endpoints.filter(endpoint => 
      endpoint.toLowerCase().includes(pattern.toLowerCase())
    );
  }

  /**
   * Obtenir les informations de debug
   */
  public getDebugInfo() {
    const schema = this.getSchema();
    return {
      title: schema.info.title,
      version: schema.info.version,
      openapiVersion: schema.openapi,
      totalEndpoints: Object.keys(schema.paths).length,
      totalSchemas: Object.keys(schema.components.schemas).length,
      totalTags: schema.tags.length,
      endpoints: Object.keys(schema.paths).slice(0, 10), // Premiers 10 endpoints
      tags: schema.tags.map(tag => tag.name)
    };
  }

  /**
   * Forcer le rechargement du sch√©ma
   */
  public reload(): OpenAPISchema {
    this.schema = null;
    return this.loadSchema();
  }
}

/**
 * Factory function pour obtenir le service
 */
export function getOpenAPISchemaService(): OpenAPISchemaService {
  return OpenAPISchemaService.getInstance();
}

/**
 * Utilitaire pour charger le sch√©ma directement
 */
export function loadOpenAPISchema(): OpenAPISchema {
  return getOpenAPISchemaService().getSchema();
}
