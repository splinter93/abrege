/**
 * Types pour l'orchestrateur agentique V2
 * Impl√©mente la strat√©gie de Claude : thinking, communication, retry, parall√©lisation
 */

import type { ToolCall, ToolResult } from '../services/SimpleToolExecutor';

/**
 * üß† Bloc de r√©flexion (thinking) g√©n√©r√© entre les tool calls
 */
export interface ThinkingBlock {
  type: 'thinking';
  content: string;
  timestamp: string;
}

/**
 * üí¨ Mise √† jour de progression en temps r√©el
 */
export interface ProgressUpdate {
  type: 'progress';
  action: string;
  tool?: string;
  status: 'started' | 'completed' | 'failed';
  timestamp: string;
  metadata?: Record<string, unknown>;
}

/**
 * üîÄ Strat√©gie d'ex√©cution des tool calls
 */
export interface ToolCallStrategy {
  /** Outils pouvant √™tre ex√©cut√©s en parall√®le (ind√©pendants) */
  parallel: ToolCall[];
  
  /** Outils devant √™tre ex√©cut√©s s√©quentiellement (d√©pendants) */
  sequential: ToolCall[];
}

/**
 * üîÅ Configuration de la strat√©gie de retry
 */
export interface RetryStrategy {
  /** Nombre maximum de tentatives par outil */
  maxRetries: number;
  
  /** Strat√©gie de backoff (d√©lai entre les retries) */
  backoff: 'linear' | 'exponential';
  
  /** D√©lai initial en ms */
  initialDelay?: number;
  
  /** D√©lai maximum en ms */
  maxDelay?: number;
  
  /** Map des outils de fallback (si un outil √©choue, utiliser ce fallback) */
  fallbackTools?: Record<string, string>;
}

/**
 * ‚öôÔ∏è Configuration de l'orchestrateur agentique
 */
export interface AgenticConfig {
  /** Strat√©gie de retry */
  retryStrategy?: RetryStrategy;
  
  /** Activer le streaming des thinking blocks */
  streamThinking?: boolean;
  
  /** Activer le streaming des progress updates */
  streamProgress?: boolean;
  
  /** Activer la parall√©lisation automatique */
  enableParallelization?: boolean;
  
  /** Timeout par outil en ms */
  toolTimeout?: number;
  
  /** Cache les r√©sultats des outils */
  enableCache?: boolean;
}

/**
 * üìä R√©ponse agentique compl√®te avec m√©tadonn√©es enrichies
 */
export interface AgenticResponse {
  /** Succ√®s global de l'op√©ration */
  success: boolean;
  
  /** Contenu de la r√©ponse finale */
  content: string;
  
  /** Tous les tool calls effectu√©s */
  toolCalls: ToolCall[];
  
  /** Tous les r√©sultats des tools */
  toolResults: ToolResult[];
  
  /** Blocs de r√©flexion g√©n√©r√©s */
  thinking: ThinkingBlock[];
  
  /** Mises √† jour de progression */
  progress: ProgressUpdate[];
  
  /** Raisonnement du LLM (si disponible) */
  reasoning?: string;
  
  /** Message d'erreur (si √©chec) */
  error?: string;
  
  /** M√©tadonn√©es d'ex√©cution */
  metadata?: {
    /** Nombre total d'it√©rations */
    iterations: number;
    
    /** Dur√©e totale en ms */
    duration: number;
    
    /** Nombre de retries effectu√©s */
    retries: number;
    
    /** Nombre de tool calls en parall√®le */
    parallelCalls: number;
    
    /** Nombre de tool calls s√©quentiels */
    sequentialCalls: number;
  };
}

/**
 * üéØ Cat√©gories d'outils pour la parall√©lisation intelligente
 */
export enum ToolCategory {
  /** Lecture seule (parall√©lisable) */
  READ = 'read',
  
  /** √âcriture (s√©quentiel) */
  WRITE = 'write',
  
  /** Recherche (parall√©lisable) */
  SEARCH = 'search',
  
  /** Ex√©cution d'agent (d√©pend du contexte) */
  AGENT = 'agent',
  
  /** Op√©ration de base de donn√©es (s√©quentiel pour les √©critures) */
  DATABASE = 'database',
  
  /** Op√©ration externe (peut √™tre parall√®le) */
  EXTERNAL = 'external',
  
  /** Inconnu (traiter comme s√©quentiel par s√©curit√©) */
  UNKNOWN = 'unknown'
}

/**
 * üìã M√©tadonn√©es d'un outil pour la cat√©gorisation
 */
export interface ToolMetadata {
  /** Nom de l'outil */
  name: string;
  
  /** Cat√©gorie de l'outil */
  category: ToolCategory;
  
  /** L'outil peut-il √™tre parall√©lis√© ? */
  parallelizable: boolean;
  
  /** L'outil peut-il √™tre mis en cache ? */
  cacheable: boolean;
  
  /** Timeout sp√©cifique pour cet outil (ms) */
  timeout?: number;
  
  /** Priorit√© d'ex√©cution (1 = haute, 5 = basse) */
  priority?: number;
  
  /** Outils de fallback en cas d'√©chec */
  fallbacks?: string[];
  
  /** D√©pendances (outils devant √™tre ex√©cut√©s avant) */
  dependencies?: string[];
}

/**
 * üíæ Entr√©e de cache pour les r√©sultats d'outils
 */
export interface CacheEntry {
  /** Cl√© unique (hash des arguments) */
  key: string;
  
  /** Nom de l'outil */
  toolName: string;
  
  /** R√©sultat mis en cache */
  result: ToolResult;
  
  /** Timestamp de cr√©ation */
  createdAt: string;
  
  /** TTL en secondes */
  ttl: number;
  
  /** Nombre de hits */
  hits: number;
}

/**
 * üìà M√©triques de performance de l'orchestrateur
 */
export interface OrchestratorMetrics {
  /** Nombre total de sessions */
  totalSessions: number;
  
  /** Nombre total de tool calls */
  totalToolCalls: number;
  
  /** Nombre total de tool calls r√©ussis */
  successfulToolCalls: number;
  
  /** Nombre total de retries */
  totalRetries: number;
  
  /** Nombre total de fallbacks utilis√©s */
  totalFallbacks: number;
  
  /** Temps moyen d'ex√©cution par tool (ms) */
  avgToolExecutionTime: number;
  
  /** Temps moyen par session (ms) */
  avgSessionDuration: number;
  
  /** Taux de succ√®s global */
  successRate: number;
  
  /** Cache hit rate */
  cacheHitRate: number;
  
  /** Nombre moyen de tool calls en parall√®le */
  avgParallelCalls: number;
}

