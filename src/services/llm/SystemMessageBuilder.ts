/**
 * SystemMessageBuilder - Construction intelligente des messages syst√®me
 * G√®re l'injection des instructions syst√®me et templates contextuels des agents
 */

import { simpleLogger as logger } from '@/utils/logger';

export interface AgentSystemConfig {
  system_instructions?: string;
  context_template?: string;
  personality?: string;
  expertise?: string[];
  capabilities?: string[];
  // Compatibilit√© h√©ritage
  instructions?: string;
}

export interface SystemMessageContext {
  type: string;
  name: string;
  id: string;
  content?: string;
  [key: string]: unknown;
}

export interface SystemMessageResult {
  content: string;
  hasCustomInstructions: boolean;
  hasContextTemplate: boolean;
  hasPersonality: boolean;
  hasExpertise: boolean;
  hasCapabilities: boolean;
}

/**
 * Builder pour les messages syst√®me des agents
 * Centralise la logique d'injection des instructions syst√®me
 */
export class SystemMessageBuilder {
  private static instance: SystemMessageBuilder;

  static getInstance(): SystemMessageBuilder {
    if (!SystemMessageBuilder.instance) {
      SystemMessageBuilder.instance = new SystemMessageBuilder();
    }
    return SystemMessageBuilder.instance;
  }

  /**
   * Construit le message syst√®me complet pour un agent
   */
  buildSystemMessage(
    agentConfig: AgentSystemConfig,
    context: SystemMessageContext = { type: 'chat', name: 'Session', id: 'default' },
    fallbackTemplate: string = 'Tu es un assistant IA utile et bienveillant.'
  ): SystemMessageResult {
    let content = '';
    let hasCustomInstructions = false;
    let hasContextTemplate = false;
    let hasPersonality = false;
    let hasExpertise = false;
    let hasCapabilities = false;

    try {
      // 1. Instructions syst√®me personnalis√©es (priorit√© haute)
      const primaryInstructions = agentConfig.system_instructions?.trim();
      const legacyInstructions = agentConfig.instructions?.trim();
      
      if (primaryInstructions || legacyInstructions) {
        content = (primaryInstructions || legacyInstructions)!;
        hasCustomInstructions = true;
        logger.dev(`[SystemMessageBuilder] üéØ Instructions syst√®me personnalis√©es utilis√©es`);
      } else {
        content = fallbackTemplate;
        logger.dev(`[SystemMessageBuilder] ‚öôÔ∏è Template par d√©faut utilis√©`);
      }

      // ‚úÖ NOUVEAU : Instructions pour tool calls avec explication
      content += `\n\n## Utilisation des Outils

R√àGLE IMPORTANTE : Avant d'appeler un outil, tu DOIS TOUJOURS :
1. Expliquer bri√®vement ce que tu vas faire et pourquoi dans le champ "content"
2. Puis appeler l'outil dans le m√™me message (content + tool_calls simultan√©s)
3. Apr√®s avoir re√ßu le r√©sultat, commenter ce que tu as obtenu

Exemple de bon comportement :
- content: "Je vais chercher des informations sur X en utilisant l'outil Y..."
- tool_calls: [{ name: "Y", arguments: {...} }]

Puis apr√®s r√©sultat :
- content: "J'ai trouv√© que... [analyse du r√©sultat]"

JAMAIS appeler un outil sans expliquer avant ce que tu fais. L'utilisateur doit comprendre ton processus de pens√©e.

Les outils sont d√©tect√©s et ex√©cut√©s automatiquement par l'API. Tu n'as qu'√† expliquer ton intention dans ton message.

‚ö†Ô∏è ANTI-HALLUCINATION CRITIQUE ‚ö†Ô∏è

R√àGLE ABSOLUE : N'invente JAMAIS de donn√©es avant d'avoir re√ßu le r√©sultat d'un outil.

Comportement INTERDIT :
‚ùå "Je vais chercher une image de chat... [affiche une image invent√©e] ...Maintenant je cherche un chien..."
‚ùå Afficher des URLs, des images, des donn√©es, des r√©sultats AVANT d'avoir appel√© l'outil
‚ùå Pr√©tendre avoir obtenu un r√©sultat alors que l'outil n'a pas encore √©t√© ex√©cut√©

Comportement REQUIS :
‚úÖ "Je vais chercher une image de chat..." [tool_call] ‚Üí ATTENDRE LE R√âSULTAT
‚úÖ Apr√®s r√©ception : "J'ai obtenu cette image : [URL r√©elle du r√©sultat]"
‚úÖ Ne jamais afficher de contenu sp√©cifique (URL, donn√©es, etc.) avant d'avoir le r√©sultat r√©el

Si tu as besoin de plusieurs outils s√©quentiels :
1. Appelle le PREMIER outil UNIQUEMENT
2. ATTENDS le r√©sultat
3. Commente le r√©sultat obtenu
4. Puis appelle le SECOND outil si n√©cessaire
5. ATTENDS √† nouveau

NE JAMAIS pr√©voir, inventer, ou afficher des r√©sultats imaginaires. TOUJOURS attendre le r√©sultat r√©el.

## Gestion des Erreurs

Si un outil √©choue ou retourne une erreur :
1. NE PAS paniquer ou abandonner
2. Expliquer √† l'utilisateur ce qui s'est pass√© de mani√®re claire et rassurante
3. Proposer une alternative ou une solution de contournement
4. Si possible, r√©essayer avec des param√®tres diff√©rents

Exemple de bonne gestion d'erreur :
- "L'outil X a rencontr√© un probl√®me technique (d√©tails : ...). Pas de souci, je vais essayer Y √† la place."
- Ou : "La recherche n'a pas fonctionn√© comme pr√©vu. Laisse-moi r√©essayer avec des param√®tres ajust√©s."

TOUJOURS rester utile et positif, m√™me quand les outils √©chouent. L'utilisateur compte sur toi pour g√©rer ces situations avec √©l√©gance.`;


      // ‚úÖ Injection contexte UI compact (date, device, page)
      if (context && typeof context === 'object') {
        const ctx = context as import('@/types/llmContext').UIContext & {
          attachedNotes?: Array<{
            title: string;
            slug: string;
            markdown_content: string;
          }>;
        }; // ‚úÖ Type strict (pas any)
        const contextParts: string[] = [];
        
        // Format ultra-compact avec emojis (comme AgentOrchestrator)
        if (ctx.time && ctx.device && ctx.user) {
          const deviceEmoji = ctx.device.type === 'mobile' ? 'üì±' : ctx.device.type === 'tablet' ? 'üì≤' : 'üíª';
          const localeFlag = ctx.user.locale === 'fr' ? 'üá´üá∑' : 'üá¨üáß';
          contextParts.push(`üìÖ ${ctx.time.local} (${ctx.timezone || ctx.time.timezone}) | ${deviceEmoji} ${ctx.device.type} | ${localeFlag} ${ctx.user.locale.toUpperCase()}`);
          
          // Page actuelle
          if (ctx.page) {
            const pageEmojiMap: Record<string, string> = {
              chat: 'üí¨',
              editor: '‚úçÔ∏è',
              folder: 'üìÅ',
              classeur: 'üìö',
              home: 'üè†'
            };
            const pageEmoji = pageEmojiMap[ctx.page.type] || '‚ùì';
            contextParts.push(`${pageEmoji} ${ctx.page.type}${ctx.page.action ? ` (${ctx.page.action})` : ''}`);
          }
          
          // Contexte actif
          if (ctx.active?.note) {
            contextParts.push(`üìù Note: ${ctx.active.note.title}`);
          }
          if (ctx.active?.folder) {
            contextParts.push(`üìÅ Dossier: ${ctx.active.folder.name}`);
          }
          if (ctx.active?.classeur) {
            contextParts.push(`üìö Classeur: ${ctx.active.classeur.name}`);
          }
        }

        if (contextParts.length > 0) {
          content += `\n\n## Contexte Actuel\n${contextParts.join('\n')}`;
          content += `\n\n‚ö†Ô∏è Date/heure ci-dessus = MAINTENANT (actualis√©e automatiquement). Ne cherche pas l'heure ailleurs.`;
          logger.dev(`[SystemMessageBuilder] üåç Contexte UI inject√© (compact)`);
        }
        
        // üìé Ajouter les notes attach√©es (style Cursor)
        if (ctx.attachedNotes && Array.isArray(ctx.attachedNotes) && ctx.attachedNotes.length > 0) {
          content += `\n\n## üìé Notes Attach√©es par l'Utilisateur\n\n`;
          content += `L'utilisateur a mentionn√© les notes suivantes avec @ (comme dans Cursor).\n`;
          content += `Tu DOIS te baser sur leur contenu pour r√©pondre.\n\n`;
          
          // ‚úÖ Type-safe: Cast inline pour chaque note
          ctx.attachedNotes.forEach((note: { title: string; slug: string; markdown_content: string }, index: number) => {
            content += `### Note ${index + 1}: ${note.title}\n`;
            content += `**Slug:** ${note.slug}\n\n`;
            content += `**Contenu:**\n\`\`\`markdown\n${note.markdown_content}\n\`\`\`\n\n`;
            content += `---\n\n`;
          });
          
          logger.dev(`[SystemMessageBuilder] üìé ${ctx.attachedNotes.length} notes attach√©es ajout√©es au contexte`);
        }
      }

      // 2. Template contextuel avec variables
      if (agentConfig.context_template) {
        try {
          const contextualContent = this.renderContextTemplate(agentConfig.context_template, context);
          if (contextualContent.trim()) {
            content = `${content}\n\n${contextualContent}`;
            hasContextTemplate = true;
            logger.dev(`[SystemMessageBuilder] üåç Template contextuel appliqu√©`);
          }
        } catch (error) {
          logger.error(`[SystemMessageBuilder] ‚ùå Erreur template contextuel:`, error);
        }
      }

      // 3. Personnalit√© (optionnel)
      if (agentConfig.personality?.trim()) {
        content += `\n\n## Personnalit√©\n${agentConfig.personality.trim()}`;
        hasPersonality = true;
        logger.dev(`[SystemMessageBuilder] üé≠ Personnalit√© ajout√©e`);
      }

      // 4. Domaines d'expertise (optionnel)
      if (agentConfig.expertise && agentConfig.expertise.length > 0) {
        const expertiseList = agentConfig.expertise.filter(e => e?.trim()).join(', ');
        if (expertiseList) {
          content += `\n\n## Domaines d'expertise\n${expertiseList}`;
          hasExpertise = true;
          logger.dev(`[SystemMessageBuilder] üéì Expertise ajout√©e`);
        }
      }

      // 5. Capacit√©s (optionnel)
      if (agentConfig.capabilities && agentConfig.capabilities.length > 0) {
        const capabilitiesList = agentConfig.capabilities.filter(c => c?.trim()).join(', ');
        if (capabilitiesList) {
          content += `\n\n## Capacit√©s\n${capabilitiesList}`;
          hasCapabilities = true;
          logger.dev(`[SystemMessageBuilder] üîß Capacit√©s ajout√©es`);
        }
      }

      logger.dev(`[SystemMessageBuilder] ‚úÖ Message syst√®me construit (${content.length} chars)`, {
        hasCustomInstructions,
        hasContextTemplate,
        hasPersonality,
        hasExpertise,
        hasCapabilities
      });

      return {
        content: content.trim(),
        hasCustomInstructions,
        hasContextTemplate,
        hasPersonality,
        hasExpertise,
        hasCapabilities
      };

    } catch (error) {
      logger.error(`[SystemMessageBuilder] ‚ùå Erreur construction message syst√®me:`, error);
      
      // Fallback en cas d'erreur
      return {
        content: fallbackTemplate,
        hasCustomInstructions: false,
        hasContextTemplate: false,
        hasPersonality: false,
        hasExpertise: false,
        hasCapabilities: false
      };
    }
  }

  /**
   * Rend un template contextuel avec substitution de variables
   */
  private renderContextTemplate(template: string, context: SystemMessageContext): string {
    if (!template || !context) {
      return '';
    }

    try {
      // Substitution simple des variables {{variable}}
      let rendered = template;
      
      // Remplacer les variables du contexte
      Object.entries(context).forEach(([key, value]) => {
        if (value !== undefined && value !== null) {
          const placeholder = new RegExp(`{{${key}}}`, 'g');
          rendered = rendered.replace(placeholder, String(value));
        }
      });

      // Nettoyer les placeholders non remplac√©s
      rendered = rendered.replace(/\{\{[^}]+\}\}/g, '');

      return rendered.trim();

    } catch (error) {
      logger.error(`[SystemMessageBuilder] ‚ùå Erreur rendu template contextuel:`, error);
      return '';
    }
  }

  /**
   * Valide la configuration d'un agent
   */
  validateAgentConfig(agentConfig: AgentSystemConfig): boolean {
    if (!agentConfig) {
      return false;
    }

    // Au moins une source d'instructions doit √™tre pr√©sente
    const hasInstructions = !!(
      agentConfig.system_instructions?.trim() ||
      agentConfig.instructions?.trim() ||
      agentConfig.context_template?.trim()
    );

    return hasInstructions;
  }

  /**
   * Obtient un r√©sum√© de la configuration d'un agent
   */
  getAgentConfigSummary(agentConfig: AgentSystemConfig): string {
    const parts: string[] = [];

    if (agentConfig.system_instructions?.trim()) {
      parts.push(`Instructions: ${agentConfig.system_instructions.trim().substring(0, 50)}...`);
    }
    if (agentConfig.context_template?.trim()) {
      parts.push(`Template: ${agentConfig.context_template.trim().substring(0, 30)}...`);
    }
    if (agentConfig.personality?.trim()) {
      parts.push(`Personnalit√©: ${agentConfig.personality.trim().substring(0, 30)}...`);
    }
    if (agentConfig.expertise?.length) {
      parts.push(`Expertise: ${agentConfig.expertise.length} domaines`);
    }
    if (agentConfig.capabilities?.length) {
      parts.push(`Capacit√©s: ${agentConfig.capabilities.length} items`);
    }

    return parts.length > 0 ? parts.join(' | ') : 'Configuration par d√©faut';
  }
}

// Instance singleton
export const systemMessageBuilder = SystemMessageBuilder.getInstance();
