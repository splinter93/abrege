import { useFileSystemStore } from '@/store/useFileSystemStore';
import { clientPollingTrigger } from './clientPollingTrigger';
import { simpleLogger as logger } from '@/utils/logger';

// Types pour les donn√©es d'API (compatibles avec V1)
export interface CreateNoteData {
  source_title: string;
  notebook_id: string;
  markdown_content?: string;
  header_image?: string;
  folder_id?: string | null;
  description?: string;
}

export interface UpdateNoteData {
  source_title?: string;
  markdown_content?: string;
  html_content?: string;
  header_image?: string | null;
  header_image_offset?: number;
  header_image_blur?: number;
  header_image_overlay?: number;
  header_title_in_image?: boolean;
  wide_mode?: boolean;
  a4_mode?: boolean;
  slash_lang?: 'fr' | 'en';
  font_family?: string;
  folder_id?: string | null;
  description?: string;
}

export interface CreateFolderData {
  name: string;
  notebook_id: string;
  parent_id?: string | null;
}

export interface UpdateFolderData {
  name?: string;
  parent_id?: string | null;
}

export interface CreateClasseurData {
  name: string;
  description?: string;
  icon?: string;
}

export interface UpdateClasseurData {
  name?: string;
  description?: string;
  icon?: string;
  position?: number;
}

/**
 * Service API V2 unifi√© qui utilise les endpoints API V2 avec les m√©canismes de V1
 * - Appels HTTP vers les endpoints V2 (pas d'acc√®s direct DB c√¥t√© client)
 * - Mise √† jour optimiste du store Zustand
 * - Polling intelligent d√©clench√© par API
 * - Compatible avec l'architecture existante
 */
export class V2UnifiedApi {
  private static instance: V2UnifiedApi;

  private constructor() {}

  static getInstance(): V2UnifiedApi {
    if (!V2UnifiedApi.instance) {
      V2UnifiedApi.instance = new V2UnifiedApi();
    }
    return V2UnifiedApi.instance;
  }

  /**
   * R√©cup√©rer les headers d'authentification
   */
  private async getAuthHeaders(): Promise<HeadersInit> {
    try {
      // Utiliser le client Supabase c√¥t√© client
      const { supabase } = await import('@/supabaseClient');
      const { data: { session } } = await supabase.auth.getSession();
      const headers: HeadersInit = { 
        'Content-Type': 'application/json',
        'X-Client-Type': 'V2UnifiedApi'
      };
      if (session?.access_token) {
        headers['Authorization'] = `Bearer ${session.access_token}`;
      }
      return headers;
    } catch {
      return { 
        'Content-Type': 'application/json',
        'X-Client-Type': 'V2UnifiedApi'
      };
    }
  }

  /**
   * Cr√©er une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async createNote(noteData: CreateNoteData, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üìù Cr√©ation note unifi√©e V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch('/api/v2/note/create', {
        method: 'POST',
        headers,
        body: JSON.stringify(noteData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur cr√©ation note: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
        logger.dev(`[V2UnifiedApi] üìã R√©ponse API:`, result);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      try {
        const store = useFileSystemStore.getState();
        if (process.env.NODE_ENV === 'development') {
          logger.dev(`[V2UnifiedApi] üîÑ Ajout note √† Zustand:`, result.note);
        }
        store.addNote(result.note);
      } catch (storeError) {
        logger.error('[V2UnifiedApi] ‚ö†Ô∏è Erreur acc√®s store Zustand:', storeError);
        if (process.env.NODE_ENV === 'development') {
          logger.dev('[V2UnifiedApi] ‚ö†Ô∏è Store non disponible, mise √† jour diff√©r√©e');
        }
      }
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('INSERT');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Note ajout√©e √† Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur cr√©ation note:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async updateNote(noteId: string, updateData: UpdateNoteData, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üîÑ Mise √† jour note unifi√©e V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/note/${noteId}/update`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur mise √† jour note: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateNote(noteId, result.note);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Note mise √† jour dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur mise √† jour note:', error);
      throw error;
    }
  }

  /**
   * Supprimer une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async deleteNote(noteId: string, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üóëÔ∏è Suppression note unifi√©e V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/note/${noteId}/delete`, {
        method: 'DELETE',
        headers
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur suppression note: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.removeNote(noteId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('DELETE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Note supprim√©e de Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return { success: true };
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur suppression note:', error);
      throw error;
    }
  }

  /**
   * Cr√©er un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async createFolder(folderData: CreateFolderData, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üìÅ Cr√©ation dossier unifi√© V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch('/api/v2/folder/create', {
        method: 'POST',
        headers,
        body: JSON.stringify(folderData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur cr√©ation dossier: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.addFolder(result.folder);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('INSERT');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Dossier ajout√© √† Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur cr√©ation dossier:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async updateFolder(folderId: string, updateData: UpdateFolderData, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üîÑ Mise √† jour dossier unifi√© V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/folder/${folderId}/update`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur mise √† jour dossier: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateFolder(folderId, result.folder);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Dossier mis √† jour dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur mise √† jour dossier:', error);
      throw error;
    }
  }

  /**
   * Supprimer un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async deleteFolder(folderId: string, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üóëÔ∏è Suppression dossier unifi√© V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/folder/${folderId}/delete`, {
        method: 'DELETE',
        headers
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur suppression dossier: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.removeFolder(folderId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('DELETE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Dossier supprim√© de Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return { success: true };
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur suppression dossier:', error);
      throw error;
    }
  }

  /**
   * D√©placer une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async moveNote(noteId: string, targetFolderId: string | null, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üì¶ D√©placement note unifi√© V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/note/${noteId}/move`, {
        method: 'PUT',
        headers,
        body: JSON.stringify({ folder_id: targetFolderId }) // üîß CORRECTION: Utiliser folder_id au lieu de target_folder_id
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur d√©placement note: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üîß CORRECTION: R√©cup√©rer le classeur_id de la note avant de la d√©placer
      const store = useFileSystemStore.getState();
      const currentNote = store.notes[noteId];
      const noteClasseurId = currentNote?.classeur_id;
      
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] üìù Note ${noteId} - classeur_id: ${noteClasseurId}, targetFolderId: ${targetFolderId}`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      store.moveNote(noteId, targetFolderId, noteClasseurId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Note d√©plac√©e dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur d√©placement note:', error);
      throw error;
    }
  }

  /**
   * D√©placer un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async moveFolder(folderId: string, targetParentId: string | null, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üì¶ D√©placement dossier unifi√© V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/folder/${folderId}/move`, {
        method: 'PUT',
        headers,
        body: JSON.stringify({ parent_id: targetParentId }) // üîß CORRECTION: Utiliser parent_id au lieu de target_parent_id
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur d√©placement dossier: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üîß CORRECTION: R√©cup√©rer le classeur_id du dossier avant de le d√©placer
      const store = useFileSystemStore.getState();
      const currentFolder = store.folders[folderId];
      const folderClasseurId = currentFolder?.classeur_id;
      
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] üìÅ Dossier ${folderId} - classeur_id: ${folderClasseurId}, targetParentId: ${targetParentId}`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      store.moveFolder(folderId, targetParentId, folderClasseurId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Dossier d√©plac√© dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur d√©placement dossier:', error);
      throw error;
    }
  }

  /**
   * Cr√©er un classeur avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async createClasseur(classeurData: CreateClasseurData, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üìö Cr√©ation classeur unifi√© V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch('/api/v2/classeur/create', {
        method: 'POST',
        headers,
        body: JSON.stringify(classeurData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur cr√©ation classeur: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.addClasseur(result.classeur);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('INSERT');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Classeur ajout√© √† Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur cr√©ation classeur:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour un classeur avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async updateClasseur(classeurId: string, updateData: UpdateClasseurData, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üîÑ Mise √† jour classeur unifi√© V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/classeur/${classeurId}/update`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur mise √† jour classeur: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateClasseur(classeurId, result.classeur);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Classeur mis √† jour dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur mise √† jour classeur:', error);
      throw error;
    }
  }

  /**
   * Supprimer un classeur avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async deleteClasseur(classeurId: string, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üóëÔ∏è Suppression classeur unifi√© V2');
    }
    const startTime = Date.now();
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/classeur/${classeurId}/delete`, {
        method: 'DELETE',
        headers
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur suppression classeur: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.removeClasseur(classeurId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('DELETE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ Classeur supprim√© de Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return { success: true };
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur suppression classeur:', error);
      throw error;
    }
  }

  /**
   * Ajouter du contenu √† une note
   */
  async addContentToNote(ref: string, content: string, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] ‚ûï Ajout contenu note unifi√© V2');
    }
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/note/${ref}/add-content`, {
        method: 'POST',
        headers,
        body: JSON.stringify({ content })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur ajout contenu note: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      
      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateNote(ref, { markdown_content: result.note.markdown_content });
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('UPDATE');
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur ajout contenu note:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer le contenu d'une note
   */
  async getNoteContent(ref: string, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üìñ R√©cup√©ration contenu note unifi√© V2');
    }
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v2/note/${ref}/content`, {
        method: 'GET',
        headers
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur r√©cup√©ration contenu note: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur r√©cup√©ration contenu note:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer l'arbre d'un classeur
   */
  async getClasseurTree(classeurId: string, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üå≥ R√©cup√©ration arbre classeur unifi√© V2');
      logger.dev(`[V2UnifiedApi] üìã Param√®tres: classeurId=${classeurId}, userId=${userId}`);
    }
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const url = `/api/v2/classeur/${classeurId}/tree`;
      
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] üåê Appel API: ${url}`);
        logger.dev(`[V2UnifiedApi] üîë Headers:`, headers);
      }
      
      const response = await fetch(url, {
        method: 'GET',
        headers
      });

      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] üì° R√©ponse API: ${response.status} ${response.statusText}`);
      }

      if (!response.ok) {
        const errorText = await response.text();
        if (process.env.NODE_ENV === 'development') {
          logger.dev(`[V2UnifiedApi] ‚ùå Erreur API: ${errorText}`);
        }
        throw new Error(`Erreur r√©cup√©ration arbre classeur: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] ‚úÖ R√©ponse API re√ßue:`, result);
      }
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur r√©cup√©ration arbre classeur:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer la liste des classeurs
   */
  async getClasseurs(userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üìö R√©cup√©ration classeurs unifi√© V2');
    }
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch('/api/v2/classeurs', {
        method: 'GET',
        headers
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur r√©cup√©ration classeurs: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur r√©cup√©ration classeurs:', error);
      throw error;
    }
  }

  /**
   * R√©organiser les classeurs
   */
  async reorderClasseurs(classeurs: Array<{ id: string; position: number }>, userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üîÑ R√©organisation classeurs unifi√© V2');
    }
    
    try {
      // üöÄ Appel vers l'endpoint API V2
      const headers = await this.getAuthHeaders();
      const response = await fetch('/api/v2/classeur/reorder', {
        method: 'PUT',
        headers,
        body: JSON.stringify({ classeurs })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur r√©organisation classeurs: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      
      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      result.classeurs.forEach(classeur => {
        store.updateClasseur(classeur.id, classeur);
      });
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('UPDATE');
      
      return result;
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur r√©organisation classeurs:', error);
      throw error;
    }
  }

  /**
   * Charger les classeurs avec leur contenu (remplace loadClasseursWithContent de V1)
   */
  async loadClasseursWithContent(userId: string) {
    if (process.env.NODE_ENV === 'development') {
      logger.dev('[V2UnifiedApi] üìö Chargement classeurs avec contenu unifi√© V2');
    }
    
    try {
      // üöÄ R√©cup√©rer les classeurs
      const classeursResult = await this.getClasseurs(userId);
      
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] üìä ${classeursResult.classeurs?.length || 0} classeurs r√©cup√©r√©s`);
      }
      
      // üöÄ Mettre √† jour le store Zustand avec les classeurs
      const store = useFileSystemStore.getState();
      store.setClasseurs(classeursResult.classeurs || []);
      
      // üöÄ Si aucun classeur, retourner imm√©diatement
      if (!classeursResult.classeurs || classeursResult.classeurs.length === 0) {
        if (process.env.NODE_ENV === 'development') {
          logger.dev('[V2UnifiedApi] ‚ÑπÔ∏è Aucun classeur trouv√©, pas de contenu √† charger');
        }
        return { success: true, classeurs: [] };
      }
      
      // üöÄ Accumuler tous les dossiers et notes de tous les classeurs
      const allDossiers: any[] = [];
      const allNotes: any[] = [];
      
      // üöÄ Pour chaque classeur, r√©cup√©rer l'arbre complet
      for (const classeur of classeursResult.classeurs) {
        try {
          if (process.env.NODE_ENV === 'development') {
            logger.dev(`[V2UnifiedApi] üå≥ Chargement arbre classeur: ${classeur.id} (${classeur.name})`);
          }
          
          // üöÄ Utiliser l'ID du classeur pour l'endpoint tree
          const treeResult = await this.getClasseurTree(classeur.id, userId);
          
          // üöÄ Accumuler les dossiers et notes de ce classeur
          if (treeResult.success && treeResult.tree) {
            // üöÄ L'endpoint retourne { tree: { classeur, folders, notes } }
            const dossiers = treeResult.tree.folders || [];
            const notes = treeResult.tree.notes || [];
            
            if (process.env.NODE_ENV === 'development') {
              logger.dev(`[V2UnifiedApi] üìÅ ${dossiers.length} dossiers et ${notes.length} notes trouv√©s pour ${classeur.name}`);
            }
            
            // üöÄ Ajouter les dossiers et notes √† nos collections accumul√©es
            allDossiers.push(...dossiers);
            allNotes.push(...notes);
          }
        } catch (treeError) {
          logger.warn(`[V2UnifiedApi] ‚ö†Ô∏è Erreur chargement arbre classeur ${classeur.id} (${classeur.name}):`, treeError);
          // Continuer avec les autres classeurs m√™me si un √©choue
        }
      }
      
      // üöÄ Maintenant mettre √† jour le store avec TOUT le contenu accumul√©
      if (process.env.NODE_ENV === 'development') {
        logger.dev(`[V2UnifiedApi] üìä Mise √† jour store avec ${allDossiers.length} dossiers et ${allNotes.length} notes au total`);
      }
      
      store.setFolders(allDossiers);
      store.setNotes(allNotes);
      
      if (process.env.NODE_ENV === 'development') {
        logger.dev('[V2UnifiedApi] ‚úÖ Chargement classeurs avec contenu termin√©');
      }
      
      return { success: true, classeurs: classeursResult.classeurs };
    } catch (error) {
      logger.error('[V2UnifiedApi] ‚ùå Erreur chargement classeurs avec contenu:', error);
      throw error;
    }
  }
}

// Export de l'instance singleton
export const v2UnifiedApi = V2UnifiedApi.getInstance(); 