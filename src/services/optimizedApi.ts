import { useFileSystemStore } from '@/store/useFileSystemStore';
import { clientPollingTrigger } from './clientPollingTrigger';
import { ErrorHandler } from './errorHandler';
import { logApi, logStore, logPolling } from '@/utils/logger';
import { supabase } from '@/supabaseClient';
import { simpleLogger as logger } from '@/utils/logger';

// Types pour les donn√©es d'API
interface CreateNoteData {
  source_title: string;
  notebook_id: string;
  markdown_content?: string;
  header_image?: string;
  folder_id?: string | null;
}

interface UpdateNoteData {
  source_title?: string;
  markdown_content?: string;
  html_content?: string;
  header_image?: string;
  folder_id?: string | null;
}

interface CreateFolderData {
  name: string;
  notebook_id: string;
  parent_id?: string | null;
}

interface UpdateFolderData {
  name?: string;
  parent_id?: string | null;
}

interface CreateClasseurData {
  name: string;
  description?: string;
  icon?: string;
}

interface UpdateClasseurData {
  name?: string;
  description?: string;
  icon?: string;
  position?: number;
}

interface ApiError extends Error {
  status?: number;
  statusText?: string;
}

interface PublishNoteResponse {
  success: boolean;
  url?: string;
  message?: string;
}

/**
 * Service API optimis√© pour une latence minimale
 * Met √† jour directement Zustand et d√©clenche le polling c√¥t√© client
 */
export class OptimizedApi {
  private static instance: OptimizedApi;

  private constructor() {}

  static getInstance(): OptimizedApi {
    if (!OptimizedApi.instance) {
      OptimizedApi.instance = new OptimizedApi();
    }
    return OptimizedApi.instance;
  }

  /**
   * R√©cup√®re le token d'authentification pour les appels API
   */
  private async getAuthHeaders(): Promise<HeadersInit> {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      const headers: HeadersInit = {
        'Content-Type': 'application/json'
      };
      
      if (session?.access_token) {
        headers['Authorization'] = `Bearer ${session.access_token}`;
      }
      
      return headers;
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur r√©cup√©ration token:', error);
      return { 'Content-Type': 'application/json' };
    }
  }

  /**
   * Cr√©er une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async createNote(noteData: CreateNoteData) {
    const startTime = Date.now();
    const context = { operation: 'create_note', component: 'OptimizedApi' };
    
    logApi('create_note', 'üöÄ D√©but cr√©ation note', context);
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Appel API
      const response = await fetch('/api/v1/note/create', {
        method: 'POST',
        headers,
        body: JSON.stringify(noteData)
      });

      if (!response.ok) {
        const error = new Error(`Erreur cr√©ation note: ${response.statusText}`) as ApiError;
        error.status = response.status;
        error.statusText = response.statusText;
        throw error;
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      logApi('create_note', `‚úÖ API termin√©e en ${apiTime}ms`, context);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.addNote(result.note);
      logStore('add_note', `Note ajout√©e: ${result.note.source_title}`, context);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('INSERT');
      logPolling('trigger', 'Polling INSERT d√©clench√©', context);
      
      const totalTime = Date.now() - startTime;
      logApi('create_note', `‚úÖ Op√©ration compl√®te en ${totalTime}ms`, context);
      
      return result;
    } catch (error) {
      ErrorHandler.handleApiError(error, context);
      throw error;
    }
  }

  /**
   * Mettre √† jour une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async updateNote(noteId: string, updateData: UpdateNoteData) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üîÑ Mise √† jour note optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Appel API avec [ref] au lieu de noteId direct
      const response = await fetch(`/api/v1/note/${noteId}`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erreur mise √† jour note: ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateNote(noteId, result.note);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Note mise √† jour dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur mise √† jour note:', error);
      throw error;
    }
  }

  /**
   * Supprimer une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async deleteNote(noteId: string) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üóëÔ∏è Suppression note optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Appel API
      const response = await fetch(`/api/v1/note/${noteId}`, {
        method: 'DELETE',
        headers
      });

      if (!response.ok) {
        throw new Error(`Erreur suppression note: ${response.statusText}`);
      }

      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.removeNote(noteId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('DELETE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Note supprim√©e de Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return { success: true };
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur suppression note:', error);
      throw error;
    }
  }

  /**
   * Cr√©er un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async createFolder(folderData: CreateFolderData) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üìÅ Cr√©ation dossier optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Appel API
      const response = await fetch('/api/v1/folder/create', {
        method: 'POST',
        headers,
        body: JSON.stringify(folderData)
      });

      if (!response.ok) {
        throw new Error(`Erreur cr√©ation dossier: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.addFolder(result.folder);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('INSERT');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Dossier ajout√© √† Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur cr√©ation dossier:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async updateFolder(folderId: string, updateData: UpdateFolderData) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üîÑ Mise √† jour dossier optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Appel API
      const response = await fetch(`/api/v1/folder/${folderId}`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        throw new Error(`Erreur mise √† jour dossier: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateFolder(folderId, result.folder);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Dossier mis √† jour dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur mise √† jour dossier:', error);
      throw error;
    }
  }

  /**
   * Supprimer un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async deleteFolder(folderId: string) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üóëÔ∏è Suppression dossier optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Appel API
      const response = await fetch(`/api/v1/folder/${folderId}`, {
        method: 'DELETE',
        headers
      });

      if (!response.ok) {
        throw new Error(`Erreur suppression dossier: ${response.statusText}`);
      }

      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.removeFolder(folderId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('DELETE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Dossier supprim√© de Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return { success: true };
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur suppression dossier:', error);
      throw error;
    }
  }

  /**
   * D√©placer une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async moveNote(noteId: string, targetFolderId: string | null, targetClasseurId?: string) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üì¶ D√©placement note optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Pr√©parer le payload
      const payload: any = {};
      if (targetFolderId !== undefined) payload.target_folder_id = targetFolderId;
      if (targetClasseurId) payload.target_classeur_id = targetClasseurId;
      
      // Appel API
      const response = await fetch(`/api/v1/note/${noteId}/move`, {
        method: 'PATCH',
        headers,
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`Erreur d√©placement note: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.moveNote(noteId, targetFolderId, targetClasseurId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Note d√©plac√©e dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur d√©placement note:', error);
      throw error;
    }
  }

  /**
   * D√©placer un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async moveFolder(folderId: string, targetParentId: string | null, targetClasseurId?: string) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üì¶ D√©placement dossier optimis√©');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Pr√©parer le payload
      const payload: any = {};
      if (targetParentId !== undefined) payload.target_parent_id = targetParentId;
      if (targetClasseurId) payload.target_classeur_id = targetClasseurId;
      
      // Appel API
      const response = await fetch(`/api/v1/dossier/${folderId}/move`, {
        method: 'PATCH',
        headers,
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`Erreur d√©placement dossier: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.moveFolder(folderId, targetParentId, targetClasseurId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Dossier d√©plac√© dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur d√©placement dossier:', error);
      throw error;
    }
  }

  /**
   * Cr√©er un classeur avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async createClasseur(classeurData: CreateClasseurData) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üìö Cr√©ation classeur optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Appel API
      const response = await fetch('/api/v1/classeur/create', {
        method: 'POST',
        headers,
        body: JSON.stringify(classeurData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        logger.error(`[OptimizedApi] ‚ùå R√©ponse API: ${response.status} ${response.statusText}`);
        logger.error(`[OptimizedApi] ‚ùå Contenu erreur: ${errorText}`);
        throw new Error(`Erreur cr√©ation classeur: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      logger.dev(`[OptimizedApi] üìã R√©ponse API:`, result);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      try {
        const store = useFileSystemStore.getState();
        if (process.env.NODE_ENV === 'development') {
        logger.dev(`[OptimizedApi] üîÑ Ajout classeur √† Zustand:`, result.classeur);
        }
        store.addClasseur(result.classeur);
      } catch (storeError) {
        logger.error('[OptimizedApi] ‚ö†Ô∏è Erreur acc√®s store Zustand:', storeError);
        if (process.env.NODE_ENV === 'development') {
        logger.dev('[OptimizedApi] ‚ö†Ô∏è Store non disponible, mise √† jour diff√©r√©e');
        }
      }
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('INSERT');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Classeur ajout√© √† Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur cr√©ation classeur:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour un classeur avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async updateClasseur(classeurId: string, updateData: UpdateClasseurData) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üîÑ Mise √† jour classeur optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Appel API
      const response = await fetch(`/api/v1/classeur/${classeurId}`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        throw new Error(`Erreur mise √† jour classeur: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateClasseur(classeurId, result.classeur);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Classeur mis √† jour dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur mise √† jour classeur:', error);
      throw error;
    }
  }

  /**
   * Supprimer un classeur avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async deleteClasseur(classeurId: string) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üóëÔ∏è Suppression classeur optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // R√©cup√©rer les headers d'authentification
      const headers = await this.getAuthHeaders();
      
      // Appel API
      const response = await fetch(`/api/v1/classeur/${classeurId}`, {
        method: 'DELETE',
        headers
      });

      if (!response.ok) {
        throw new Error(`Erreur suppression classeur: ${response.statusText}`);
      }

      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.removeClasseur(classeurId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('DELETE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Classeur supprim√© de Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return { success: true };
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur suppression classeur:', error);
      throw error;
    }
  }

  /**
   * R√©organiser les classeurs avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async reorderClasseurs(updatedClasseurs: { id: string; position: number }[]) {
    if (process.env.NODE_ENV === 'development') {
    logger.dev('[OptimizedApi] üîÑ R√©organisation classeurs optimis√©e');
    }
    const startTime = Date.now();
    
    try {
      // Appel API avec authentification
      const headers = await this.getAuthHeaders();
      const response = await fetch('/api/v1/classeur/reorder', {
        method: 'PUT',
        headers,
        body: JSON.stringify({ classeurs: updatedClasseurs })
      });

      if (!response.ok) {
        throw new Error(`Erreur r√©organisation classeurs: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      }

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      updatedClasseurs.forEach(({ id, position }) => {
        store.updateClasseur(id, { position });
        if (process.env.NODE_ENV === 'development') {
          logger.dev(`[OptimizedApi] üìç Position mise √† jour pour classeur ${id}: ${position}`);
        }
      });
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      if (process.env.NODE_ENV === 'development') {
      logger.dev(`[OptimizedApi] ‚úÖ Classeurs r√©organis√©s dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      }
      
      return result;
    } catch (error) {
      logger.error('[OptimizedApi] ‚ùå Erreur r√©organisation classeurs:', error);
      throw error;
    }
  }

  /**
   * Publier/d√©publier une note
   */
  async publishNoteREST(noteId: string, isPublished: boolean): Promise<PublishNoteResponse> {
    const startTime = Date.now();
    const context = { operation: 'publish_note', component: 'OptimizedApi' };
    
    logApi('publish_note', `üöÄ D√©but publication note ${noteId}`, context);
    
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`/api/v1/note/${noteId}/publish`, {
        method: 'POST',
        headers,
        body: JSON.stringify({ ispublished: isPublished })
      });

      if (!response.ok) {
        const error = new Error(`Erreur publication note: ${response.statusText}`) as ApiError;
        error.status = response.status;
        error.statusText = response.statusText;
        throw error;
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      logApi('publish_note', `‚úÖ Publication termin√©e en ${apiTime}ms`, context);

      return result;
    } catch (error) {
      logApi('publish_note', `‚ùå Erreur publication: ${error}`, context);
      throw error;
    }
  }
}

// Export de l'instance singleton
export const optimizedApi = OptimizedApi.getInstance(); 