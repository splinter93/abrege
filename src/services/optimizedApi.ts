import { useFileSystemStore } from '@/store/useFileSystemStore';
import { clientPollingTrigger } from './clientPollingTrigger';
import { ErrorHandler } from './errorHandler';
import { logApi, logStore, logPolling } from '@/utils/logger';

/**
 * Service API optimis√© pour une latence minimale
 * Met √† jour directement Zustand et d√©clenche le polling c√¥t√© client
 */
export class OptimizedApi {
  private static instance: OptimizedApi;

  static getInstance(): OptimizedApi {
    if (!OptimizedApi.instance) {
      OptimizedApi.instance = new OptimizedApi();
    }
    return OptimizedApi.instance;
  }

  /**
   * Cr√©er une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async createNote(noteData: any) {
    const startTime = Date.now();
    const context = { operation: 'create_note', component: 'OptimizedApi' };
    
    logApi('create_note', 'üöÄ D√©but cr√©ation note', context);
    
    try {
      // Appel API
      const response = await fetch('/api/v1/note/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(noteData)
      });

      if (!response.ok) {
        const error = new Error(`Erreur cr√©ation note: ${response.statusText}`);
        (error as any).status = response.status;
        (error as any).statusText = response.statusText;
        throw error;
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      logApi('create_note', `‚úÖ API termin√©e en ${apiTime}ms`, context);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.addNote(result.note);
      logStore('add_note', `Note ajout√©e: ${result.note.source_title}`, context);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('INSERT');
      logPolling('trigger', 'Polling INSERT d√©clench√©', context);
      
      const totalTime = Date.now() - startTime;
      logApi('create_note', `‚úÖ Op√©ration compl√®te en ${totalTime}ms`, context);
      
      return result;
    } catch (error) {
      ErrorHandler.handleApiError(error, context);
      throw error;
    }
  }

  /**
   * Mettre √† jour une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async updateNote(noteId: string, updateData: any) {
    console.log('[OptimizedApi] üîÑ Mise √† jour note optimis√©e');
    const startTime = Date.now();
    
    try {
      // Appel API
      const response = await fetch(`/api/v1/note/${noteId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        throw new Error(`Erreur mise √† jour note: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateNote(noteId, result.note);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ Note mise √† jour dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      
      return result;
    } catch (error) {
      console.error('[OptimizedApi] ‚ùå Erreur mise √† jour note:', error);
      throw error;
    }
  }

  /**
   * Supprimer une note avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async deleteNote(noteId: string) {
    console.log('[OptimizedApi] üóëÔ∏è Suppression note optimis√©e');
    const startTime = Date.now();
    
    try {
      // Appel API
      const response = await fetch(`/api/v1/note/${noteId}`, {
        method: 'DELETE'
      });

      if (!response.ok) {
        throw new Error(`Erreur suppression note: ${response.statusText}`);
      }

      const apiTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.removeNote(noteId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerArticlesPolling('DELETE');
      
      const totalTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ Note supprim√©e de Zustand + polling d√©clench√© en ${totalTime}ms total`);
      
      return { success: true };
    } catch (error) {
      console.error('[OptimizedApi] ‚ùå Erreur suppression note:', error);
      throw error;
    }
  }

  /**
   * Cr√©er un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async createFolder(folderData: any) {
    console.log('[OptimizedApi] üìÅ Cr√©ation dossier optimis√©e');
    const startTime = Date.now();
    
    try {
      // Appel API
      const response = await fetch('/api/v1/folder/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(folderData)
      });

      if (!response.ok) {
        throw new Error(`Erreur cr√©ation dossier: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.addFolder(result.folder);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('INSERT');
      
      const totalTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ Dossier ajout√© √† Zustand + polling d√©clench√© en ${totalTime}ms total`);
      
      return result;
    } catch (error) {
      console.error('[OptimizedApi] ‚ùå Erreur cr√©ation dossier:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async updateFolder(folderId: string, updateData: any) {
    console.log('[OptimizedApi] üîÑ Mise √† jour dossier optimis√©e');
    const startTime = Date.now();
    
    try {
      // Appel API
      const response = await fetch(`/api/v1/folder/${folderId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        throw new Error(`Erreur mise √† jour dossier: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateFolder(folderId, result.folder);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ Dossier mis √† jour dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      
      return result;
    } catch (error) {
      console.error('[OptimizedApi] ‚ùå Erreur mise √† jour dossier:', error);
      throw error;
    }
  }

  /**
   * Supprimer un dossier avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async deleteFolder(folderId: string) {
    console.log('[OptimizedApi] üóëÔ∏è Suppression dossier optimis√©e');
    const startTime = Date.now();
    
    try {
      // Appel API
      const response = await fetch(`/api/v1/folder/${folderId}`, {
        method: 'DELETE'
      });

      if (!response.ok) {
        throw new Error(`Erreur suppression dossier: ${response.statusText}`);
      }

      const apiTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.removeFolder(folderId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerFoldersPolling('DELETE');
      
      const totalTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ Dossier supprim√© de Zustand + polling d√©clench√© en ${totalTime}ms total`);
      
      return { success: true };
    } catch (error) {
      console.error('[OptimizedApi] ‚ùå Erreur suppression dossier:', error);
      throw error;
    }
  }

  /**
   * Cr√©er un classeur avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async createClasseur(classeurData: any) {
    console.log('[OptimizedApi] üìö Cr√©ation classeur optimis√©e');
    const startTime = Date.now();
    
    try {
      // Appel API
      const response = await fetch('/api/v1/classeur/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(classeurData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`[OptimizedApi] ‚ùå R√©ponse API: ${response.status} ${response.statusText}`);
        console.error(`[OptimizedApi] ‚ùå Contenu erreur: ${errorText}`);
        throw new Error(`Erreur cr√©ation classeur: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);
      console.log(`[OptimizedApi] üìã R√©ponse API:`, result);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      try {
        const store = useFileSystemStore.getState();
        console.log(`[OptimizedApi] üîÑ Ajout classeur √† Zustand:`, result.classeur);
        store.addClasseur(result.classeur);
      } catch (storeError) {
        console.error('[OptimizedApi] ‚ö†Ô∏è Erreur acc√®s store Zustand:', storeError);
        console.log('[OptimizedApi] ‚ö†Ô∏è Store non disponible, mise √† jour diff√©r√©e');
      }
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('INSERT');
      
      const totalTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ Classeur ajout√© √† Zustand + polling d√©clench√© en ${totalTime}ms total`);
      
      return result;
    } catch (error) {
      console.error('[OptimizedApi] ‚ùå Erreur cr√©ation classeur:', error);
      throw error;
    }
  }

  /**
   * Mettre √† jour un classeur avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async updateClasseur(classeurId: string, updateData: any) {
    console.log('[OptimizedApi] üîÑ Mise √† jour classeur optimis√©e');
    const startTime = Date.now();
    
    try {
      // Appel API
      const response = await fetch(`/api/v1/classeur/${classeurId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        throw new Error(`Erreur mise √† jour classeur: ${response.statusText}`);
      }

      const result = await response.json();
      const apiTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.updateClasseur(classeurId, result.classeur);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('UPDATE');
      
      const totalTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ Classeur mis √† jour dans Zustand + polling d√©clench√© en ${totalTime}ms total`);
      
      return result;
    } catch (error) {
      console.error('[OptimizedApi] ‚ùå Erreur mise √† jour classeur:', error);
      throw error;
    }
  }

  /**
   * Supprimer un classeur avec mise √† jour directe de Zustand + polling c√¥t√© client
   */
  async deleteClasseur(classeurId: string) {
    console.log('[OptimizedApi] üóëÔ∏è Suppression classeur optimis√©e');
    const startTime = Date.now();
    
    try {
      // Appel API
      const response = await fetch(`/api/v1/classeur/${classeurId}`, {
        method: 'DELETE'
      });

      if (!response.ok) {
        throw new Error(`Erreur suppression classeur: ${response.statusText}`);
      }

      const apiTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ API termin√©e en ${apiTime}ms`);

      // üöÄ Mise √† jour directe de Zustand (instantan√©e)
      const store = useFileSystemStore.getState();
      store.removeClasseur(classeurId);
      
      // üöÄ D√©clencher le polling c√¥t√© client imm√©diatement
      await clientPollingTrigger.triggerClasseursPolling('DELETE');
      
      const totalTime = Date.now() - startTime;
      console.log(`[OptimizedApi] ‚úÖ Classeur supprim√© de Zustand + polling d√©clench√© en ${totalTime}ms total`);
      
      return { success: true };
    } catch (error) {
      console.error('[OptimizedApi] ‚ùå Erreur suppression classeur:', error);
      throw error;
    }
  }
}

// Export de l'instance singleton
export const optimizedApi = OptimizedApi.getInstance(); 