/**
 * Service d'ex√©cution des prompts √©diteur avec agents
 * @module services/editorPromptExecutor
 */

import type { EditorPrompt } from '@/types/editorPrompts';
import type { Agent } from '@/types/chat';
import { simpleLogger as logger } from '@/utils/logger';

interface ExecutePromptResult {
  success: boolean;
  response?: string;
  error?: string;
}

/**
 * Service pour ex√©cuter les prompts √©diteur avec les agents sp√©cialis√©s
 */
export class EditorPromptExecutor {
  /**
   * V√©rifie si un agent est disponible et actif
   */
  private static async isAgentAvailable(agentId: string): Promise<boolean> {
    try {
      const response = await fetch(`/api/ui/agents?specialized=false`);
      if (!response.ok) return false;

      const data = await response.json();
      const agent = data.agents?.find((a: Agent) => a.id === agentId);

      return agent && agent.is_active;
    } catch (error) {
      logger.error('[EditorPromptExecutor] ‚ùå Erreur v√©rification agent:', error);
      return false;
    }
  }

  /**
   * Remplace le placeholder {selection} dans le template
   */
  private static replaceSelection(template: string, selectedText: string): string {
    // Remplacer toutes les occurrences de {selection}
    const result = template.replace(/{selection}/g, selectedText);
    
    logger.dev('[EditorPromptExecutor] üîÑ Remplacement {selection}:', {
      templateLength: template.length,
      hasPlaceholder: template.includes('{selection}'),
      selectedTextLength: selectedText.length,
      resultLength: result.length
    });
    
    return result;
  }

  /**
   * Ex√©cute un prompt √©diteur avec l'agent associ√©
   * @param prompt - Prompt √† ex√©cuter
   * @param selectedText - Texte s√©lectionn√© dans l'√©diteur
   * @param userIdOrToken - ID de l'utilisateur (UUID) ou token JWT
   * @returns R√©sultat de l'ex√©cution
   */
  static async executePrompt(
    prompt: EditorPrompt,
    selectedText: string,
    userIdOrToken: string
  ): Promise<ExecutePromptResult> {
    try {
      logger.info('[EditorPromptExecutor] üöÄ Ex√©cution prompt:', {
        promptName: prompt.name,
        agentId: prompt.agent_id,
        selectionLength: selectedText.length
      });

      // 1. V√©rifier que l'agent existe et est actif
      if (!prompt.agent_id) {
        return {
          success: false,
          error: 'Aucun agent assign√© √† ce prompt'
        };
      }

      const isAvailable = await this.isAgentAvailable(prompt.agent_id);
      if (!isAvailable) {
        return {
          success: false,
          error: 'Agent non disponible ou inactif'
        };
      }

      // 2. Remplacer {selection} dans le template
      let finalPrompt = this.replaceSelection(prompt.prompt_template, selectedText);
      
      // ‚úÖ FIX: Si le template ne contient pas {selection}, ajouter le texte √† la fin
      if (!prompt.prompt_template.includes('{selection}')) {
        logger.dev('[EditorPromptExecutor] ‚ö†Ô∏è Template sans {selection}, ajout du texte √† la fin');
        finalPrompt = `${prompt.prompt_template}\n\nTexte √† traiter :\n${selectedText}`;
      }

      logger.dev('[EditorPromptExecutor] üìù Prompt final:', finalPrompt);

      // 3. G√©n√©rer un sessionId temporaire pour cette ex√©cution
      const tempSessionId = `prompt_${Date.now()}_${Math.random().toString(36).substring(7)}`;

      // 4. Pr√©parer le payload de la requ√™te
      const requestPayload: any = {
        message: finalPrompt,
        context: {
          type: 'editor_prompt',
          sessionId: tempSessionId, // ‚úÖ FIX: Ajouter le sessionId requis
          agentId: prompt.agent_id,
          promptId: prompt.id,
          promptName: prompt.name,
          selectedText: selectedText.substring(0, 200) // Aper√ßu du texte s√©lectionn√©
        },
        history: [],
        provider: 'groq'
      };

      // üîß NOUVEAU: Ajouter structured outputs si configur√©
      if (prompt.use_structured_output && prompt.output_schema) {
        requestPayload.response_format = {
          type: 'json_schema',
          json_schema: {
            name: 'editor_prompt_response',
            strict: true,
            schema: prompt.output_schema
          }
        };
        
        // Ajouter instruction explicite dans le prompt
        requestPayload.message += '\n\nIMPORTANT: Return ONLY the requested content in the "content" field of the JSON response. NO introduction, NO explanation, NO extra phrases.';
        
        logger.dev('[EditorPromptExecutor] üìã Structured output activ√©:', {
          schema: prompt.output_schema
        });
      }

      // 5. Appeler l'API LLM avec l'agent sp√©cifique
      const response = await fetch('/api/chat/llm', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${userIdOrToken}`
        },
        body: JSON.stringify(requestPayload)
      });

      if (!response.ok) {
        const errorData = await response.json();
        const errorMessage = errorData.error || errorData.message || 'Erreur lors de l\'appel √† l\'API';
        logger.error('[EditorPromptExecutor] ‚ùå Erreur API:', {
          status: response.status,
          statusText: response.statusText,
          error: errorMessage,
          fullError: errorData
        });
        return {
          success: false,
          error: `${errorMessage} (${response.status})`
        };
      }

      const data = await response.json();

      logger.info('[EditorPromptExecutor] ‚úÖ R√©ponse API re√ßue:', {
        hasResponse: !!data.response,
        hasMessage: !!data.message,
        dataKeys: Object.keys(data)
      });

      let responseText = data.response || data.message || data.content || '';
      
      // üîß NOUVEAU: Parser la r√©ponse structur√©e si n√©cessaire
      if (prompt.use_structured_output && responseText) {
        try {
          // Essayer de parser la r√©ponse JSON
          const parsed = JSON.parse(responseText);
          
          if (parsed && typeof parsed.content === 'string') {
            responseText = parsed.content;
            logger.info('[EditorPromptExecutor] üìã Structured output pars√© avec succ√®s');
          } else {
            logger.warn('[EditorPromptExecutor] ‚ö†Ô∏è Structured output invalide, utilisation du texte brut');
          }
        } catch (parseError) {
          // Si le parsing √©choue, utiliser le texte brut
          logger.warn('[EditorPromptExecutor] ‚ö†Ô∏è √âchec parsing JSON, utilisation du texte brut:', parseError);
        }
      }
      
      if (!responseText) {
        logger.warn('[EditorPromptExecutor] ‚ö†Ô∏è Aucun texte dans la r√©ponse:', data);
        return {
          success: false,
          error: 'R√©ponse vide de l\'API'
        };
      }

      return {
        success: true,
        response: responseText
      };

    } catch (error) {
      logger.error('[EditorPromptExecutor] ‚ùå Erreur ex√©cution:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }

  /**
   * Ex√©cute un prompt en mode streaming (pour affichage en temps r√©el)
   * @param prompt - Prompt √† ex√©cuter
   * @param selectedText - Texte s√©lectionn√©
   * @param userToken - Token utilisateur
   * @param onChunk - Callback appel√© pour chaque chunk re√ßu
   * @returns R√©sultat final
   */
  static async executePromptStream(
    prompt: EditorPrompt,
    selectedText: string,
    userToken: string,
    onChunk: (chunk: string) => void
  ): Promise<ExecutePromptResult> {
    try {
      logger.info('[EditorPromptExecutor] üåä Ex√©cution prompt en streaming:', prompt.name);

      // V√©rifications identiques
      if (!prompt.agent_id) {
        return { success: false, error: 'Aucun agent assign√© √† ce prompt' };
      }

      const isAvailable = await this.isAgentAvailable(prompt.agent_id);
      if (!isAvailable) {
        return { success: false, error: 'Agent non disponible ou inactif' };
      }

      const finalPrompt = this.replaceSelection(prompt.prompt_template, selectedText);

      // Appel en mode streaming
      const response = await fetch('/api/chat/llm', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${userToken}`
        },
        body: JSON.stringify({
          message: finalPrompt,
          context: {
            type: 'editor_prompt',
            agentId: prompt.agent_id,
            promptId: prompt.id,
            promptName: prompt.name,
            selectedText: selectedText.substring(0, 200)
          },
          history: [],
          provider: 'groq',
          stream: true
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        return {
          success: false,
          error: errorData.error || 'Erreur lors de l\'appel √† l\'API'
        };
      }

      // Lire le stream
      const reader = response.body?.getReader();
      if (!reader) {
        return { success: false, error: 'Stream non disponible' };
      }

      const decoder = new TextDecoder();
      let fullResponse = '';

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value, { stream: true });
        fullResponse += chunk;
        onChunk(chunk);
      }

      logger.info('[EditorPromptExecutor] ‚úÖ Streaming termin√©');

      return {
        success: true,
        response: fullResponse
      };

    } catch (error) {
      logger.error('[EditorPromptExecutor] ‚ùå Erreur streaming:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Erreur inconnue'
      };
    }
  }
}

