import { createClient } from '@supabase/supabase-js';
import type { ResourceType } from './slugGenerator';
import { logApi } from './logger';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
// IMPORTANT: L'API V2 est utilis√©e par l'Agent c√¥t√© serveur sans JWT utilisateur.
// Pour √©viter les erreurs RLS tout en garantissant la s√©curit√©, on utilise la cl√© Service Role
// et on applique syst√©matiquement des filtres user_id dans toutes les requ√™tes.
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

export class V2ResourceResolver {
  /**
   * R√©sout une r√©f√©rence (UUID ou slug) vers un UUID pour les endpoints V2
   */
  public static async resolveRef(
    ref: string, 
    type: ResourceType,
    userId: string,
    context: { operation: string; component: string },
    userToken?: string
  ): Promise<{ success: true; id: string } | { success: false; error: string; status: number }> {
    
    try {
      // ‚úÖ LOGGING D√âTAILL√â pour debug
      console.log('üîç [V2ResourceResolver] Tentative de r√©solution:', {
        ref,
        type,
        userId,
        hasUserToken: !!userToken,
        context
      });
      
      logApi.info(`üîç Tentative de r√©solution: ${ref} (type: ${type}, userId: ${userId})`, context);
      
      // Utiliser directement le service role key au lieu de ResourceResolver
      const resolvedId = await this.resolveRefDirect(ref, type, userId);
      console.log('üîç [V2ResourceResolver] R√©sultat r√©solution directe:', {
        resolvedId,
        hasResolvedId: !!resolvedId
      });
      
      if (!resolvedId) {
        const errorMsg = `‚ùå R√©f√©rence non trouv√©e: ${ref} (type: ${type})`;
        console.error(errorMsg, { ref, type, userId, context });
        logApi.error(errorMsg, context);
        return {
          success: false,
          error: `${type === 'note' ? 'Note' : type === 'folder' ? 'Dossier' : 'Classeur'} non trouv√©`,
          status: 404
        };
      }

      console.log('‚úÖ [V2ResourceResolver] R√©f√©rence r√©solue avec succ√®s:', {
        ref,
        resolvedId,
        type
      });
      
      logApi.info(`‚úÖ R√©f√©rence r√©solue: ${ref} ‚Üí ${resolvedId}`, context);
      return { success: true, id: resolvedId };

    } catch (error) {
      const errorMsg = `‚ùå Erreur r√©solution: ${error}`;
      console.error(errorMsg, { error, ref, type, userId, context });
      logApi.error(errorMsg, context);
      return {
        success: false,
        error: 'Erreur lors de la r√©solution de la r√©f√©rence',
        status: 500
      };
    }
  }

  /**
   * R√©sout directement une r√©f√©rence en utilisant le service role key
   */
  private static async resolveRefDirect(
    ref: string, 
    type: ResourceType,
    userId: string
  ): Promise<string | null> {
    const tableName = this.getTableName(type);
    
    console.log('üîç [V2ResourceResolver] R√©solution directe:', {
      ref,
      type,
      tableName,
      userId
    });
    
    // ‚úÖ 1. Nettoyer l'ID (remplacer les tirets longs par des tirets courts)
    const cleanRef = ref.replace(/‚Äë/g, '-'); // Remplace les em-dash (‚Äë) par des hyphens (-)
    console.log('üßπ [V2ResourceResolver] R√©f√©rence nettoy√©e:', {
      original: ref,
      cleaned: cleanRef,
      hasEmDash: ref.includes('‚Äë'),
      hasHyphen: ref.includes('-')
    });
    
    // ‚úÖ 2. Si c'est un UUID, v√©rifier qu'il existe et appartient √† l'utilisateur
    if (this.isUUID(cleanRef)) {
      console.log('üîç [V2ResourceResolver] R√©f√©rence est un UUID, validation...');
      
      try {
        const { data } = await supabase
          .from(tableName)
          .select('id')
          .eq('id', cleanRef)
          .eq('user_id', userId)
          .single();
        
        console.log('‚úÖ [V2ResourceResolver] UUID valid√©:', {
          found: !!data,
          id: data?.id || null
        });
        
        return data?.id || null;
      } catch (error) {
        console.error(`‚ùå [V2ResourceResolver] Erreur validation UUID ${cleanRef}:`, error);
        return null;
      }
    }
    
    // ‚úÖ 3. Sinon, chercher par slug (utiliser la r√©f√©rence originale pour le slug)
    console.log('üîç [V2ResourceResolver] R√©f√©rence n\'est pas un UUID, recherche par slug...');
    
    try {
      const { data } = await supabase
        .from(tableName)
        .select('id')
        .eq('slug', ref) // Utiliser ref original pour le slug
        .eq('user_id', userId)
        .single();
      
      console.log('‚úÖ [V2ResourceResolver] Slug r√©solu:', {
        slug: ref,
        found: !!data,
        id: data?.id || null
      });
      
      return data?.id || null;
    } catch (error) {
      console.error(`‚ùå [V2ResourceResolver] Erreur r√©solution slug ${ref}:`, error);
      return null;
    }
  }

  /**
   * V√©rifie qu'une ressource existe et appartient √† l'utilisateur
   */
  public static async validateResource(
    id: string,
    type: ResourceType,
    userId: string,
    context: { operation: string; component: string }
  ): Promise<{ success: true; data: unknown } | { success: false; error: string; status: number }> {
    
    try {
      // ‚úÖ 1. Nettoyer l'ID (remplacer les tirets longs par des tirets courts)
      const cleanId = id.replace(/‚Äë/g, '-'); // Remplace les em-dash (‚Äë) par des hyphens (-)
      
      const tableName = this.getTableName(type);
      const { data, error } = await supabase
        .from(tableName)
        .select('id, user_id')
        .eq('id', cleanId)
        .single();

      if (error || !data) {
        logApi.error(`‚ùå Ressource non trouv√©e: ${id}`, context);
        return {
          success: false,
          error: `${type === 'note' ? 'Note' : type === 'folder' ? 'Dossier' : 'Classeur'} non trouv√©`,
          status: 404
        };
      }

      if (data.user_id !== userId) {
        logApi.error(`‚ùå Acc√®s refus√©: ${id}`, context);
        return {
          success: false,
          error: 'Acc√®s refus√©',
          status: 403
        };
      }

      logApi.info(`‚úÖ Ressource valid√©e: ${id}`, context);
      return { success: true, data };

    } catch (error) {
      logApi.error(`‚ùå Erreur validation: ${error}`, context);
      return {
        success: false,
        error: 'Erreur lors de la validation',
        status: 500
      };
    }
  }

  private static isUUID(str: string): boolean {
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    return uuidRegex.test(str);
  }

  private static getTableName(type: ResourceType): string {
    switch (type) {
      case 'note': return 'articles';
      case 'folder': return 'folders';
      case 'classeur': return 'classeurs';
    }
  }
} 