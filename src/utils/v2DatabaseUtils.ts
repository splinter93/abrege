import { createClient } from '@supabase/supabase-js';
import { logApi as originalLogApi } from './logger';
import { V2ResourceResolver } from './v2ResourceResolver';
import { SlugGenerator } from './slugGenerator';
import { SlugAndUrlService } from '@/services/slugAndUrlService';
import { sanitizeMarkdownContent } from './markdownSanitizer.server';

// Wrapper pour logApi pour accepter les param√®tres ApiContext
const logApi = {
  info: (message: string, context?: ApiContext) => {
    originalLogApi.info(message);
  },
  error: (message: string, context?: ApiContext) => {
    originalLogApi.error(message);
  }
};

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
// IMPORTANT: L'API V2 est utilis√©e par l'Agent c√¥t√© serveur sans JWT utilisateur.
// Pour √©viter les erreurs RLS tout en garantissant la s√©curit√©, on utilise la cl√© Service Role
// et on applique syst√©matiquement des filtres user_id dans toutes les requ√™tes.
// Ne JAMAIS exposer cette cl√© c√¥t√© client.
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Types pour les donn√©es
export interface ApiContext {
  operation: string;
  component: string;
  userId?: string;
  timestamp?: number;
  [key: string]: unknown;
}

export interface CreateNoteData {
  source_title: string;
  notebook_id?: string; // ‚úÖ Optionnel pour supporter 'notebook'
  notebook?: string; // ‚úÖ Support pour Groq
  markdown_content?: string;
  header_image?: string;
  folder_id?: string | null;
  description?: string;
}

export interface UpdateNoteData {
  source_title?: string;
  markdown_content?: string;
  html_content?: string;
  header_image?: string | null;
  header_image_offset?: number;
  header_image_blur?: number;
  header_image_overlay?: number;
  header_title_in_image?: boolean;
  wide_mode?: boolean;
  a4_mode?: boolean;
  slash_lang?: 'fr' | 'en';
  font_family?: string;
  folder_id?: string | null;
  description?: string;
}

export interface CreateFolderData {
  name: string;
  classeur_id: string;
  parent_id?: string | null;
}

export interface UpdateFolderData {
  name?: string;
  parent_id?: string | null;
}

export interface CreateClasseurData {
  name: string;
  description?: string;
  icon?: string;
  emoji?: string; // Ajouter le support pour emoji
}

export interface UpdateClasseurData {
  name?: string;
  description?: string;
  icon?: string; // Ajouter le support pour emoji
  emoji?: string; // Ajouter le support pour emoji
  position?: number;
}

/**
 * Utilitaires de base de donn√©es pour l'API V2
 * Acc√®s direct et propre sans d√©pendance √† optimizedApi
 */
export class V2DatabaseUtils {
  
  /**
   * Cr√©er une note
   */
  static async createNote(data: CreateNoteData, userId: string, context: ApiContext) {
          logApi.info('üöÄ Cr√©ation note directe DB', context);
    
    try {
      // R√©soudre le notebook_id (peut √™tre un UUID ou un slug)
      let classeurId = data.notebook_id || data.notebook; // ‚úÖ Support pour 'notebook' (Groq)
      
      // ‚úÖ V√©rification que classeurId existe
      if (!classeurId) {
        throw new Error('notebook_id ou notebook manquant');
      }
      
      // Si ce n'est pas un UUID, essayer de le r√©soudre comme un slug
      if (!classeurId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
        const { data: classeur, error: resolveError } = await supabase
          .from('classeurs')
          .select('id')
          .eq('slug', classeurId)
          .eq('user_id', userId)
          .single();
        
        if (resolveError || !classeur) {
          throw new Error(`Classeur non trouv√©: ${classeurId}`);
        }
        
        classeurId = classeur.id;
      }

      // G√©n√©rer un slug unique avec le client authentifi√©
      const slug = await SlugGenerator.generateSlug(data.source_title, 'note', userId, undefined, supabase);
      
      // üõ°Ô∏è Sanitizer le markdown pour emp√™cher les injections HTML
      const safeMarkdown = sanitizeMarkdownContent(data.markdown_content || '');
      
      // Cr√©er la note
      const { data: note, error: createError } = await supabase
        .from('articles')
        .insert({
          source_title: data.source_title,
          markdown_content: safeMarkdown,
          html_content: safeMarkdown, // Pour l'instant, on met le m√™me contenu
          header_image: data.header_image,
          folder_id: data.folder_id,
          classeur_id: classeurId, // üîß CORRECTION TEMPORAIRE: Utiliser uniquement classeur_id
          user_id: userId,
          slug,
          description: data.description
        })
        .select()
        .single();

      if (createError) {
        throw new Error(`Erreur cr√©ation note: ${createError.message}`);
      }

      logApi.info(`‚úÖ Note cr√©√©e avec succ√®s`, context);
      return { success: true, data: note };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur cr√©ation note: ${error}`, context);
      throw error;
    }
  }

  /**
   * Mettre √† jour une note
   */
  static async updateNote(ref: string, data: UpdateNoteData, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Mise √† jour note ${ref}`, context);
    
    try {
      // R√©soudre la r√©f√©rence (UUID ou slug)
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;

      // Charger l'√©tat courant pour comparaison de titre
      const { data: current, error: currErr } = await supabase
        .from('articles')
        .select('id, source_title, slug, public_url')
        .eq('id', noteId)
        .eq('user_id', userId)
        .single();
      if (currErr) {
        throw new Error(`Erreur lecture note: ${currErr.message}`);
      }

      // Pr√©parer les donn√©es de mise √† jour
      const updateData: Record<string, unknown> = {};
      
      // üîß CORRECTION : Charger d'abord l'√©tat complet de la note pour pr√©server les valeurs existantes
      const { data: currentNote, error: currentError } = await supabase
        .from('articles')
        .select('wide_mode, a4_mode, slash_lang, font_family, folder_id, description, source_title')
        .eq('id', noteId)
        .eq('user_id', userId)
        .single();
      
      if (currentError) {
        throw new Error(`Erreur lecture note courante: ${currentError.message}`);
      }
      
      // üîß CORRECTION : Pr√©server les valeurs existantes par d√©faut
      updateData.wide_mode = currentNote.wide_mode;
      updateData.a4_mode = currentNote.a4_mode;
      updateData.slash_lang = currentNote.slash_lang;
      updateData.font_family = currentNote.font_family;
      updateData.folder_id = currentNote.folder_id;
      updateData.description = currentNote.description;
      
      if (data.source_title !== undefined) {
        const normalizedTitle = String(data.source_title).trim();
        updateData.source_title = normalizedTitle;
        
        // Mettre √† jour le slug seulement si le titre a r√©ellement chang√© (comme l'API V1)
        if (normalizedTitle && currentNote && normalizedTitle !== currentNote.source_title) {
          try {
            const { slug: newSlug, publicUrl } = await SlugAndUrlService.updateNoteSlugAndUrl(
              noteId,
              normalizedTitle,
              userId,
              supabase,
              currentNote // Passer les donn√©es actuelles pour √©viter une requ√™te suppl√©mentaire
            );
            updateData.slug = newSlug;
            updateData.public_url = publicUrl;
            
            if (process.env.NODE_ENV === 'development') {
              console.log(`[V2DatabaseUtils] Mise √† jour slug via SlugAndUrlService: "${currentNote?.source_title || 'N/A'}" ‚Üí "${normalizedTitle}" ‚Üí "${newSlug}"`);
            }
          } catch (error) {
            logApi.error(`‚ùå Erreur mise √† jour slug/URL pour la note ${noteId}: ${error}`);
            // Continuer sans mettre √† jour le slug en cas d'erreur
          }
        }
      }
      // üõ°Ô∏è S√âCURIT√â : Sanitizer automatiquement le markdown pour emp√™cher les injections HTML
      if (data.markdown_content !== undefined) {
        updateData.markdown_content = sanitizeMarkdownContent(data.markdown_content);
      }
      if (data.html_content !== undefined) updateData.html_content = data.html_content;
      if (data.header_image !== undefined) updateData.header_image = data.header_image;
      if (data.header_image_offset !== undefined) {
        const roundedOffset = Math.round(data.header_image_offset * 10) / 10;
        updateData.header_image_offset = roundedOffset;
        if (process.env.NODE_ENV === 'development') {
          console.log('[V2DatabaseUtils] Mise √† jour header_image_offset:', roundedOffset);
        }
      }
      if (data.header_image_blur !== undefined) updateData.header_image_blur = data.header_image_blur;
      if (data.header_image_overlay !== undefined) updateData.header_image_overlay = data.header_image_overlay;
      if (data.header_title_in_image !== undefined) updateData.header_title_in_image = data.header_title_in_image;
      
      // üîß CORRECTION : Mettre √† jour seulement si explicitement fourni
      if (data.wide_mode !== undefined) updateData.wide_mode = data.wide_mode;
      if (data.a4_mode !== undefined) updateData.a4_mode = data.a4_mode;
      if (data.slash_lang !== undefined) updateData.slash_lang = data.slash_lang;
      if (data.font_family !== undefined) updateData.font_family = data.font_family;
      if (data.folder_id !== undefined) updateData.folder_id = data.folder_id;
      if (data.description !== undefined) updateData.description = data.description;
      
      updateData.updated_at = new Date().toISOString();

      // Mettre √† jour la note
      const { data: note, error: updateError } = await supabase
        .from('articles')
        .update(updateData)
        .eq('id', noteId)
        .eq('user_id', userId)
        .select()
        .single();

      if (updateError) {
        throw new Error(`Erreur mise √† jour note: ${updateError.message}`);
      }

      logApi.info('‚úÖ Note mise √† jour avec succ√®s', context);
      return { success: true, data: note };
      
    } catch (error) {
      logApi.error(`‚ùå Erreur mise √† jour note: ${error}`, context);
      throw error;
    }
  }

  /**
   * Supprimer une note
   */
  static async deleteNote(ref: string, userId: string, context: ApiContext) {
    console.log('üöÄ [V2DatabaseUtils] D√©but suppression note:', { ref, userId, context });
    logApi.info(`üöÄ Suppression note ${ref}`, context);
    
    try {
      console.log('üîç [V2DatabaseUtils] R√©solution r√©f√©rence via V2ResourceResolver...');
      
      // R√©soudre la r√©f√©rence (UUID ou slug)
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      console.log('üîç [V2DatabaseUtils] R√©sultat r√©solution:', {
        success: resolveResult.success,
        id: resolveResult.success ? resolveResult.id : 'N/A',
        error: !resolveResult.success ? resolveResult.error : 'N/A',
        status: !resolveResult.success ? resolveResult.status : 'N/A'
      });
      
      if (!resolveResult.success) {
        const errorMsg = `‚ùå √âchec r√©solution r√©f√©rence: ${resolveResult.error}`;
        console.error(errorMsg, { resolveResult, ref, userId, context });
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;
      console.log('‚úÖ [V2DatabaseUtils] R√©f√©rence r√©solue:', { ref, noteId });

      console.log('üóëÔ∏è [V2DatabaseUtils] Suppression note de la base...');
      
      // Supprimer la note
      const { error: deleteError } = await supabase
        .from('articles')
        .delete()
        .eq('id', noteId)
        .eq('user_id', userId);

      if (deleteError) {
        const errorMsg = `‚ùå Erreur suppression note: ${deleteError.message}`;
        console.error(errorMsg, { deleteError, noteId, userId, context });
        throw new Error(errorMsg);
      }

      console.log('‚úÖ [V2DatabaseUtils] Note supprim√©e avec succ√®s de la base');
      logApi.info('‚úÖ Note supprim√©e avec succ√®s', context);
      return { success: true };
      
    } catch (error) {
      const errorMsg = `‚ùå Erreur suppression note: ${error}`;
      console.error(errorMsg, { error, ref, userId, context });
      logApi.error(errorMsg, context);
      throw error;
    }
  }

  /**
   * R√©cup√©rer le contenu d'une note
   */
  static async getNoteContent(ref: string, userId: string, context: ApiContext) {
    logApi.info('üöÄ R√©cup√©ration contenu note directe DB', context);
    
    try {
      // R√©soudre la r√©f√©rence (peut √™tre un UUID ou un slug)
      let noteId = ref;
      
      // Si ce n'est pas un UUID, essayer de le r√©soudre comme un slug
      if (!noteId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
        const { data: note, error: resolveError } = await supabase
          .from('articles')
          .select('id')
          .eq('slug', noteId)
          .eq('user_id', userId)
          .single();
        
        if (resolveError || !note) {
          throw new Error(`Note non trouv√©e: ${noteId}`);
        }
        
        noteId = note.id;
      }

      // R√©cup√©rer le contenu de la note
      const { data: note, error: fetchError } = await supabase
        .from('articles')
        .select('id, source_title, markdown_content, html_content, created_at, updated_at')
        .eq('id', noteId)
        .eq('user_id', userId)
        .single();

      if (fetchError || !note) {
        throw new Error(`Note non trouv√©e: ${noteId}`);
      }

      logApi.info(`‚úÖ Contenu r√©cup√©r√© avec succ√®s`, context);
      return { success: true, data: note };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur r√©cup√©ration contenu: ${error}`, context);
      throw error;
    }
  }

  /**
   * Ajouter du contenu √† une note
   */
  static async addContentToNote(ref: string, content: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Ajout contenu note directe DB`, context);
    
    try {
      // R√©soudre la r√©f√©rence (peut √™tre un UUID ou un slug)
      let noteId = ref;
      
      // Si ce n'est pas un UUID, essayer de le r√©soudre comme un slug
      if (!noteId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
        const { data: note, error: resolveError } = await supabase
          .from('articles')
          .select('id')
          .eq('slug', noteId)
          .eq('user_id', userId)
          .single();
        
        if (resolveError || !note) {
          throw new Error(`Note non trouv√©e: ${noteId}`);
        }
        
        noteId = note.id;
      }

      // R√©cup√©rer la note actuelle
      const { data: currentNote, error: fetchError } = await supabase
        .from('articles')
        .select('markdown_content')
        .eq('id', noteId)
        .eq('user_id', userId)
        .single();

      if (fetchError || !currentNote) {
        throw new Error(`Note non trouv√©e: ${noteId}`);
      }

      // Ajouter le nouveau contenu
      const updatedContent = currentNote.markdown_content + '\n\n' + content;

      // Mettre √† jour la note
      const { data: updatedNote, error: updateError } = await supabase
        .from('articles')
        .update({
          markdown_content: updatedContent,
          html_content: updatedContent // Pour l'instant, on met le m√™me contenu
        })
        .eq('id', noteId)
        .eq('user_id', userId)
        .select()
        .single();

      if (updateError) {
        throw new Error(`Erreur mise √† jour note: ${updateError.message}`);
      }

      logApi.info(`‚úÖ Contenu ajout√© avec succ√®s`, context);
      return { success: true, data: updatedNote };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur ajout contenu: ${error}`, context);
      throw error;
    }
  }

  /**
   * D√©placer une note
   */
  static async moveNote(ref: string, targetFolderId: string | null, userId: string, context: ApiContext, targetClasseurId?: string) {
    logApi.info(`üöÄ D√©placement note ${ref} vers folder ${targetFolderId}, targetClasseurId: ${targetClasseurId}`, context);
    
    try {
      // R√©soudre la r√©f√©rence de la note
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;

      // V√©rifier que le dossier de destination existe et appartient √† l'utilisateur
      if (targetFolderId) {
        const { data: folder, error: folderError } = await supabase
          .from('folders')
          .select('id')
          .eq('id', targetFolderId)
          .eq('user_id', userId)
          .single();

        if (folderError || !folder) {
          throw new Error(`Dossier de destination non trouv√©: ${targetFolderId}`);
        }
      }

      // D√©placer la note
      const updateData: Record<string, unknown> = { 
        folder_id: targetFolderId,
        updated_at: new Date().toISOString()
      };
      
      // Si cross-classeur, mettre √† jour aussi le classeur_id
      if (targetClasseurId) {
        updateData.classeur_id = targetClasseurId;
        logApi.info(`üîÑ Mise √† jour classeur_id vers ${targetClasseurId}`, context);
      }
      
      const { data: note, error: moveError } = await supabase
        .from('articles')
        .update(updateData)
        .eq('id', noteId)
        .eq('user_id', userId)
        .select()
        .single();

      if (moveError) {
        throw new Error(`Erreur d√©placement note: ${moveError.message}`);
      }

      logApi.info(`‚úÖ Note d√©plac√©e avec succ√®s`, context);
      return { success: true, data: note };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur d√©placement note: ${error}`, context);
      throw error;
    }
  }

  /**
   * Cr√©er un dossier
   */
  static async createFolder(data: CreateFolderData, userId: string, context: ApiContext, supabaseClient?: any) {
    logApi.info(`üöÄ Cr√©ation dossier optimis√©e`, context);
    
    try {
      // üîß CORRECTION: Utiliser le client authentifi√© si fourni
      const client = supabaseClient || supabase;
      
      // ‚ö° OPTIMISATION: R√©solution conditionnelle du classeur_id
      let classeurId = data.classeur_id;
      
      // Si ce n'est pas un UUID, c'est un slug (venant des LLM) ‚Üí r√©soudre
      if (!classeurId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
        const { data: classeur, error: resolveError } = await client
          .from('classeurs')
          .select('id')
          .eq('slug', classeurId)
          .eq('user_id', userId)
          .single();
        
        if (resolveError || !classeur) {
          throw new Error(`Classeur non trouv√©: ${classeurId}`);
        }
        
        classeurId = classeur.id;
      }
      
      // ‚ö° OPTIMISATION: Slug simple bas√© sur le nom + timestamp (pas de v√©rification DB)
      const timestamp = Date.now().toString(36);
      const slug = `${data.name.toLowerCase().replace(/[^a-z0-9]/g, '-')}-${timestamp}`;
      
      // ‚ö° OPTIMISATION: Cr√©ation directe (on fait confiance aux contraintes DB)
      const { data: folder, error: createError } = await client
        .from('folders')
        .insert({
          name: data.name,
          classeur_id: classeurId, // UUID r√©solu
          parent_id: data.parent_id,
          user_id: userId,
          slug
        })
        .select()
        .single();

      if (createError) {
        // Si erreur de contrainte, message clair
        if (createError.code === '23503') { // Foreign key violation
          throw new Error(`Classeur ou dossier parent non trouv√©`);
        }
        throw new Error(`Erreur cr√©ation dossier: ${createError.message}`);
      }

      logApi.info(`‚úÖ Dossier cr√©√© optimis√©`, context);
      return { success: true, data: folder };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur cr√©ation dossier: ${error}`, context);
      throw error;
    }
  }

  /**
   * Mettre √† jour un dossier
   */
  static async updateFolder(ref: string, data: UpdateFolderData, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Mise √† jour dossier ${ref}`, context);
    
    try {
      // R√©soudre la r√©f√©rence (UUID ou slug)
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'folder', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const folderId = resolveResult.id;

      // Charger l'√©tat courant pour comparaison de nom
      const { data: currentFolder, error: currentError } = await supabase
        .from('folders')
        .select('id, name, slug')
        .eq('id', folderId)
        .eq('user_id', userId)
        .single();

      if (currentError) {
        throw new Error(`Erreur lecture dossier: ${currentError.message}`);
      }

      // Pr√©parer les donn√©es de mise √† jour
      const updateData: Record<string, unknown> = {};
      if (data.name) updateData.name = data.name;
      if (data.parent_id !== undefined) updateData.parent_id = data.parent_id;

      // üîß NOUVEAU : Mise √† jour automatique du slug si le nom change
      if (data.name && data.name !== currentFolder.name) {
        try {
          // Importer SlugGenerator dynamiquement pour √©viter les d√©pendances circulaires
          const { SlugGenerator } = await import('@/utils/slugGenerator');
          const newSlug = await SlugGenerator.generateSlug(
            data.name,
            'folder',
            userId,
            folderId,
            supabase
          );
          updateData.slug = newSlug;
          
          if (process.env.NODE_ENV === 'development') {
            console.log(`[V2DatabaseUtils] Mise √† jour slug dossier: "${currentFolder.name}" ‚Üí "${data.name}" ‚Üí "${newSlug}"`);
          }
        } catch (error) {
          logApi.error(`‚ùå Erreur mise √† jour slug pour le dossier ${folderId}: ${error}`);
          // Continuer sans mettre √† jour le slug en cas d'erreur
        }
      }

      // V√©rifier que le nouveau parent existe et appartient √† l'utilisateur
      if (data.parent_id) {
        const { data: parentFolder, error: parentError } = await supabase
          .from('folders')
          .select('id')
          .eq('id', data.parent_id)
          .eq('user_id', userId)
          .single();

        if (parentError || !parentFolder) {
          throw new Error(`Dossier parent non trouv√©: ${data.parent_id}`);
        }
      }

      // Mettre √† jour le dossier
      const { data: folder, error: updateError } = await supabase
        .from('folders')
        .update(updateData)
        .eq('id', folderId)
        .eq('user_id', userId)
        .select()
        .single();

      if (updateError) {
        throw new Error(`Erreur mise √† jour dossier: ${updateError.message}`);
      }

      logApi.info(`‚úÖ Dossier mis √† jour avec succ√®s`, context);
      return { success: true, data: folder };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur mise √† jour dossier: ${error}`, context);
      throw error;
    }
  }

  /**
   * D√©placer un dossier
   */
  static async moveFolder(ref: string, targetParentId: string | null, userId: string, context: ApiContext, targetClasseurId?: string) {
    logApi.info(`üöÄ D√©placement dossier ${ref}`, context);
    
    try {
      // R√©soudre la r√©f√©rence (UUID ou slug)
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'folder', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const folderId = resolveResult.id;

      // V√©rifier que le dossier appartient √† l'utilisateur
      const { data: folder, error: fetchError } = await supabase
        .from('folders')
        .select('id, name, user_id, parent_id')
        .eq('id', folderId)
        .single();

      if (fetchError || !folder) {
        throw new Error('Dossier non trouv√©');
      }

      if (folder.user_id !== userId) {
        throw new Error('Permissions insuffisantes');
      }

      // Si un nouveau parent est sp√©cifi√©, v√©rifier qu'il existe et appartient √† l'utilisateur
      if (targetParentId) {
        const { data: parentFolder, error: parentError } = await supabase
          .from('folders')
          .select('id, user_id')
          .eq('id', targetParentId)
          .single();

        if (parentError || !parentFolder) {
          throw new Error('Dossier parent non trouv√©');
        }

        if (parentFolder.user_id !== userId) {
          throw new Error('Permissions insuffisantes pour le dossier parent');
        }

        // √âviter les boucles (un dossier ne peut pas √™tre son propre parent)
        if (targetParentId === folderId) {
          throw new Error('Un dossier ne peut pas √™tre son propre parent');
        }
      }

      // Mettre √† jour le parent du dossier
      const updateData: any = {
        parent_id: targetParentId
      };
      
      // Si cross-classeur, mettre √† jour aussi le classeur_id
      if (targetClasseurId) {
        updateData.classeur_id = targetClasseurId;
      }
      
      const { data: updatedFolder, error: updateError } = await supabase
        .from('folders')
        .update(updateData)
        .eq('id', folderId)
        .select()
        .single();

      if (updateError) {
        throw new Error(`Erreur mise √† jour dossier: ${updateError.message}`);
      }

      // üîÑ D√âPLACER AUSSI TOUTES LES NOTES ET DOSSIERS ENFANTS DU DOSSIER
      if (targetClasseurId) {
        logApi.info(`üîÑ D√©placement des notes et dossiers enfants du dossier vers le nouveau classeur`, context);
        
        // Fonction r√©cursive pour d√©placer tous les dossiers enfants
        const moveChildFolders = async (parentFolderId: string) => {
          // R√©cup√©rer tous les dossiers enfants
          const { data: childFolders, error: childFoldersError } = await supabase
            .from('folders')
            .select('id')
            .eq('parent_id', parentFolderId)
            .eq('user_id', userId);

          if (childFoldersError) {
            logApi.info(`‚ö†Ô∏è Erreur r√©cup√©ration dossiers enfants: ${childFoldersError.message}`, context);
            return;
          }

          // D√©placer chaque dossier enfant
          for (const childFolder of childFolders || []) {
            const { error: moveChildError } = await supabase
              .from('folders')
              .update({ 
                classeur_id: targetClasseurId,
                updated_at: new Date().toISOString()
              })
              .eq('id', childFolder.id)
              .eq('user_id', userId);

            if (moveChildError) {
              logApi.info(`‚ö†Ô∏è Erreur d√©placement dossier enfant ${childFolder.id}: ${moveChildError.message}`, context);
            } else {
              // R√©cursivement d√©placer les dossiers enfants de ce dossier
              await moveChildFolders(childFolder.id);
            }
          }
        };

        // D√©placer tous les dossiers enfants r√©cursivement
        await moveChildFolders(folderId);
        
        // Mettre √† jour le classeur_id de toutes les notes dans ce dossier et ses enfants
        const { error: notesUpdateError } = await supabase
          .from('articles')
          .update({ 
            classeur_id: targetClasseurId,
            updated_at: new Date().toISOString()
          })
          .eq('folder_id', folderId)
          .eq('user_id', userId);

        if (notesUpdateError) {
          logApi.info(`‚ö†Ô∏è Erreur mise √† jour notes du dossier: ${notesUpdateError.message}`, context);
          // Ne pas faire √©chouer l'op√©ration pour une erreur de notes
        } else {
          logApi.info(`‚úÖ Notes du dossier d√©plac√©es vers le nouveau classeur`, context);
        }
      }

      logApi.info(`‚úÖ Dossier d√©plac√© avec succ√®s`, context);
      return { success: true, data: updatedFolder };

    } catch (error) {
      logApi.info(`‚ùå Erreur d√©placement dossier: ${error}`, context);
      throw error;
    }
  }

  /**
   * Supprimer un dossier
   */
  static async deleteFolder(ref: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Suppression dossier ${ref}`, context);
    
    try {
      // R√©soudre la r√©f√©rence (UUID ou slug)
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'folder', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const folderId = resolveResult.id;

      // Suppression en cascade : supprimer tous les sous-dossiers
      const { error: deleteSubFoldersError } = await supabase
        .from('folders')
        .delete()
        .eq('parent_id', folderId)
        .eq('user_id', userId);

      if (deleteSubFoldersError) {
        throw new Error(`Erreur suppression sous-dossiers: ${deleteSubFoldersError.message}`);
      }

      // Suppression en cascade : supprimer toutes les notes du dossier
      const { error: deleteNotesError } = await supabase
        .from('articles')
        .delete()
        .eq('folder_id', folderId)
        .eq('user_id', userId);

      if (deleteNotesError) {
        throw new Error(`Erreur suppression notes: ${deleteNotesError.message}`);
      }

      // Supprimer le dossier
      const { error: deleteError } = await supabase
        .from('folders')
        .delete()
        .eq('id', folderId)
        .eq('user_id', userId);

      if (deleteError) {
        throw new Error(`Erreur suppression dossier: ${deleteError.message}`);
      }

      logApi.info(`‚úÖ Dossier supprim√© avec succ√®s`, context);
      return { success: true };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur suppression dossier: ${error}`, context);
      throw error;
    }
  }

  /**
   * Cr√©er un classeur
   */
  static async createClasseur(data: CreateClasseurData, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Cr√©ation classeur directe DB`, context);
    
    try {
      // G√©n√©rer un slug unique avec le client authentifi√©
      const slug = await SlugGenerator.generateSlug(data.name, 'classeur', userId, undefined, supabase);
      
      // Cr√©er le classeur
      const { data: classeur, error: createError } = await supabase
        .from('classeurs')
        .insert({
          name: data.name,
          description: data.description,
          emoji: data.icon || data.emoji || 'üìÅ', // üîß CORRECTION: G√©rer icon et emoji
          position: 0,
          user_id: userId,
          slug
        })
        .select()
        .single();

      if (createError) {
        throw new Error(`Erreur cr√©ation classeur: ${createError.message}`);
      }

      logApi.info(`‚úÖ Classeur cr√©√© avec succ√®s`, context);
      return { success: true, data: classeur };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur cr√©ation classeur: ${error}`, context);
      throw error;
    }
  }

  /**
   * Mettre √† jour un classeur
   */
  static async updateClasseur(ref: string, data: UpdateClasseurData, userId: string, context: ApiContext, userToken?: string) {
    logApi.info(`üöÄ Mise √† jour classeur ${ref}`, context);
    
    try {
      // Cr√©er un client Supabase authentifi√© si un token est fourni (RLS)
      const client = userToken
        ? createClient(supabaseUrl, supabaseServiceKey, {
            global: { headers: { Authorization: `Bearer ${userToken}` } }
          })
        : supabase;

      // R√©soudre la r√©f√©rence (UUID ou slug)
      let classeurId = ref;
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
      if (!uuidRegex.test(ref)) {
        const { data: found, error: resolveError } = await client
          .from('classeurs')
          .select('id')
          .eq('slug', ref)
          .eq('user_id', userId)
          .single();
        if (resolveError || !found?.id) {
          throw new Error('Classeur non trouv√©');
        }
        classeurId = found.id;
      }

      // Charger l'√©tat courant pour comparaison de nom
      const { data: currentClasseur, error: currentError } = await client
        .from('classeurs')
        .select('id, name, slug')
        .eq('id', classeurId)
        .eq('user_id', userId)
        .single();

      if (currentError) {
        throw new Error(`Erreur lecture classeur: ${currentError.message}`);
      }

      // Pr√©parer les donn√©es de mise √† jour
      const updateData: Record<string, unknown> = {};
      if (data.name) updateData.name = data.name;
      if (data.description !== undefined) updateData.description = data.description;
      if (data.icon !== undefined) updateData.emoji = data.icon;
      if (data.emoji !== undefined) updateData.emoji = data.emoji; // üîß CORRECTION: G√©rer emoji aussi
      if (data.position !== undefined) updateData.position = data.position;
      updateData.updated_at = new Date().toISOString();

      // üîß NOUVEAU : Mise √† jour automatique du slug si le nom change
      if (data.name && data.name !== currentClasseur.name) {
        try {
          // Importer SlugGenerator dynamiquement pour √©viter les d√©pendances circulaires
          const { SlugGenerator } = await import('@/utils/slugGenerator');
          const newSlug = await SlugGenerator.generateSlug(
            data.name,
            'classeur',
            userId,
            classeurId,
            client
          );
          updateData.slug = newSlug;
          
          if (process.env.NODE_ENV === 'development') {
            console.log(`[V2DatabaseUtils] Mise √† jour slug classeur: "${currentClasseur.name}" ‚Üí "${data.name}" ‚Üí "${newSlug}"`);
          }
        } catch (error) {
          logApi.error(`‚ùå Erreur mise √† jour slug pour le classeur ${classeurId}: ${error}`);
          // Continuer sans mettre √† jour le slug en cas d'erreur
        }
      }

      // Mettre √† jour le classeur
      const { data: classeur, error: updateError } = await client
        .from('classeurs')
        .update(updateData)
        .eq('id', classeurId)
        .eq('user_id', userId)
        .select()
        .single();

      if (updateError) {
        throw new Error(`Erreur mise √† jour classeur: ${updateError.message}`);
      }

      logApi.info(`‚úÖ Classeur mis √† jour avec succ√®s`, context);
      return { success: true, data: classeur };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur mise √† jour classeur: ${error}`, context);
      throw error;
    }
  }

  /**
   * Supprimer un classeur
   */
  static async deleteClasseur(ref: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Suppression classeur ${ref}`, context);
    
    try {
      // R√©soudre la r√©f√©rence (UUID ou slug)
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'classeur', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const classeurId = resolveResult.id;

      // Suppression en cascade : d'abord les notes, puis les dossiers, puis le classeur
      // Supprimer toutes les notes du classeur
      const { error: deleteNotesError } = await supabase
        .from('articles')
        .delete()
        .eq('classeur_id', classeurId)
        .eq('user_id', userId);

      if (deleteNotesError) {
        throw new Error(`Erreur suppression notes: ${deleteNotesError.message}`);
      }

      // Supprimer tous les dossiers du classeur
      const { error: deleteFoldersError } = await supabase
        .from('folders')
        .delete()
        .eq('classeur_id', classeurId)
        .eq('user_id', userId);

      if (deleteFoldersError) {
        throw new Error(`Erreur suppression dossiers: ${deleteFoldersError.message}`);
      }

      // Supprimer le classeur
      const { error: deleteError } = await supabase
        .from('classeurs')
        .delete()
        .eq('id', classeurId)
        .eq('user_id', userId);

      if (deleteError) {
        throw new Error(`Erreur suppression classeur: ${deleteError.message}`);
      }

      logApi.info(`‚úÖ Classeur supprim√© avec succ√®s`, context);
      return { success: true };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur suppression classeur: ${error}`, context);
      throw error;
    }
  }

  /**
   * R√©cup√©rer l'arbre d'un classeur
   */
  static async getClasseurTree(notebookId: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration arbre classeur directe DB`, context);
    
    try {
      // ‚úÖ CORRECTION: V√©rifier que notebookId n'est pas undefined
      if (!notebookId) {
        throw new Error('notebook_id est requis');
      }
      
      // üîß NOUVEAU: Validation et correction de l'UUID
      let classeurId = notebookId;
      
      // V√©rifier si c'est un UUID valide
      const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
      const isValidUuid = uuidPattern.test(classeurId);
      
      if (!isValidUuid) {
        logApi.info(`‚ö†Ô∏è UUID mal format√©: ${classeurId}`, context);
        
        // Essayer de corriger l'UUID si possible
        if (classeurId.length === 35) {
          // UUID avec un caract√®re manquant dans la 3√®me section
          const sections = classeurId.split('-');
          if (sections.length === 5 && sections[2].length === 3) {
            // Ajouter un 0 √† la 3√®me section
            sections[2] = sections[2] + '0';
            const correctedUuid = sections.join('-');
            if (uuidPattern.test(correctedUuid)) {
              logApi.info(`üîß UUID corrig√©: ${correctedUuid}`, context);
              classeurId = correctedUuid;
            } else {
              throw new Error(`UUID mal format√©: ${notebookId}. Format attendu: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`);
            }
          } else {
            throw new Error(`UUID mal format√©: ${notebookId}. Format attendu: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`);
          }
        } else {
          throw new Error(`UUID mal format√©: ${notebookId}. Format attendu: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`);
        }
      }
      
      // Si ce n'est pas un UUID valide, essayer de le r√©soudre comme un slug
      if (!uuidPattern.test(classeurId)) {
        const { data: classeur, error: resolveError } = await supabase
          .from('classeurs')
          .select('id')
          .eq('slug', classeurId)
          .eq('user_id', userId)
          .single();
        
        if (resolveError || !classeur) {
          throw new Error(`Classeur non trouv√©: ${classeurId}`);
        }
        
        classeurId = classeur.id;
      }

      // R√©cup√©rer le classeur
      const { data: classeur, error: fetchError } = await supabase
        .from('classeurs')
        .select('id, name, description, emoji, position, slug, created_at, updated_at')
        .eq('id', classeurId)
        .eq('user_id', userId)
        .single();

      if (fetchError || !classeur) {
        throw new Error(`Classeur non trouv√©: ${classeurId}`);
      }

      // R√©cup√©rer les dossiers du classeur
      const { data: dossiers, error: dossiersError } = await supabase
        .from('folders')
        .select('id, name, parent_id, position, created_at, slug')
        .eq('classeur_id', classeurId)
        .eq('user_id', userId)
        .is('trashed_at', null) // üîß CORRECTION: Exclure les dossiers supprim√©s
        .order('position', { ascending: true });

      if (dossiersError) {
        throw new Error(`Erreur r√©cup√©ration dossiers: ${dossiersError.message}`);
      }

      // R√©cup√©rer les notes du classeur
      const { data: notes, error: notesError } = await supabase
        .from('articles')
        .select('id, source_title, slug, folder_id, position, created_at, updated_at')
        .eq('classeur_id', classeurId)
        .eq('user_id', userId)
        .is('trashed_at', null) // üîß CORRECTION: Exclure les notes supprim√©es
        .order('position', { ascending: true });

      if (notesError) {
        throw new Error(`Erreur r√©cup√©ration notes: ${notesError.message}`);
      }

      // Construire l'objet de r√©ponse
      const classeurComplet = {
        ...classeur,
        dossiers: dossiers || [],
        notes: notes || []
      };

      logApi.info(`‚úÖ Arbre classeur r√©cup√©r√© avec succ√®s`, context);
      return { success: true, data: classeurComplet };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur r√©cup√©ration arbre: ${error}`, context);
      throw error;
    }
  }

  /**
   * R√©organiser les classeurs
   */
  static async reorderClasseurs(classeurs: Array<{ id: string; position: number }>, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©organisation classeurs directe DB`, context);
    
    try {
      // V√©rifier que tous les classeurs appartiennent √† l'utilisateur
      const classeurIds = classeurs.map(c => c.id);
      const { data: existingClasseurs, error: fetchError } = await supabase
        .from('classeurs')
        .select('id, user_id')
        .in('id', classeurIds)
        .eq('user_id', userId);

      if (fetchError) {
        throw new Error(`Erreur v√©rification classeurs: ${fetchError.message}`);
      }

      if (!existingClasseurs || existingClasseurs.length !== classeurs.length) {
        throw new Error('Certains classeurs n\'existent pas ou ne vous appartiennent pas');
      }

      // üîß CORRECTION: Mettre √† jour uniquement la position et updated_at
      // Ne pas utiliser upsert qui essaie de mettre √† jour tous les champs
      for (const classeur of classeurs) {
        const { error: updateError } = await supabase
          .from('classeurs')
          .update({
            position: classeur.position,
            updated_at: new Date().toISOString()
          })
          .eq('id', classeur.id)
          .eq('user_id', userId);

        if (updateError) {
          throw new Error(`Erreur mise √† jour position classeur ${classeur.id}: ${updateError.message}`);
        }
      }

      // R√©cup√©rer les classeurs mis √† jour
      const { data: updatedClasseurs, error: fetchUpdatedError } = await supabase
        .from('classeurs')
        .select('id, name, description, emoji, position, slug, created_at, updated_at')
        .in('id', classeurIds)
        .order('position', { ascending: true });

      if (fetchUpdatedError) {
        throw new Error(`Erreur r√©cup√©ration classeurs mis √† jour: ${fetchUpdatedError.message}`);
      }

      logApi.info(`‚úÖ Classeurs r√©organis√©s avec succ√®s`, context);
      return { success: true, data: updatedClasseurs || [] };
      
    } catch (error) {
      logApi.info(`‚ùå Erreur r√©organisation classeurs: ${error}`, context);
      throw error;
    }
  }

  /**
   * Obtenir la liste des classeurs
   */
  static async getClasseurs(userId: string, context: ApiContext) {
    console.error(`üö®üö®üö® [FORCE DEBUG] V2DatabaseUtils.getClasseurs appel√© avec userId: ${userId} üö®üö®üö®`);
    console.log(`üîç [DEBUG] getClasseurs appel√© avec userId: ${userId}`);
    logApi.info(`üöÄ R√©cup√©ration classeurs`, context);
    
    try {
      logApi.info(`üîç User ID: ${userId}`, context);
      logApi.info(`üîç User ID type: ${typeof userId}`, context);
      logApi.info(`üîç User ID length: ${userId.length}`, context);
      
      // D'abord, v√©rifier si la table existe et combien de classeurs il y a au total
      const { data: allClasseurs, error: allError } = await supabase
        .from('classeurs')
        .select('id, name, user_id')
        .limit(5);
      
      logApi.info(`üìä Tous les classeurs (premiers 5):`, context);
      logApi.info(`   - Data: ${JSON.stringify(allClasseurs)}`, context);
      logApi.info(`   - Error: ${allError ? JSON.stringify(allError) : 'null'}`, context);
      
      // Maintenant la requ√™te normale
      const { data: classeurs, error } = await supabase
        .from('classeurs')
        .select('id, name, description, emoji, position, slug, created_at, updated_at')
        .eq('user_id', userId)
        .order('position', { ascending: true })
        .order('created_at', { ascending: false });

      logApi.info(`üìä R√©sultat Supabase:`, context);
      logApi.info(`   - Data: ${JSON.stringify(classeurs)}`, context);
      logApi.info(`   - Error: ${error ? JSON.stringify(error) : 'null'}`, context);
      logApi.info(`   - Count: ${classeurs ? classeurs.length : 'undefined'}`, context);

      if (error) {
        logApi.info(`‚ùå Erreur Supabase: ${error.message}`, context);
        throw new Error(`Erreur r√©cup√©ration classeurs: ${error.message}`);
      }

      const result = {
        success: true,
        data: classeurs || [],
        debug: {
          userId: userId,
          userIdType: typeof userId,
          userIdLength: userId.length,
          allClasseursCount: allClasseurs ? allClasseurs.length : 0,
          filteredClasseursCount: classeurs ? classeurs.length : 0,
          allClasseurs: allClasseurs || []
        }
      };
      
      logApi.info(`‚úÖ Retour final: ${JSON.stringify(result)}`, context);
      return result;
      
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  /**
   * Ins√©rer du contenu √† une position sp√©cifique
   */
  static async insertContentToNote(ref: string, content: string, position: number, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Insertion contenu √† position ${position}`, context);
    
    try {
      // R√©soudre la r√©f√©rence
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;

      // R√©cup√©rer le contenu actuel
      const { data: note, error: fetchError } = await supabase
        .from('articles')
        .select('markdown_content')
        .eq('id', noteId)
        .single();

      if (fetchError || !note) {
        throw new Error('Note non trouv√©e');
      }

      // Ins√©rer le contenu √† la position sp√©cifi√©e
      const lines = note.markdown_content.split('\n');
      lines.splice(position, 0, content);
      const newContent = lines.join('\n');

      // Mettre √† jour la note
      const { error: updateError } = await supabase
        .from('articles')
        .update({ 
          markdown_content: newContent,
          updated_at: new Date().toISOString()
        })
        .eq('id', noteId);

      if (updateError) {
        throw new Error(`Erreur mise √† jour: ${updateError.message}`);
      }

      return {
        success: true,
        message: 'Contenu ins√©r√© avec succ√®s'
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  /**
   * Ajouter du contenu √† une section sp√©cifique
   */
  static async addContentToSection(ref: string, sectionId: string, content: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Ajout contenu √† section ${sectionId}`, context);
    
    try {
      // R√©soudre la r√©f√©rence
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;

      // R√©cup√©rer le contenu actuel
      const { data: note, error: fetchError } = await supabase
        .from('articles')
        .select('markdown_content')
        .eq('id', noteId)
        .single();

      if (fetchError || !note) {
        throw new Error('Note non trouv√©e');
      }

      // Ajouter le contenu √† la section
      const { appendToSection } = await import('@/utils/markdownTOC');
      const newContent = appendToSection(note.markdown_content, sectionId, content, 'end');

      // Mettre √† jour la note
      const { error: updateError } = await supabase
        .from('articles')
        .update({ 
          markdown_content: newContent,
          updated_at: new Date().toISOString()
        })
        .eq('id', noteId);

      if (updateError) {
        throw new Error(`Erreur mise √† jour: ${updateError.message}`);
      }

      return {
        success: true,
        message: 'Contenu ajout√© √† la section avec succ√®s'
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  /**
   * Vider une section
   */
  static async clearSection(ref: string, sectionId: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Vidage section ${sectionId}`, context);
    
    try {
      // R√©soudre la r√©f√©rence
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;

      // R√©cup√©rer le contenu actuel
      const { data: note, error: fetchError } = await supabase
        .from('articles')
        .select('markdown_content')
        .eq('id', noteId)
        .single();

      if (fetchError || !note) {
        throw new Error('Note non trouv√©e');
      }

      // Vider la section
      const { clearSection } = await import('@/utils/markdownTOC');
      const newContent = clearSection(note.markdown_content, sectionId);

      // Mettre √† jour la note
      const { error: updateError } = await supabase
        .from('articles')
        .update({ 
          markdown_content: newContent,
          updated_at: new Date().toISOString()
        })
        .eq('id', noteId);

      if (updateError) {
        throw new Error(`Erreur mise √† jour: ${updateError.message}`);
      }

      return {
        success: true,
        message: 'Section vid√©e avec succ√®s'
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  /**
   * Supprimer une section
   */
  static async eraseSection(ref: string, sectionId: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Suppression section ${sectionId}`, context);
    
    try {
      // R√©soudre la r√©f√©rence
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;

      // R√©cup√©rer le contenu actuel
      const { data: note, error: fetchError } = await supabase
        .from('articles')
        .select('markdown_content')
        .eq('id', noteId)
        .single();

      if (fetchError || !note) {
        throw new Error('Note non trouv√©e');
      }

      // Supprimer la section
      const { eraseSection } = await import('@/utils/markdownTOC');
      const newContent = eraseSection(note.markdown_content, sectionId);

      // Mettre √† jour la note
      const { error: updateError } = await supabase
        .from('articles')
        .update({ 
          markdown_content: newContent,
          updated_at: new Date().toISOString()
        })
        .eq('id', noteId);

      if (updateError) {
        throw new Error(`Erreur mise √† jour: ${updateError.message}`);
      }

      return {
        success: true,
        message: 'Section supprim√©e avec succ√®s'
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  /**
   * R√©cup√©rer la table des mati√®res
   */
  static async getTableOfContents(ref: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration table des mati√®res`, context);
    
    try {
      // R√©soudre la r√©f√©rence
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;

      // R√©cup√©rer le contenu
      const { data: note, error: fetchError } = await supabase
        .from('articles')
        .select('markdown_content')
        .eq('id', noteId)
        .single();

      if (fetchError || !note) {
        throw new Error('Note non trouv√©e');
      }

      // Extraire la table des mati√®res
      const { extractTOCWithSlugs } = await import('@/utils/markdownTOC');
      const toc = extractTOCWithSlugs(note.markdown_content);

      return {
        success: true,
        toc: toc
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  /**
   * R√©cup√©rer les statistiques d'une note
   */
  static async getNoteStatistics(ref: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration statistiques`, context);
    
    try {
      // R√©soudre la r√©f√©rence
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;

      // R√©cup√©rer le contenu
      const { data: note, error: fetchError } = await supabase
        .from('articles')
        .select('markdown_content, created_at, updated_at')
        .eq('id', noteId)
        .single();

      if (fetchError || !note) {
        throw new Error('Note non trouv√©e');
      }

      // Calculer les statistiques
      const content = note.markdown_content || '';
      const characters = content.length;
      const words = content.split(/\s+/).filter(word => word.length > 0).length;
      const lines = content.split('\n').length;
      const sections = content.split(/^#{1,6}\s+/m).length - 1;

      return {
        success: true,
        statistics: {
          characters,
          words,
          lines,
          sections,
          created_at: note.created_at,
          updated_at: note.updated_at
        }
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  /**
   * Publier une note
   */
  static async publishNote(ref: string, visibility: 'private' | 'public' | 'link-private' | 'link-public' | 'limited' | 'scrivia', userId: string, context: ApiContext) {
    logApi.info(`üöÄ Publication note (${visibility})`, context);
    
    try {
      // R√©soudre la r√©f√©rence
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'note', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const noteId = resolveResult.id;

      // Mettre √† jour le statut de visibilit√©
      const { error: updateError } = await supabase
        .from('articles')
        .update({ 
          visibility,
          updated_at: new Date().toISOString()
        })
        .eq('id', noteId);

      if (updateError) {
        throw new Error(`Erreur mise √† jour: ${updateError.message}`);
      }

      return {
        success: true,
        message: visibility !== 'private' ? 'Note publi√©e avec succ√®s' : 'Note rendue priv√©e avec succ√®s'
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  /**
   * R√©cup√©rer l'arborescence d'un dossier
   */
  static async getFolderTree(ref: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration arborescence dossier`, context);
    
    try {
      // R√©soudre la r√©f√©rence
      const resolveResult = await V2ResourceResolver.resolveRef(ref, 'folder', userId, context);
      if (!resolveResult.success) {
        throw new Error(resolveResult.error);
      }

      const folderId = resolveResult.id;

      // R√©cup√©rer le dossier et ses enfants
      const { data: folder, error: folderError } = await supabase
        .from('folders')
        .select('id, name, slug')
        .eq('id', folderId)
        .single();

      if (folderError || !folder) {
        throw new Error('Dossier non trouv√©');
      }

      // R√©cup√©rer les sous-dossiers
      const { data: subfolders, error: subfoldersError } = await supabase
        .from('folders')
        .select('id, name, slug')
        .eq('parent_id', folderId)
        .order('name');

      if (subfoldersError) {
        throw new Error(`Erreur r√©cup√©ration sous-dossiers: ${subfoldersError.message}`);
      }

      // R√©cup√©rer les notes du dossier
      const { data: notes, error: notesError } = await supabase
        .from('articles')
        .select('id, source_title, slug')
        .eq('folder_id', folderId)
        .order('source_title');

      if (notesError) {
        throw new Error(`Erreur r√©cup√©ration notes: ${notesError.message}`);
      }

      return {
        success: true,
        folder: {
          id: folder.id,
          name: folder.name,
          slug: folder.slug,
          children: [
            ...(subfolders || []).map(f => ({ ...f, type: 'folder' })),
            ...(notes || []).map(n => ({ ...n, type: 'note' }))
          ]
        }
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  /**
   * G√©n√©rer un slug
   */
  static async generateSlug(text: string, type: 'note' | 'classeur' | 'folder', userId: string, context: ApiContext, supabaseClient?: any) {
    logApi.info(`üöÄ G√©n√©ration slug pour ${type}`, context);
    
    try {
      // üîß CORRECTION: Passer le client Supabase authentifi√©
      if (!supabaseClient) {
        throw new Error('Client Supabase authentifi√© requis pour la g√©n√©ration de slug');
      }
      
      const slug = await SlugGenerator.generateSlug(text, type, userId, undefined, supabaseClient);
      
      return {
        success: true,
        slug,
        original: text
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      throw error;
    }
  }

  // ============================================================================
  // M√âTHODES MANQUANTES POUR L'API V2
  // ============================================================================

  /**
   * R√©cup√©rer un classeur par ID
   */
  static async getClasseur(classeurId: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration classeur ${classeurId}`, context);
    
    try {
      const { data: classeur, error } = await supabase
        .from('classeurs')
        .select('*')
        .eq('id', classeurId)
        .eq('user_id', userId)
        .single();

      if (error || !classeur) {
        throw new Error(`Classeur non trouv√©: ${classeurId}`);
      }

      return { success: true, data: classeur };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * R√©cup√©rer un dossier par ID
   */
  static async getFolder(folderId: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration dossier ${folderId}`, context);
    
    try {
      const { data: folder, error } = await supabase
        .from('folders')
        .select('*')
        .eq('id', folderId)
        .eq('user_id', userId)
        .single();

      if (error || !folder) {
        throw new Error(`Dossier non trouv√©: ${folderId}`);
      }

      return { success: true, data: folder };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * R√©cup√©rer une note par ID
   */
  static async getNote(noteId: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration note ${noteId}`, context);
    
    try {
      const { data: note, error } = await supabase
        .from('notes')
        .select('*')
        .eq('id', noteId)
        .eq('user_id', userId)
        .single();

      if (error || !note) {
        throw new Error(`Note non trouv√©e: ${noteId}`);
      }

      return { success: true, data: note };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * Rechercher dans les notes
   */
  static async searchNotes(query: string, limit: number, offset: number, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Recherche notes: "${query}"`, context);
    
    try {
      const { data: notes, error } = await supabase
        .from('articles')
        .select('*')
        .eq('user_id', userId)
        .or(`source_title.ilike.%${query}%,markdown_content.ilike.%${query}%`)
        .order('updated_at', { ascending: false })
        .range(offset, offset + limit - 1);

      if (error) {
        throw new Error(`Erreur recherche notes: ${error.message}`);
      }

      return { success: true, data: notes || [] };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * Rechercher dans les classeurs
   */
  static async searchClasseurs(query: string, limit: number, offset: number, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Recherche classeurs: "${query}"`, context);
    
    try {
      const { data: classeurs, error } = await supabase
        .from('classeurs')
        .select('*')
        .eq('user_id', userId)
        .or(`name.ilike.%${query}%,description.ilike.%${query}%`)
        .order('updated_at', { ascending: false })
        .range(offset, offset + limit - 1);

      if (error) {
        throw new Error(`Erreur recherche classeurs: ${error.message}`);
      }

      return { success: true, data: classeurs || [] };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * Rechercher dans les fichiers
   */
  static async searchFiles(query: string, limit: number, offset: number, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Recherche fichiers: "${query}"`, context);
    
    try {
      const { data: files, error } = await supabase
        .from('files')
        .select('id, filename, mime_type, size, url, slug, description, created_at, updated_at')
        .eq('user_id', userId)
        .eq('is_deleted', false)
        .or(`filename.ilike.%${query}%,description.ilike.%${query}%`)
        .order('updated_at', { ascending: false })
        .range(offset, offset + limit - 1);

      if (error) {
        throw new Error(`Erreur recherche fichiers: ${error.message}`);
      }

      return { success: true, data: files || [] };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * R√©cup√©rer les informations utilisateur
   */
  static async getUserInfo(userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration infos utilisateur ${userId}`, context);
    
    try {
      const { data: user, error } = await supabase
        .from('users')
        .select('id, email, name, avatar_url, created_at, updated_at')
        .eq('id', userId)
        .single();

      if (error || !user) {
        throw new Error(`Utilisateur non trouv√©: ${userId}`);
      }

      return { success: true, data: user };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * Ins√©rer du contenu dans une note (alias pour insertContentToNote)
   */
  static async insertNoteContent(noteId: string, params: { content: string; position: number }, userId: string, context: ApiContext) {
    return await this.insertContentToNote(noteId, params.content, params.position, userId, context);
  }

  // ============================================================================
  // M√âTHODES MANQUANTES POUR CONFORMIT√â API V2
  // ============================================================================

  /**
   * Appliquer des op√©rations de contenu √† une note
   */
  static async applyContentOperations(ref: string, operations: any[], userId: string, context: ApiContext) {
    logApi.info(`üöÄ Application op√©rations contenu ${ref}`, context);
    
    try {
      // Pour l'instant, impl√©mentation basique
      // TODO: Impl√©menter la logique compl√®te des op√©rations
      return { success: true, data: { operations_applied: operations.length } };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * R√©cup√©rer la table des mati√®res d'une note (alias pour getTableOfContents)
   */
  static async getNoteTOC(ref: string, userId: string, context: ApiContext) {
    return await this.getTableOfContents(ref, userId, context);
  }

  /**
   * R√©cup√©rer les param√®tres de partage d'une note
   */
  static async getNoteShareSettings(ref: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration param√®tres partage ${ref}`, context);
    
    try {
      const { data: note, error } = await supabase
        .from('articles')
        .select('id, visibility, allow_edit, allow_comments')
        .eq('id', ref)
        .eq('user_id', userId)
        .single();

      if (error || !note) {
        throw new Error(`Note non trouv√©e: ${ref}`);
      }

      return { 
        success: true, 
        data: {
          visibility: note.visibility || 'private',
          allow_edit: note.allow_edit || false,
          allow_comments: note.allow_comments || false
        }
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * Mettre √† jour les param√®tres de partage d'une note
   */
  static async updateNoteShareSettings(ref: string, settings: any, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Mise √† jour param√®tres partage ${ref}`, context);
    
    try {
      const { error } = await supabase
        .from('articles')
        .update({
          visibility: settings.visibility,
          allow_edit: settings.allow_edit,
          allow_comments: settings.allow_comments,
          updated_at: new Date().toISOString()
        })
        .eq('id', ref)
        .eq('user_id', userId);

      if (error) {
        throw new Error(`Erreur mise √† jour: ${error.message}`);
      }

      return { success: true, data: { message: 'Param√®tres de partage mis √† jour' } };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * R√©cup√©rer les notes r√©centes
   */
  static async getRecentNotes(limit: number = 10, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration notes r√©centes (${limit})`, context);
    
    try {
      const { data: notes, error } = await supabase
        .from('articles')
        .select('id, source_title, slug, header_image, folder_id, classeur_id, created_at, updated_at')
        .eq('user_id', userId)
        .is('trashed_at', null)
        .order('updated_at', { ascending: false })
        .limit(limit);

      if (error) {
        throw new Error(`Erreur r√©cup√©ration notes: ${error.message}`);
      }

      return { success: true, data: notes || [] };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * R√©cup√©rer les classeurs avec contenu (alias pour getClasseurs)
   */
  static async getClasseursWithContent(userId: string, context: ApiContext) {
    return await this.getClasseurs(userId, context);
  }

  /**
   * R√©cup√©rer les classeurs (alias pour getClasseurs)
   */
  static async listClasseurs(userId: string, context: ApiContext) {
    return await this.getClasseurs(userId, context);
  }

  /**
   * Rechercher du contenu (notes, dossiers, classeurs)
   */
  static async searchContent(query: string, type: string = 'all', limit: number = 20, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Recherche contenu: "${query}" (type: ${type})`, context);
    
    try {
      let results = [];

      if (type === 'all' || type === 'notes') {
        const notesResult = await this.searchNotes(query, limit, 0, userId, context);
        if (notesResult.success) {
          results = results.concat(notesResult.data.map(note => ({ ...note, type: 'note' })));
        }
      }

      if (type === 'all' || type === 'classeurs') {
        const classeursResult = await this.searchClasseurs(query, limit, 0, userId, context);
        if (classeursResult.success) {
          results = results.concat(classeursResult.data.map(classeur => ({ ...classeur, type: 'classeur' })));
        }
      }

      return { success: true, data: results };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * R√©cup√©rer les statistiques utilisateur
   */
  static async getStats(userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration statistiques ${userId}`, context);
    
    try {
      // Compter les notes
      const { count: notesCount } = await supabase
        .from('articles')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', userId)
        .is('trashed_at', null);

      // Compter les classeurs
      const { count: classeursCount } = await supabase
        .from('classeurs')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', userId)
        .is('trashed_at', null);

      // Compter les dossiers
      const { count: foldersCount } = await supabase
        .from('folders')
        .select('*', { count: 'exact', head: true })
        .eq('user_id', userId)
        .is('trashed_at', null);

      return { 
        success: true, 
        data: {
          notes_count: notesCount || 0,
          classeurs_count: classeursCount || 0,
          folders_count: foldersCount || 0,
          content_size: 0 // TODO: Calculer la taille du contenu
        }
      };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * R√©cup√©rer le profil utilisateur (alias pour getUserInfo)
   */
  static async getUserProfile(userId: string, context: ApiContext) {
    return await this.getUserInfo(userId, context);
  }

  /**
   * R√©cup√©rer la corbeille
   */
  static async getTrash(userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration corbeille ${userId}`, context);
    
    try {
      // R√©cup√©rer les √©l√©ments supprim√©s
      const { data: trashItems, error } = await supabase
        .from('trash')
        .select('*')
        .eq('user_id', userId)
        .order('trashed_at', { ascending: false });

      if (error) {
        throw new Error(`Erreur r√©cup√©ration corbeille: ${error.message}`);
      }

      return { success: true, data: trashItems || [] };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * Restaurer depuis la corbeille
   */
  static async restoreFromTrash(itemId: string, itemType: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Restauration ${itemType} ${itemId}`, context);
    
    try {
      // TODO: Impl√©menter la logique de restauration
      return { success: true, data: { message: '√âl√©ment restaur√©' } };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * Vider la corbeille
   */
  static async purgeTrash(userId: string, context: ApiContext) {
    logApi.info(`üöÄ Vidage corbeille ${userId}`, context);
    
    try {
      // TODO: Impl√©menter la logique de vidage
      return { success: true, data: { message: 'Corbeille vid√©e' } };
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  /**
   * Supprimer une ressource (note, dossier, classeur)
   */
  static async deleteResource(resourceType: string, ref: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Suppression ${resourceType} ${ref}`, context);
    
    try {
      switch (resourceType) {
        case 'note':
          return await this.deleteNote(ref, userId, context);
        case 'folder':
          return await this.deleteFolder(ref, userId, context);
        case 'classeur':
          return await this.deleteClasseur(ref, userId, context);
        default:
          throw new Error(`Type de ressource non support√©: ${resourceType}`);
      }
    } catch (error) {
      logApi.info(`‚ùå Erreur: ${error}`, context);
      return { success: false, error: error instanceof Error ? error.message : String(error) };
    }
  }

  // ============================================================================
  // M√âTHODES POUR LES AGENTS (PLACEHOLDERS)
  // ============================================================================

  /**
   * Lister les agents
   */
  static async listAgents(userId: string, context: ApiContext) {
    logApi.info(`üöÄ Liste agents ${userId}`, context);
    return { success: true, data: [] };
  }

  /**
   * Cr√©er un agent
   */
  static async createAgent(data: any, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Cr√©ation agent`, context);
    return { success: true, data: { id: 'placeholder' } };
  }

  /**
   * R√©cup√©rer un agent
   */
  static async getAgent(agentId: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ R√©cup√©ration agent ${agentId}`, context);
    return { success: true, data: { id: agentId } };
  }

  /**
   * Ex√©cuter un agent
   */
  static async executeAgent(data: any, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Ex√©cution agent`, context);
    return { success: true, data: { response: 'placeholder' } };
  }

  /**
   * Mettre √† jour un agent
   */
  static async updateAgent(agentId: string, data: any, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Mise √† jour agent ${agentId}`, context);
    return { success: true, data: { id: agentId } };
  }

  /**
   * Patcher un agent
   */
  static async patchAgent(agentId: string, data: any, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Patch agent ${agentId}`, context);
    return { success: true, data: { id: agentId } };
  }

  /**
   * Supprimer un agent
   */
  static async deleteAgent(agentId: string, userId: string, context: ApiContext) {
    logApi.info(`üöÄ Suppression agent ${agentId}`, context);
    return { success: true, data: { message: 'Agent supprim√©' } };
  }

  /**
   * Lister les tools
   */
  static async listTools(userId: string, context: ApiContext) {
    logApi.info(`üöÄ Liste tools ${userId}`, context);
    return { success: true, data: [] };
  }

  /**
   * Informations de debug
   */
  static async debugInfo(userId: string, context: ApiContext) {
    logApi.info(`üöÄ Debug info ${userId}`, context);
    return { 
      success: true, 
      data: {
        timestamp: new Date().toISOString(),
        environment: process.env.NODE_ENV || 'development',
        version: '2.0.0',
        features: ['api_v2', 'harmony', 'agents']
      }
    };
  }
} 