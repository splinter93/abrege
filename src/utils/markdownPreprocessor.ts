/**
 * PrÃ©processeur Markdown pour Ã©chapper les caractÃ¨res problÃ©matiques
 * avant le parsing par Tiptap
 */

/**
 * Remplace les ~ isolÃ©s par â‰ˆ dans les cellules de table pour Ã©viter le bug du strikethrough
 * Le caractÃ¨re â‰ˆ ressemble visuellement au ~ mais n'est pas parsÃ© par Markdown
 * 
 * @param markdown - Le contenu Markdown brut
 * @returns Le Markdown avec les ~ remplacÃ©s par â‰ˆ dans les tables
 */
export function replaceTildeInTables(markdown: string): string {
  if (!markdown) return markdown;

  // Regex pour dÃ©tecter les tables Markdown
  // Une table commence par | et a une ligne de sÃ©paration avec des ---
  const tableRegex = /(\|[^\n]+\|\n\|[-:\s|]+\|\n(?:\|[^\n]+\|\n)*)/g;
  
  return markdown.replace(tableRegex, (tableMatch) => {
    // Dans chaque cellule de table, remplacer les ~ isolÃ©s (pas ~~) par â‰ˆ
    return tableMatch.replace(/~(?!~)/g, 'â‰ˆ');
  });
}

/**
 * PrÃ©traitement complet du Markdown avant insertion dans l'Ã©diteur
 * 
 * @description Applique diverses transformations au Markdown pour corriger
 * les problÃ¨mes connus:
 * 1. DÃ©-Ã©chappe les entitÃ©s HTML (sÃ©curitÃ© bidirectionnelle serveur/client)
 * 2. Remplace les ~ dans les tables (fix bug LLM)
 * 
 * @param markdown - Le contenu Markdown brut depuis la DB
 * @returns Le Markdown prÃ©traitÃ© et sÃ©curisÃ© pour Tiptap
 */
export function preprocessMarkdown(markdown: string): string {
  if (!markdown) return markdown;
  
  let processed = markdown;
  
  // ðŸ”“ Ã‰TAPE 0 : DÃ©-Ã©chapper les entitÃ©s HTML (DB â†’ Ã‰diteur)
  // DÃ©-Ã©chappement basique des entitÃ©s HTML
  // Le HTML Ã©chappÃ© cÃ´tÃ© serveur doit Ãªtre dÃ©-Ã©chappÃ© cÃ´tÃ© client
  // pour que Tiptap puisse le gÃ©rer correctement
  const hasHtmlEntities = /&(?:lt|gt|amp|quot|#039);/i.test(processed);
  if (hasHtmlEntities) {
    processed = processed
      .replace(/&#039;/g, "'")   // DÃ©-Ã©chapper '
      .replace(/&quot;/g, '"')   // DÃ©-Ã©chapper "
      .replace(/&gt;/g, '>')     // DÃ©-Ã©chapper >
      .replace(/&lt;/g, '<')     // DÃ©-Ã©chapper <
      .replace(/&amp;/g, '&');   // DÃ©-Ã©chapper & en dernier
      
    if (process.env.NODE_ENV === 'development') {
      console.log('[markdownPreprocessor] ðŸ”“ EntitÃ©s HTML dÃ©-Ã©chappÃ©es pour l\'Ã©diteur');
    }
  }
  
  // 1. Remplacer les ~ par â‰ˆ dans les tables (fix bug LLM)
  processed = replaceTildeInTables(processed);
  
  // Ici on peut ajouter d'autres prÃ©traitements si nÃ©cessaire
  
  return processed;
}

export default preprocessMarkdown;

