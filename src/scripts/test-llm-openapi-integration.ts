#!/usr/bin/env tsx

/**
 * Script de test final pour valider l'int√©gration compl√®te du sch√©ma OpenAPI V2 avec le syst√®me LLM
 */

import { getOpenAPISchemaService } from '../services/openApiSchemaService';
import { getOpenAPIV2Tools } from '../services/openApiToolsGenerator';

async function testLLMOpenAPIIntegration() {
  console.log('üß™ Test final d\'int√©gration LLM + OpenAPI V2\n');

  try {
    // 1. Test du service de sch√©ma
    console.log('1Ô∏è‚É£ Test du service de sch√©ma OpenAPI V2...');
    const schemaService = getOpenAPISchemaService();
    const schema = schemaService.getSchema();
    
    console.log(`‚úÖ Sch√©ma charg√©: ${schema.info.title} v${schema.info.version}`);
    console.log(`üìä ${Object.keys(schema.paths).length} endpoints disponibles`);
    
    // 2. Test de g√©n√©ration des tools
    console.log('\n2Ô∏è‚É£ Test de g√©n√©ration des tools pour LLM...');
    const tools = getOpenAPIV2Tools();
    
    console.log(`‚úÖ ${tools.length} tools g√©n√©r√©s pour les LLMs`);
    
    // V√©rifier que les tools ont le bon format
    const validTools = tools.filter(tool => 
      tool.type === 'function' && 
      tool.function && 
      tool.function.name && 
      tool.function.description &&
      tool.function.parameters
    );
    
    console.log(`‚úÖ ${validTools.length} tools avec format valide`);
    
    // 3. Test des tools sp√©cifiques
    console.log('\n3Ô∏è‚É£ Test des tools sp√©cifiques...');
    
    const toolNames = tools.map(tool => tool.function.name);
    const expectedTools = [
      'create_note',
      'get_note', 
      'update_note',
      'delete_note',
      'add_content_to_note',
      'move_note',
      'create_classeur',
      'list_classeurs',
      'create_folder',
      'search_notes',
      'get_user_info',
      'get_platform_stats'
    ];
    
    const foundTools = expectedTools.filter(expected => 
      toolNames.includes(expected)
    );
    
    console.log(`‚úÖ ${foundTools.length}/${expectedTools.length} tools attendus trouv√©s`);
    console.log('üìã Tools trouv√©s:');
    foundTools.forEach(tool => {
      console.log(`   - ${tool}`);
    });
    
    const missingTools = expectedTools.filter(expected => 
      !toolNames.includes(expected)
    );
    
    if (missingTools.length > 0) {
      console.log('‚ö†Ô∏è Tools manquants:');
      missingTools.forEach(tool => {
        console.log(`   - ${tool}`);
      });
    }
    
    // 4. Test des param√®tres des tools
    console.log('\n4Ô∏è‚É£ Test des param√®tres des tools...');
    
    const createNoteTool = tools.find(tool => tool.function.name === 'create_note');
    if (createNoteTool) {
      const params = createNoteTool.function.parameters;
      console.log('üìù Tool create_note:');
      console.log(`   - Type: ${params.type}`);
      console.log(`   - Propri√©t√©s: ${Object.keys(params.properties).length}`);
      console.log(`   - Requis: ${params.required?.length || 0}`);
      
      if (params.required?.includes('source_title') && params.required?.includes('notebook_id')) {
        console.log('‚úÖ Param√®tres requis corrects pour create_note');
      } else {
        console.log('‚ùå Param√®tres requis manquants pour create_note');
      }
    }
    
    // 5. Test de compatibilit√© avec Groq
    console.log('\n5Ô∏è‚É£ Test de compatibilit√© avec Groq...');
    
    // V√©rifier que les tools sont compatibles avec le format Groq
    const groqCompatibleTools = tools.filter(tool => {
      const func = tool.function;
      return func.name && 
             func.description && 
             func.parameters &&
             func.parameters.type === 'object' &&
             func.parameters.properties &&
             typeof func.parameters.properties === 'object';
    });
    
    console.log(`‚úÖ ${groqCompatibleTools.length}/${tools.length} tools compatibles avec Groq`);
    
    // 6. Test de performance
    console.log('\n6Ô∏è‚É£ Test de performance...');
    
    const startTime = Date.now();
    const tools2 = getOpenAPIV2Tools(); // Deuxi√®me g√©n√©ration
    const endTime = Date.now();
    
    console.log(`‚úÖ G√©n√©ration des tools: ${endTime - startTime}ms`);
    console.log(`‚úÖ ${tools2.length} tools g√©n√©r√©s (identique: ${tools.length === tools2.length})`);
    
    // 7. R√©sum√© final
    console.log('\nüéâ Test d\'int√©gration termin√© avec succ√®s !');
    console.log('\nüìä R√©sum√© final:');
    console.log(`   - Sch√©ma: ${schema.info.title} v${schema.info.version}`);
    console.log(`   - Endpoints: ${Object.keys(schema.paths).length}`);
    console.log(`   - Tools g√©n√©r√©s: ${tools.length}`);
    console.log(`   - Tools valides: ${validTools.length}`);
    console.log(`   - Tools attendus trouv√©s: ${foundTools.length}/${expectedTools.length}`);
    console.log(`   - Compatible Groq: ${groqCompatibleTools.length}/${tools.length}`);
    console.log(`   - Performance: ${endTime - startTime}ms`);
    
    // 8. Recommandations
    console.log('\nüí° Recommandations:');
    if (foundTools.length === expectedTools.length) {
      console.log('‚úÖ Tous les tools attendus sont disponibles');
    } else {
      console.log('‚ö†Ô∏è Certains tools attendus sont manquants');
    }
    
    if (groqCompatibleTools.length === tools.length) {
      console.log('‚úÖ Tous les tools sont compatibles avec Groq');
    } else {
      console.log('‚ö†Ô∏è Certains tools ne sont pas compatibles avec Groq');
    }
    
    if (endTime - startTime < 100) {
      console.log('‚úÖ Performance excellente (< 100ms)');
    } else if (endTime - startTime < 500) {
      console.log('‚úÖ Performance correcte (< 500ms)');
    } else {
      console.log('‚ö†Ô∏è Performance √† am√©liorer (> 500ms)');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
    process.exit(1);
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  testLLMOpenAPIIntegration().catch(console.error);
}

export { testLLMOpenAPIIntegration };
