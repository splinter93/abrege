'use client';

import React, { useState } from 'react';
import StreamingLineByLine from './StreamingLineByLine';
import './StreamingLineByLine.css';

export const StreamingLineByLineDemo: React.FC = () => {
  const [demoContent, setDemoContent] = useState<string>('');
  const [lineDelay, setLineDelay] = useState<number>(800);
  const [isPlaying, setIsPlaying] = useState<boolean>(false);
  const [selectedDemo, setSelectedDemo] = useState<'short' | 'medium' | 'long'>('medium');

  const demoContents = {
    short: `# Message court

Ceci est un message court pour tester l'effet.

- Point 1
- Point 2
- Point 3

**Fin du message.**`,

    medium: `# Message de taille moyenne

Ceci est un message de taille moyenne qui d√©montre l'effet de streaming ligne par ligne.

## Caract√©ristiques

- **Animation fluide** : Chaque ligne appara√Æt progressivement
- **D√©lai configurable** : Contr√¥le de la vitesse d'affichage
- **Markdown support√©** : Rendu complet du contenu
- **Responsive** : S'adapte √† tous les √©crans

## Code d'exemple

\`\`\`javascript
console.log("Hello, streaming world!");
\`\`\`

> Citation : "La patience est une vertu dans le streaming."

---

*Message de d√©monstration termin√©.*`,

    long: `# Message long et d√©taill√©

Ceci est un message beaucoup plus long qui va vraiment tester l'effet de streaming ligne par ligne sur un contenu substantiel.

## Introduction

L'objectif de ce composant est de cr√©er une exp√©rience utilisateur plus agr√©able en ralentissant l'affichage du contenu g√©n√©r√© par le LLM. Au lieu d'avoir tout le texte qui appara√Æt d'un coup, chaque ligne appara√Æt progressivement avec un d√©lai configurable.

## Avantages du streaming ligne par ligne

### 1. Meilleure lisibilit√©
- L'utilisateur peut lire chaque ligne √† son rythme
- Pas de surcharge d'information soudaine
- Focus sur le contenu actuel

### 2. Exp√©rience plus naturelle
- Simule une frappe humaine
- Donne le temps de traiter l'information
- Cr√©e une sensation de "conversation"

### 3. Contr√¥le de la vitesse
- D√©lai configurable entre les lignes
- Adaptation selon le contexte
- Possibilit√© de pause/reprise

## Impl√©mentation technique

Le composant utilise Framer Motion pour les animations et divise le contenu en lignes individuelles. Chaque ligne est affich√©e avec une animation d'entr√©e fluide.

\`\`\`typescript
interface StreamingLineByLineProps {
  content: string;
  lineDelay?: number; // D√©lai entre chaque ligne
  onComplete?: () => void;
}
\`\`\`

## Utilisation dans le chat

Ce composant peut √™tre int√©gr√© dans le syst√®me de chat pour remplacer l'affichage instantan√© des r√©ponses de l'assistant.

### Configuration recommand√©e
- **Messages courts** : 400-600ms de d√©lai
- **Messages moyens** : 600-800ms de d√©lai  
- **Messages longs** : 800-1200ms de d√©lai

## Conclusion

Le streaming ligne par ligne am√©liore significativement l'exp√©rience utilisateur en cr√©ant un rythme de lecture plus naturel et agr√©able.

---

*Fin du message de d√©monstration long.*`
  };

  const handleDemoSelect = (demo: 'short' | 'medium' | 'long') => {
    setSelectedDemo(demo);
    setDemoContent(demoContents[demo]);
    setIsPlaying(false);
  };

  const handlePlay = () => {
    setIsPlaying(true);
  };

  const handleReset = () => {
    setIsPlaying(false);
    setDemoContent('');
  };

  const handleComplete = () => {
    console.log('Streaming termin√© !');
  };

  return (
    <div className="streaming-demo-container">
      <div className="demo-header">
        <h1>üé¨ D√©monstration Streaming Ligne par Ligne</h1>
        <p>Testez l'effet de streaming ligne par ligne pour ralentir l'affichage du LLM</p>
      </div>

      <div className="demo-controls">
        <div className="control-group">
          <label>Type de contenu :</label>
          <div className="demo-buttons">
            <button
              onClick={() => handleDemoSelect('short')}
              className={selectedDemo === 'short' ? 'active' : ''}
            >
              Court
            </button>
            <button
              onClick={() => handleDemoSelect('medium')}
              className={selectedDemo === 'medium' ? 'active' : ''}
            >
              Moyen
            </button>
            <button
              onClick={() => handleDemoSelect('long')}
              className={selectedDemo === 'long' ? 'active' : ''}
            >
              Long
            </button>
          </div>
        </div>

        <div className="control-group">
          <label>D√©lai entre lignes : {lineDelay}ms</label>
          <input
            type="range"
            min="200"
            max="2000"
            step="100"
            value={lineDelay}
            onChange={(e) => setLineDelay(Number(e.target.value))}
            className="delay-slider"
          />
        </div>

        <div className="control-group">
          <button onClick={handlePlay} disabled={isPlaying} className="play-button">
            ‚ñ∂Ô∏è D√©marrer le streaming
          </button>
          <button onClick={handleReset} className="reset-button">
            üîÑ R√©initialiser
          </button>
        </div>
      </div>

      <div className="demo-content">
        <h3>Contenu en streaming :</h3>
        
        {isPlaying && demoContent ? (
          <div className="streaming-preview">
            <StreamingLineByLine
              content={demoContent}
              lineDelay={lineDelay}
              onComplete={handleComplete}
              className="demo-streaming"
            />
          </div>
        ) : (
          <div className="content-preview">
            <pre>{demoContent || 'S√©lectionnez un type de contenu et cliquez sur "D√©marrer"'}</pre>
          </div>
        )}
      </div>

      <div className="demo-info">
        <h4>‚ÑπÔ∏è Informations</h4>
        <ul>
          <li><strong>D√©lai actuel :</strong> {lineDelay}ms entre chaque ligne</li>
          <li><strong>Nombre de lignes :</strong> {demoContent ? demoContent.split('\n').filter(l => l.trim()).length : 0}</li>
          <li><strong>Statut :</strong> {isPlaying ? 'En cours...' : 'En attente'}</li>
        </ul>
      </div>
    </div>
  );
};

export default StreamingLineByLineDemo; 