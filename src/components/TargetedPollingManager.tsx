/**
 * üéØ Gestionnaire de Polling Cibl√©
 * 
 * Ce composant g√®re le polling cibl√© et ponctuel pour la page dossiers.
 * Principe : 1 Action UI = 1 Polling Cibl√© = 1 Mise √† jour UI
 */

"use client";

import { useEffect } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { useTargetedPolling } from '@/hooks/useTargetedPolling';
import { simpleLogger as logger } from '@/utils/logger';

export default function TargetedPollingManager() {
  const { user } = useAuth();
  const { pollAll, pollNotes, pollFolders, pollClasseurs, isPolling } = useTargetedPolling();

  console.log('[TargetedPollingManager] üîç Composant rendu, user:', user?.id, 'isPolling:', isPolling);

  // Initialiser le syst√®me de polling cibl√©
  useEffect(() => {
    console.log('[TargetedPollingManager] üîç useEffect initialisation, user:', user?.id);
    
    if (user?.id) {
      console.log('[TargetedPollingManager] ‚úÖ Gestionnaire de polling cibl√© initialis√©');
      logger.dev('[TargetedPollingManager] ‚úÖ Gestionnaire de polling cibl√© initialis√©');
      
      // üö´ Pas de polling initial automatique pour √©viter les erreurs 401
      // Le polling sera d√©clench√© par les actions UI
      console.log('[TargetedPollingManager] üéØ Pr√™t pour le polling cibl√© par actions UI');
      logger.dev('[TargetedPollingManager] üéØ Pr√™t pour le polling cibl√© par actions UI');
    } else {
      console.log('[TargetedPollingManager] ‚ö†Ô∏è Pas d\'utilisateur connect√©');
    }
  }, [user?.id]);

  // Exposer les fonctions de polling globalement pour les actions UI
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Exposer les fonctions de polling sur window pour les actions UI
      (window as any).targetedPolling = {
        pollNotes,
        pollFolders,
        pollClasseurs,
        pollAll,
        isPolling: () => isPolling
      };
    }
  }, [pollNotes, pollFolders, pollClasseurs, pollAll, isPolling]);

  // Cleanup
  useEffect(() => {
    return () => {
      if (typeof window !== 'undefined') {
        delete (window as any).targetedPolling;
      }
    };
  }, []);

  // Composant invisible - fonctionne en arri√®re-plan
  return null;
}
