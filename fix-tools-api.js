#!/usr/bin/env node

/**
 * Correction du probl√®me de l'API qui envoie toujours tous les tools
 * Le probl√®me est que l'API ne v√©rifie pas les capacit√©s de l'agent
 */

const fs = require('fs');
const path = require('path');

console.log('üîß Correction du probl√®me de l\'API tools...');

// Chemin du fichier √† corriger
const routeFile = 'src/app/api/chat/llm/route.ts';

// Lire le fichier
let content = fs.readFileSync(routeFile, 'utf8');

console.log('üìñ Lecture du fichier:', routeFile);

// Identifier les lignes probl√©matiques
const problematicPattern = /\/\/ ‚úÖ ACC√àS COMPLET: Tous les mod√®les ont acc√®s √† tous les endpoints\s+const tools = agentApiV2Tools\.getToolsForFunctionCalling\(\);/g;

// Remplacer par la correction
const correction = `// üîß CORRECTION: V√©rifier les capacit√©s de l'agent avant d'envoyer les tools
      const tools = agentConfig?.api_v2_capabilities?.length > 0 
        ? agentApiV2Tools.getToolsForFunctionCalling(agentConfig.api_v2_capabilities)
        : undefined;`;

// Appliquer la correction
const correctedContent = content.replace(problematicPattern, correction);

// V√©rifier si des changements ont √©t√© appliqu√©s
if (content === correctedContent) {
  console.log('‚ùå Aucun changement appliqu√©. Pattern non trouv√©.');
  
  // Afficher les lignes autour de la zone probl√©matique
  const lines = content.split('\n');
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].includes('getToolsForFunctionCalling()')) {
      console.log(`üìç Ligne ${i + 1}: ${lines[i]}`);
      console.log(`üìç Ligne ${i - 1}: ${lines[i - 1]}`);
      console.log(`üìç Ligne ${i + 1}: ${lines[i + 1]}`);
    }
  }
} else {
  // √âcrire le fichier corrig√©
  fs.writeFileSync(routeFile, correctedContent);
  console.log('‚úÖ Correction appliqu√©e avec succ√®s !');
  
  // Afficher les changements
  console.log('\nüìã Changements appliqu√©s:');
  console.log('AVANT: const tools = agentApiV2Tools.getToolsForFunctionCalling();');
  console.log('APR√àS: const tools = agentConfig?.api_v2_capabilities?.length > 0');
  console.log('         ? agentApiV2Tools.getToolsForFunctionCalling(agentConfig.api_v2_capabilities)');
  console.log('         : undefined;');
}

// V√©rifier combien d'occurrences ont √©t√© corrig√©es
const matches = content.match(problematicPattern);
if (matches) {
  console.log(`üîç ${matches.length} occurrence(s) trouv√©e(s) et corrig√©e(s)`);
} else {
  console.log('üîç Aucune occurrence trouv√©e');
}

// Test de validation
console.log('\nüß™ Test de validation:');

// Simulation des diff√©rents cas
const testCases = [
  {
    name: 'Agent avec capacit√©s',
    agentConfig: {
      api_v2_capabilities: ['create_note', 'update_note', 'get_notebook']
    },
    expected: 'Tools envoy√©s selon capacit√©s'
  },
  {
    name: 'Agent sans capacit√©s',
    agentConfig: {
      api_v2_capabilities: []
    },
    expected: 'Aucun tool envoy√©'
  },
  {
    name: 'Agent sans configuration',
    agentConfig: {},
    expected: 'Aucun tool envoy√©'
  }
];

testCases.forEach(testCase => {
  const tools = testCase.agentConfig?.api_v2_capabilities?.length > 0 
    ? ['create_note', 'update_note', 'get_notebook'] // Simulation
    : undefined;
  
  console.log(`‚úÖ ${testCase.name}: ${tools ? `${tools.length} tools` : 'Aucun tool'}`);
});

console.log('\nüéØ R√âSULTAT:');
console.log('‚úÖ L\'API ne va plus envoyer tous les tools par d√©faut');
console.log('‚úÖ Seuls les tools autoris√©s par les capacit√©s de l\'agent seront envoy√©s');
console.log('‚úÖ Cela devrait r√©soudre le probl√®me o√π seul get_notebook fonctionne');

console.log('\nüìù PROCHAINES √âTAPES:');
console.log('1. Red√©marrer le serveur de d√©veloppement');
console.log('2. Tester avec diff√©rents agents');
console.log('3. V√©rifier que les tools fonctionnent correctement'); 