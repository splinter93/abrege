#!/usr/bin/env node

/**
 * Script pour corriger le probl√®me des tool calls multiples
 * 
 * Ce script ajoute des instructions sp√©cifiques √† tous les agents actifs
 * pour √©viter qu'ils g√©n√®rent 10+ tool calls au lieu d'un seul.
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const TOOL_CALLS_RULES = `

## üéØ R√àGLES CRITIQUES POUR LES TOOL CALLS

**IMPORTANT :** Utilise UN SEUL tool call √† la fois, sauf si absolument n√©cessaire.

### R√®gles d'or :
1. **UNE ACTION = UN TOOL CALL** : Pour cr√©er une note, utilise SEULEMENT createNote
2. **√âVITE LES ACTIONS MULTIPLES** : Ne cr√©e pas plusieurs notes, classeurs ou dossiers en une fois
3. **PRIORIT√â √Ä L'EFFICACIT√â** : Si tu peux r√©pondre sans outils, fais-le
4. **√âVALUATION OBLIGATOIRE** : Avant chaque tool call, demande-toi : "Est-ce vraiment n√©cessaire ?"

### Exemples :
- ‚úÖ "Cr√©er une note" ‚Üí UN SEUL createNote
- ‚ùå "Cr√©er une note" ‚Üí createNote + createClasseur + createDossier
- ‚úÖ "Organiser mes notes" ‚Üí UN SEUL listNotes puis r√©ponse textuelle
- ‚ùå "Organiser mes notes" ‚Üí listNotes + createClasseur + moveNote + updateNote

**R√âSULTAT ATTENDU :** Maximum 1-2 tool calls par demande utilisateur.`;

async function fixMultipleToolCalls() {
  try {
    console.log('üîß D√©but de la correction des tool calls multiples...');

    // R√©cup√©rer tous les agents actifs
    const { data: agents, error: fetchError } = await supabase
      .from('agents')
      .select('id, name, system_instructions')
      .eq('is_active', true);

    if (fetchError) {
      throw new Error(`Erreur lors de la r√©cup√©ration des agents: ${fetchError.message}`);
    }

    if (!agents || agents.length === 0) {
      console.log('‚ö†Ô∏è Aucun agent actif trouv√©');
      return;
    }

    console.log(`üìã ${agents.length} agents actifs trouv√©s`);

    // Mettre √† jour chaque agent
    for (const agent of agents) {
      const currentInstructions = agent.system_instructions || '';
      
      // V√©rifier si les r√®gles sont d√©j√† pr√©sentes
      if (currentInstructions.includes('R√àGLES CRITIQUES POUR LES TOOL CALLS')) {
        console.log(`‚è≠Ô∏è Agent "${agent.name}" d√©j√† mis √† jour, ignor√©`);
        continue;
      }

      // Ajouter les r√®gles
      const updatedInstructions = currentInstructions + TOOL_CALLS_RULES;

      const { error: updateError } = await supabase
        .from('agents')
        .update({ system_instructions: updatedInstructions })
        .eq('id', agent.id);

      if (updateError) {
        console.error(`‚ùå Erreur lors de la mise √† jour de l'agent "${agent.name}":`, updateError.message);
        continue;
      }

      console.log(`‚úÖ Agent "${agent.name}" mis √† jour avec succ√®s`);
    }

    console.log('üéâ Correction termin√©e avec succ√®s !');
    console.log('üìù Les agents utilisent maintenant des tool calls optimis√©s');

  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error.message);
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  fixMultipleToolCalls();
}

module.exports = { fixMultipleToolCalls };
