#!/usr/bin/env tsx

/**
 * Script de test du syst√®me d'abonnements
 * =======================================
 * 
 * Ce script teste toutes les fonctionnalit√©s du syst√®me
 * de quotas dynamiques bas√© sur les abonnements.
 */

import { createClient } from '@supabase/supabase-js';
import SubscriptionService from '../src/services/subscriptionService';
import { formatBytes } from '../src/config/storage';

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// ==========================================================================
// FONCTIONS DE TEST
// ==========================================================================

/**
 * Test 1: R√©cup√©ration des plans disponibles
 */
async function testAvailablePlans(): Promise<void> {
  console.log('\nüß™ TEST 1: Plans d\'abonnement disponibles');
  console.log('='.repeat(50));
  
  try {
    const plans = await SubscriptionService.getAvailablePlans();
    
    if (plans.length === 0) {
      console.log('‚ùå Aucun plan trouv√©');
      return;
    }
    
    console.log(`‚úÖ ${plans.length} plans trouv√©s:`);
    
    for (const plan of plans) {
      console.log(`\nüìã ${plan.displayName} (${plan.type})`);
      console.log(`   Description: ${plan.description || 'Aucune'}`);
      console.log(`   Quota: ${formatBytes(plan.storageQuotaBytes)}`);
      console.log(`   Taille max fichier: ${formatBytes(plan.maxFileSizeBytes)}`);
      console.log(`   Fichiers max/upload: ${plan.maxFilesPerUpload}`);
      console.log(`   Prix mensuel: ${plan.priceMonthly ? `${plan.priceMonthly} ${plan.currency}` : 'Gratuit'}`);
      console.log(`   Fonctionnalit√©s: ${Object.keys(plan.features).join(', ') || 'Aucune'}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur test plans:', error);
  }
}

/**
 * Test 2: Cr√©ation d'un utilisateur de test
 */
async function testUserCreation(): Promise<string | null> {
  console.log('\nüß™ TEST 2: Cr√©ation utilisateur de test');
  console.log('='.repeat(50));
  
  try {
    const testEmail = `test-subscription-${Date.now()}@example.com`;
    const testPassword = 'test123456';
    
    const { data: { user }, error } = await supabase.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      email_confirm: true
    });
    
    if (error || !user) {
      console.error('‚ùå Erreur cr√©ation utilisateur:', error);
      return null;
    }
    
    console.log(`‚úÖ Utilisateur cr√©√©: ${user.email} (ID: ${user.id})`);
    return user.id;
    
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation utilisateur:', error);
    return null;
  }
}

/**
 * Test 3: V√©rification du plan par d√©faut
 */
async function testDefaultPlan(userId: string): Promise<void> {
  console.log('\nüß™ TEST 3: Plan par d√©faut de l\'utilisateur');
  console.log('='.repeat(50));
  
  try {
    const plan = await SubscriptionService.getUserActivePlan(userId);
    
    if (!plan) {
      console.log('‚ùå Aucun plan trouv√©');
      return;
    }
    
    console.log(`‚úÖ Plan actif: ${plan.displayName} (${plan.type})`);
    console.log(`   Quota: ${formatBytes(plan.storageQuotaBytes)}`);
    console.log(`   Taille max fichier: ${formatBytes(plan.maxFileSizeBytes)}`);
    console.log(`   Fichiers max/upload: ${plan.maxFilesPerUpload}`);
    console.log(`   Par d√©faut: ${plan.isDefault ? 'Oui' : 'Non'}`);
    
  } catch (error) {
    console.error('‚ùå Erreur test plan par d√©faut:', error);
  }
}

/**
 * Test 4: V√©rification du quota de stockage
 */
async function testStorageQuota(userId: string): Promise<void> {
  console.log('\nüß™ TEST 4: Quota de stockage de l\'utilisateur');
  console.log('='.repeat(50));
  
  try {
    const quota = await SubscriptionService.getUserStorageQuota(userId);
    
    if (!quota) {
      console.log('‚ùå Aucun quota trouv√©');
      return;
    }
    
    console.log(`‚úÖ Quota r√©cup√©r√©:`);
    console.log(`   Utilis√©: ${formatBytes(quota.usedBytes)}`);
    console.log(`   Total: ${formatBytes(quota.quotaBytes)}`);
    console.log(`   Restant: ${formatBytes(quota.remainingBytes)}`);
    console.log(`   Pourcentage: ${quota.usagePercentage}%`);
    console.log(`   Niveau d'alerte: ${quota.alertLevel}`);
    
    if (quota.currentPlan) {
      console.log(`   Plan actuel: ${quota.currentPlan.displayName}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur test quota:', error);
  }
}

/**
 * Test 5: Changement de plan
 */
async function testPlanChange(userId: string): Promise<void> {
  console.log('\nüß™ TEST 5: Changement de plan d\'abonnement');
  console.log('='.repeat(50));
  
  try {
    // R√©cup√©rer le plan premium
    const plans = await SubscriptionService.getAvailablePlans();
    const premiumPlan = plans.find(p => p.type === 'premium');
    
    if (!premiumPlan) {
      console.log('‚ùå Plan premium non trouv√©');
      return;
    }
    
    console.log(`üîÑ Changement vers le plan: ${premiumPlan.displayName}`);
    
    const result = await SubscriptionService.changeUserPlan(
      userId, 
      premiumPlan.id,
      'test',
      'test-subscription-123'
    );
    
    if (result.success) {
      console.log(`‚úÖ Plan chang√© avec succ√®s:`);
      console.log(`   Ancien plan: ${result.oldPlan?.displayName || 'Aucun'}`);
      console.log(`   Nouveau plan: ${result.newPlan.displayName}`);
      console.log(`   Quota mis √† jour: ${result.quotaUpdated ? 'Oui' : 'Non'}`);
      
      if (result.error) {
        console.log(`   ‚ö†Ô∏è Avertissement: ${result.error.message}`);
      }
    } else {
      console.log(`‚ùå √âchec du changement de plan: ${result.error?.message}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur test changement de plan:', error);
  }
}

/**
 * Test 6: V√©rification des permissions d'upload
 */
async function testUploadPermissions(userId: string): Promise<void> {
  console.log('\nüß™ TEST 6: Permissions d\'upload selon le plan');
  console.log('='.repeat(50));
  
  try {
    const testCases = [
      { fileSize: 50 * 1024 * 1024, fileCount: 1, description: 'Fichier 50MB, 1 fichier' },
      { fileSize: 200 * 1024 * 1024, fileCount: 1, description: 'Fichier 200MB, 1 fichier' },
      { fileSize: 50 * 1024 * 1024, fileCount: 25, description: 'Fichier 50MB, 25 fichiers' },
      { fileSize: 50 * 1024 * 1024, fileCount: 1, description: 'Fichier 50MB, 1 fichier (apr√®s changement)' }
    ];
    
    for (const testCase of testCases) {
      const result = await SubscriptionService.canUserUploadFile(
        userId, 
        testCase.fileSize, 
        testCase.fileCount
      );
      
      console.log(`\nüìÅ ${testCase.description}:`);
      console.log(`   Peut uploader: ${result.canUpload ? '‚úÖ Oui' : '‚ùå Non'}`);
      
      if (!result.canUpload && result.reason) {
        console.log(`   Raison: ${result.reason}`);
      }
      
      if (result.plan) {
        console.log(`   Plan actuel: ${result.plan.displayName}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur test permissions upload:', error);
  }
}

/**
 * Test 7: Historique des abonnements
 */
async function testSubscriptionHistory(userId: string): Promise<void> {
  console.log('\nüß™ TEST 7: Historique des abonnements');
  console.log('='.repeat(50));
  
  try {
    const history = await SubscriptionService.getUserSubscriptionHistory(userId);
    
    if (history.length === 0) {
      console.log('‚ùå Aucun historique trouv√©');
      return;
    }
    
    console.log(`‚úÖ ${history.length} abonnements dans l'historique:`);
    
    for (const sub of history) {
      console.log(`\nüìÖ Abonnement ${sub.id}:`);
      console.log(`   Statut: ${sub.status}`);
      console.log(`   D√©but: ${new Date(sub.startedAt).toLocaleDateString('fr-FR')}`);
      
      if (sub.expiresAt) {
        console.log(`   Expire: ${new Date(sub.expiresAt).toLocaleDateString('fr-FR')}`);
      }
      
      if (sub.canceledAt) {
        console.log(`   Annul√©: ${new Date(sub.canceledAt).toLocaleDateString('fr-FR')}`);
      }
      
      if (sub.billingProvider) {
        console.log(`   Fournisseur: ${sub.billingProvider}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur test historique:', error);
  }
}

/**
 * Test 8: Retour au plan gratuit
 */
async function testReturnToFreePlan(userId: string): Promise<void> {
  console.log('\nüß™ TEST 8: Retour au plan gratuit');
  console.log('='.repeat(50));
  
  try {
    console.log('üîÑ Annulation de l\'abonnement premium...');
    
    const success = await SubscriptionService.cancelUserSubscription(userId);
    
    if (success) {
      console.log('‚úÖ Abonnement annul√© avec succ√®s');
      
      // V√©rifier que l'utilisateur est revenu au plan gratuit
      const plan = await SubscriptionService.getUserActivePlan(userId);
      if (plan) {
        console.log(`‚úÖ Plan actuel: ${plan.displayName} (${plan.type})`);
        console.log(`   Quota: ${formatBytes(plan.storageQuotaBytes)}`);
      }
    } else {
      console.log('‚ùå √âchec de l\'annulation');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur test retour plan gratuit:', error);
  }
}

/**
 * Test 9: Nettoyage
 */
async function testCleanup(userId: string): Promise<void> {
  console.log('\nüß™ TEST 9: Nettoyage');
  console.log('='.repeat(50));
  
  try {
    // Supprimer l'utilisateur de test
    const { error } = await supabase.auth.admin.deleteUser(userId);
    
    if (error) {
      console.log(`‚ö†Ô∏è Erreur suppression utilisateur: ${error.message}`);
    } else {
      console.log('‚úÖ Utilisateur de test supprim√©');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur nettoyage:', error);
  }
}

// ==========================================================================
// POINT D'ENTR√âE PRINCIPAL
// ==========================================================================

async function main() {
  console.log('üöÄ D√âMARRAGE DES TESTS DU SYST√àME D\'ABONNEMENTS');
  console.log('='.repeat(60));
  
  let testUserId: string | null = null;
  
  try {
    // Test 1: Plans disponibles
    await testAvailablePlans();
    
    // Test 2: Cr√©ation utilisateur
    testUserId = await testUserCreation();
    if (!testUserId) {
      console.error('‚ùå Impossible de continuer sans utilisateur de test');
      return;
    }
    
    // Test 3: Plan par d√©faut
    await testDefaultPlan(testUserId);
    
    // Test 4: Quota de stockage
    await testStorageQuota(testUserId);
    
    // Test 5: Changement de plan
    await testPlanChange(testUserId);
    
    // Test 6: Permissions d'upload
    await testUploadPermissions(testUserId);
    
    // Test 7: Historique des abonnements
    await testSubscriptionHistory(testUserId);
    
    // Test 8: Retour au plan gratuit
    await testReturnToFreePlan(testUserId);
    
    // Test 9: Nettoyage
    await testCleanup(testUserId);
    
    console.log('\nüéâ TOUS LES TESTS TERMIN√âS AVEC SUCC√àS !');
    
  } catch (error) {
    console.error('\nüí• ERREUR CRITIQUE DANS LES TESTS:', error);
  } finally {
    // Nettoyage final
    if (testUserId) {
      await testCleanup(testUserId);
    }
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(console.error);
} 