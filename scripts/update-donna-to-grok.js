import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function updateDonnaToGrok() {
  console.log('üöÄ Mise √† jour de Donna vers Grok...');
  
  try {
    // 1. R√©cup√©rer l'agent Donna actuel
    console.log('\nüìä 1. R√©cup√©ration de Donna...');
    const { data: currentDonna, error: fetchError } = await supabase
      .from('agents')
      .select('*')
      .eq('name', 'Donna')
      .single();

    if (fetchError || !currentDonna) {
      console.error('‚ùå Erreur r√©cup√©ration Donna:', fetchError);
      return;
    }

    console.log('‚úÖ Donna trouv√©e !');
    console.log(`   - ID: ${currentDonna.id}`);
    console.log(`   - Mod√®le actuel: ${currentDonna.model}`);
    console.log(`   - Provider actuel: ${currentDonna.provider}`);

    // 2. Mettre √† jour vers Grok
    console.log('\nüîÑ 2. Mise √† jour vers Grok...');
    const { data: updatedDonna, error: updateError } = await supabase
      .from('agents')
      .update({
        model: 'grok-beta',
        provider: 'xai',
        api_config: {
          baseUrl: 'https://api.x.ai/v1',
          endpoint: '/chat/completions'
        }
      })
      .eq('id', currentDonna.id)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour:', updateError);
      return;
    }

    console.log('‚úÖ Donna mise √† jour avec succ√®s !');
    console.log(`   - Nouveau mod√®le: ${updatedDonna.model}`);
    console.log(`   - Nouveau provider: ${updatedDonna.provider}`);
    console.log(`   - Nouvelle API: ${updatedDonna.api_config.baseUrl}`);

    // 3. V√©rification
    console.log('\nüîç 3. V√©rification...');
    const { data: verifyDonna, error: verifyError } = await supabase
      .from('agents')
      .select('*')
      .eq('id', currentDonna.id)
      .single();

    if (verifyError) {
      console.error('‚ùå Erreur v√©rification:', verifyError);
      return;
    }

    console.log('‚úÖ V√©rification r√©ussie !');
    console.log(`   - Mod√®le: ${verifyDonna.model}`);
    console.log(`   - Provider: ${verifyDonna.provider}`);

    console.log('\nüéâ Donna utilise maintenant le mod√®le Grok !');
    console.log('\nüí° Avantages de Grok :');
    console.log('   - Raisonnement avanc√©');
    console.log('   - Compr√©hension contextuelle am√©lior√©e');
    console.log('   - R√©ponses plus naturelles');
    console.log('   - Meilleure gestion des tools');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le script
updateDonnaToGrok(); 