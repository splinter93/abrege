#!/usr/bin/env node

// Script de mise √† jour des URLs OAuth ChatGPT
// Usage: node scripts/update-oauth-urls.js

require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

// Configuration
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.error('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.error('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Ancienne et nouvelle URL
const OLD_URL = 'https://chat.openai.com/aip/g-011f24575c8d3b9d5d69e124bafa1364ae3badf9/oauth/callback';
const NEW_URL = 'https://chat.openai.com/aip/g-369c00bd47b6f501275b414d19d5244ac411097b/oauth/callback';

async function updateOAuthUrls() {
  console.log('üîÑ MISE √Ä JOUR DES URLS OAUTH CHATGPT');
  console.log('=====================================\n');

  try {
    // 1. V√©rifier que la table oauth_clients existe
    console.log('1Ô∏è‚É£ V√©rification de la table oauth_clients...');
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'oauth_clients');

    if (tablesError || tables.length === 0) {
      console.error('‚ùå Table oauth_clients non trouv√©e');
      console.error('Ex√©cutez d\'abord la migration OAuth: supabase/migrations/20241220000000_create_oauth_system.sql');
      process.exit(1);
    }
    console.log('‚úÖ Table oauth_clients trouv√©e');

    // 2. R√©cup√©rer le client OAuth ChatGPT
    console.log('\n2Ô∏è‚É£ R√©cup√©ration du client OAuth ChatGPT...');
    const { data: client, error: clientError } = await supabase
      .from('oauth_clients')
      .select('*')
      .eq('client_id', 'scrivia-custom-gpt')
      .single();

    if (clientError || !client) {
      console.error('‚ùå Client OAuth ChatGPT non trouv√©');
      console.error('Ex√©cutez d\'abord: node scripts/setup-chatgpt-oauth.js');
      process.exit(1);
    }

    console.log('‚úÖ Client OAuth ChatGPT trouv√©:');
    console.log('   ID:', client.id);
    console.log('   Nom:', client.name);
    console.log('   URLs actuelles:', client.redirect_uris.join(', '));

    // 3. V√©rifier si la mise √† jour est n√©cessaire
    if (client.redirect_uris.includes(NEW_URL)) {
      console.log('\n‚úÖ URLs d√©j√† √† jour !');
      console.log('   Nouvelle URL:', NEW_URL);
      return;
    }

    // 4. Mettre √† jour les URLs
    console.log('\n3Ô∏è‚É£ Mise √† jour des URLs...');
    const updatedUris = client.redirect_uris.map(uri => 
      uri === OLD_URL ? NEW_URL : uri
    );

    const { error: updateError } = await supabase
      .from('oauth_clients')
      .update({ 
        redirect_uris: updatedUris,
        updated_at: new Date().toISOString()
      })
      .eq('client_id', 'scrivia-custom-gpt');

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour:', updateError.message);
      process.exit(1);
    }

    console.log('‚úÖ URLs mises √† jour avec succ√®s !');
    console.log('   Ancienne URL:', OLD_URL);
    console.log('   Nouvelle URL:', NEW_URL);
    console.log('   URLs finales:', updatedUris.join(', '));

    // 5. V√©rification finale
    console.log('\n4Ô∏è‚É£ V√©rification finale...');
    const { data: finalClient, error: finalError } = await supabase
      .from('oauth_clients')
      .select('redirect_uris')
      .eq('client_id', 'scrivia-custom-gpt')
      .single();

    if (finalError || !finalClient) {
      console.error('‚ùå Erreur v√©rification finale:', finalError?.message);
      process.exit(1);
    }

    console.log('‚úÖ V√©rification r√©ussie:');
    console.log('   URLs finales:', finalClient.redirect_uris.join(', '));

    console.log('\nüéØ PROCHAINES √âTAPES:');
    console.log('1. Tester la configuration: node scripts/test-chatgpt-oauth.js');
    console.log('2. V√©rifier que ChatGPT utilise la nouvelle URL');
    console.log('3. Tester le flux OAuth complet');

    console.log('\n‚úÖ Mise √† jour des URLs OAuth termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// Ex√©cuter le script
updateOAuthUrls().catch(console.error);
