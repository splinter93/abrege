/**
 * Script pour lier le serveur MCP Scrivia √† un agent
 * Permet aux agents d'acc√©der aux donn√©es Scrivia via MCP avec JWT dynamique
 */

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

/**
 * Lier le serveur MCP Scrivia √† un agent
 */
async function linkScriviaMcpToAgent(agentSlugOrId: string, priority: number = 0) {
  console.log('üîó Liaison du serveur MCP Scrivia √† un agent\n');

  try {
    // 1. R√©cup√©rer le serveur MCP Scrivia
    console.log('üì° Recherche du serveur MCP Scrivia...');
    const { data: mcpServer, error: mcpError } = await supabase
      .from('mcp_servers')
      .select('*')
      .eq('name', 'Scrivia API')
      .single();

    if (mcpError || !mcpServer) {
      console.error('‚ùå Serveur MCP Scrivia non trouv√©');
      console.log('');
      console.log('üí° Pour cr√©er le serveur MCP Scrivia, ex√©cutez :');
      console.log('   npx tsx scripts/create-scrivia-mcp.ts');
      return;
    }

    console.log(`‚úÖ Serveur MCP Scrivia trouv√©: ${mcpServer.id}`);
    console.log(`   URL: ${mcpServer.url}`);
    console.log(`   Header: ${mcpServer.header}`);
    console.log('');

    // 2. R√©cup√©rer l'agent
    console.log(`ü§ñ Recherche de l'agent: ${agentSlugOrId}...`);
    
    // Essayer d'abord par slug, puis par ID
    let agent;
    const { data: agentBySlug } = await supabase
      .from('agents')
      .select('*')
      .eq('slug', agentSlugOrId)
      .single();

    if (agentBySlug) {
      agent = agentBySlug;
    } else {
      const { data: agentById } = await supabase
        .from('agents')
        .select('*')
        .eq('id', agentSlugOrId)
        .single();
      
      if (agentById) {
        agent = agentById;
      }
    }

    if (!agent) {
      console.error(`‚ùå Agent non trouv√©: ${agentSlugOrId}`);
      console.log('');
      console.log('üí° Agents disponibles :');
      
      const { data: agents } = await supabase
        .from('agents')
        .select('id, name, slug, display_name')
        .limit(10);

      if (agents && agents.length > 0) {
        agents.forEach(a => {
          console.log(`   - ${a.display_name || a.name} (slug: ${a.slug || 'N/A'}, id: ${a.id})`);
        });
      }
      return;
    }

    console.log(`‚úÖ Agent trouv√©: ${agent.display_name || agent.name}`);
    console.log(`   ID: ${agent.id}`);
    console.log('');

    // 3. V√©rifier si la liaison existe d√©j√†
    console.log('üîç V√©rification de la liaison existante...');
    const { data: existingLink } = await supabase
      .from('agent_mcp_servers')
      .select('*')
      .eq('agent_id', agent.id)
      .eq('mcp_server_id', mcpServer.id)
      .single();

    if (existingLink) {
      console.log('‚ö†Ô∏è  La liaison existe d√©j√† !');
      console.log(`   Priorit√©: ${existingLink.priority}`);
      console.log(`   Active: ${existingLink.is_active}`);
      console.log('');
      console.log('üí° Pour supprimer la liaison :');
      console.log(`   DELETE FROM agent_mcp_servers WHERE id = '${existingLink.id}';`);
      return;
    }

    // 4. Cr√©er la liaison
    console.log('‚ú® Cr√©ation de la liaison...');
    const { data: link, error: linkError } = await supabase
      .from('agent_mcp_servers')
      .insert({
        agent_id: agent.id,
        mcp_server_id: mcpServer.id,
        priority: priority,
        is_active: true
      })
      .select()
      .single();

    if (linkError) {
      console.error('‚ùå Erreur lors de la cr√©ation de la liaison:', linkError);
      return;
    }

    console.log('‚úÖ Liaison cr√©√©e avec succ√®s !');
    console.log('');
    console.log('üìä D√©tails de la liaison :');
    console.log(`   ID: ${link.id}`);
    console.log(`   Agent: ${agent.display_name || agent.name}`);
    console.log(`   Serveur MCP: ${mcpServer.name}`);
    console.log(`   Priorit√©: ${link.priority}`);
    console.log(`   Active: ${link.is_active}`);
    console.log('');
    console.log('üéâ L\'agent peut maintenant utiliser le serveur MCP Scrivia !');
    console.log('   Le JWT de l\'utilisateur sera automatiquement inject√© lors des appels.');
    console.log('');
    console.log('üí° Capacit√©s disponibles via MCP Scrivia :');
    console.log('   - Cr√©er, lire, mettre √† jour, supprimer des notes');
    console.log('   - G√©rer les classeurs et dossiers');
    console.log('   - Rechercher dans le contenu');
    console.log('   - Ex√©cuter d\'autres agents sp√©cialis√©s');
    console.log('   - Acc√©der au profil utilisateur');

  } catch (error) {
    console.error('‚ùå Erreur:', error);
    if (error instanceof Error) {
      console.error('   Message:', error.message);
    }
  }
}

/**
 * Lister tous les agents et leurs serveurs MCP
 */
async function listAgentsWithMcp() {
  console.log('üìã Liste des agents avec leurs serveurs MCP\n');

  try {
    const { data: agents, error } = await supabase
      .from('agents')
      .select(`
        id,
        name,
        slug,
        display_name,
        is_active,
        agent_mcp_servers (
          priority,
          is_active,
          mcp_servers (
            name,
            url
          )
        )
      `)
      .eq('is_active', true)
      .order('name');

    if (error) {
      console.error('‚ùå Erreur:', error);
      return;
    }

    if (!agents || agents.length === 0) {
      console.log('‚ÑπÔ∏è  Aucun agent trouv√©');
      return;
    }

    for (const agent of agents) {
      const mcpCount = agent.agent_mcp_servers?.length || 0;
      console.log(`ü§ñ ${agent.display_name || agent.name}`);
      console.log(`   Slug: ${agent.slug || 'N/A'}`);
      console.log(`   ID: ${agent.id}`);
      console.log(`   Serveurs MCP: ${mcpCount}`);
      
      if (mcpCount > 0) {
        agent.agent_mcp_servers.forEach((link: any) => {
          if (link.mcp_servers) {
            console.log(`      - ${link.mcp_servers.name} (priorit√©: ${link.priority})`);
          }
        });
      }
      console.log('');
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  }
}

// Ex√©cuter selon les arguments
const command = process.argv[2];
const agentSlugOrId = process.argv[3];
const priority = parseInt(process.argv[4] || '0', 10);

if (command === 'link' && agentSlugOrId) {
  linkScriviaMcpToAgent(agentSlugOrId, priority);
} else if (command === 'list') {
  listAgentsWithMcp();
} else {
  console.log('üìñ Usage:');
  console.log('');
  console.log('  Lier le serveur MCP Scrivia √† un agent :');
  console.log('    npx tsx scripts/link-scrivia-mcp-to-agent.ts link <agent-slug-or-id> [priority]');
  console.log('');
  console.log('  Lister tous les agents et leurs serveurs MCP :');
  console.log('    npx tsx scripts/link-scrivia-mcp-to-agent.ts list');
  console.log('');
  console.log('  Exemples :');
  console.log('    npx tsx scripts/link-scrivia-mcp-to-agent.ts link research-agent');
  console.log('    npx tsx scripts/link-scrivia-mcp-to-agent.ts link abc123-def456-ghi789 5');
  console.log('    npx tsx scripts/link-scrivia-mcp-to-agent.ts list');
}

