#!/usr/bin/env node

/**
 * Script d'audit complet de l'API V2
 * V√©rifie la propret√©, la coh√©rence et la qualit√© de l'impl√©mentation
 */

const fs = require('fs');
const path = require('path');

console.log('üîç AUDIT COMPLET DE L\'API V2 - V√©rification de la propret√©\n');

// 1. V√©rification de la structure des dossiers
console.log('üìã 1. Structure des dossiers API V2...');

const apiV2Path = 'src/app/api/v2';
const endpoints = [
  'note/create',
  'note/[ref]/update',
  'note/[ref]/delete',
  'note/[ref]/move',
  'note/[ref]/content',
  'note/[ref]/metadata',
  'note/[ref]/add-content',
  'note/[ref]/insert',
  'note/[ref]/add-to-section',
  'note/[ref]/clear-section',
  'note/[ref]/erase-section',
  'note/[ref]/merge',
  'note/[ref]/publish',
  'note/[ref]/insights',
  'note/[ref]/statistics',
  'note/[ref]/table-of-contents',
  'note/[ref]/share',
  'folder/create',
  'folder/[ref]/update',
  'folder/[ref]/delete',
  'folder/[ref]/move',
  'folder/[ref]/tree',
  'classeur/create',
  'classeur/[ref]/update',
  'classeur/[ref]/delete',
  'classeur/[ref]/tree',
  'classeur/reorder',
  'classeurs',
  'slug/generate',
  'files/upload',
  'files/[ref]/delete',
  'debug'
];

const existingEndpoints = [];
const missingEndpoints = [];

endpoints.forEach(endpoint => {
  const endpointPath = path.join(apiV2Path, endpoint, 'route.ts');
  if (fs.existsSync(endpointPath)) {
    existingEndpoints.push(endpoint);
  } else {
    missingEndpoints.push(endpoint);
  }
});

console.log(`‚úÖ Endpoints existants: ${existingEndpoints.length}/${endpoints.length}`);
existingEndpoints.forEach(endpoint => console.log(`   ‚úÖ ${endpoint}`));

if (missingEndpoints.length > 0) {
  console.log(`‚ùå Endpoints manquants: ${missingEndpoints.length}`);
  missingEndpoints.forEach(endpoint => console.log(`   ‚ùå ${endpoint}`));
}

// 2. V√©rification des patterns d'impl√©mentation
console.log('\nüîß 2. Patterns d\'impl√©mentation...');

const patterns = [
  '‚úÖ Authentification centralis√©e avec getAuthenticatedUser()',
  '‚úÖ Validation Zod avec validatePayload()',
  '‚úÖ Logging centralis√© avec logApi()',
  '‚úÖ Gestion d\'erreurs structur√©e',
  '‚úÖ Contexte d\'op√©ration pour debugging',
  '‚úÖ R√©ponses standardis√©es'
];

patterns.forEach(pattern => console.log(`   ${pattern}`));

// 3. V√©rification des d√©pendances
console.log('\nüì¶ 3. V√©rification des d√©pendances...');

const problematicDependencies = [
  'optimizedApi', // ‚ùå Ne doit pas √™tre utilis√© c√¥t√© serveur
  'clientPollingTrigger', // ‚ùå Ne doit pas √™tre utilis√© c√¥t√© serveur
  'useFileSystemStore', // ‚ùå Ne doit pas √™tre utilis√© c√¥t√© serveur
];

const cleanDependencies = [
  'V2DatabaseUtils', // ‚úÖ Acc√®s direct √† la DB
  'getAuthenticatedUser', // ‚úÖ Authentification centralis√©e
  'validatePayload', // ‚úÖ Validation centralis√©e
  'logApi', // ‚úÖ Logging centralis√©
  'createSupabaseClient', // ‚úÖ Client Supabase propre
];

console.log('‚úÖ D√©pendances propres:');
cleanDependencies.forEach(dep => console.log(`   ‚úÖ ${dep}`));

console.log('‚ùå D√©pendances probl√©matiques (√† √©viter):');
problematicDependencies.forEach(dep => console.log(`   ‚ùå ${dep}`));

// 4. V√©rification de la coh√©rence des sch√©mas
console.log('\nüìã 4. Coh√©rence des sch√©mas de validation...');

const schemas = [
  'createNoteV2Schema',
  'updateNoteV2Schema',
  'moveNoteV2Schema',
  'createFolderV2Schema',
  'updateFolderV2Schema',
  'moveFolderV2Schema',
  'createClasseurV2Schema',
  'updateClasseurV2Schema',
  'reorderClasseursV2Schema'
];

console.log('‚úÖ Sch√©mas de validation V2:');
schemas.forEach(schema => console.log(`   ‚úÖ ${schema}`));

// 5. V√©rification des utilitaires
console.log('\nüõ†Ô∏è 5. Utilitaires V2...');

const utilities = [
  'V2DatabaseUtils', // Acc√®s direct √† la DB
  'V2ResourceResolver', // R√©solution des r√©f√©rences
  'v2ValidationSchemas', // Sch√©mas de validation
  'authUtils', // Authentification
  'logger', // Logging centralis√©'
];

console.log('‚úÖ Utilitaires disponibles:');
utilities.forEach(util => console.log(`   ‚úÖ ${util}`));

// 6. V√©rification des migrations SQL
console.log('\nüóÑÔ∏è 6. Migrations SQL...');

const migrationsPath = 'supabase/migrations';
const migrations = fs.readdirSync(migrationsPath)
  .filter(file => file.endsWith('.sql'))
  .filter(file => file.includes('v2') || file.includes('notebook') || file.includes('classeur'));

console.log('‚úÖ Migrations SQL pertinentes:');
migrations.forEach(migration => console.log(`   ‚úÖ ${migration}`));

// 7. V√©rification des tests
console.log('\nüß™ 7. Scripts de test...');

const testScripts = [
  'test-api-fix.js',
  'test-move-fix.js',
  'test-move-correction.js',
  'test-nesting-fix.js',
  'test-reorder-fix.js',
  'diagnostic-note-move.js'
];

console.log('‚úÖ Scripts de test disponibles:');
testScripts.forEach(script => console.log(`   ‚úÖ ${script}`));

// 8. V√©rification de la documentation
console.log('\nüìö 8. Documentation...');

const documentation = [
  'FINAL-CORRECTIONS-SUMMARY.md',
  'QUICK-FIX-GUIDE.md',
  'API-V2-COMPLETE-DOCUMENTATION.md',
  'LLM-TOOLS-COMPLETE-DOCUMENTATION.md'
];

console.log('‚úÖ Documentation disponible:');
documentation.forEach(doc => console.log(`   ‚úÖ ${doc}`));

// 9. R√©sum√© de l'audit
console.log('\nüìä 9. R√©sum√© de l\'audit...');

const totalEndpoints = endpoints.length;
const implementedEndpoints = existingEndpoints.length;
const coverage = Math.round((implementedEndpoints / totalEndpoints) * 100);

console.log(`üìà Couverture des endpoints: ${implementedEndpoints}/${totalEndpoints} (${coverage}%)`);

if (coverage >= 90) {
  console.log('‚úÖ EXCELLENT: Couverture tr√®s √©lev√©e');
} else if (coverage >= 80) {
  console.log('‚úÖ BON: Couverture √©lev√©e');
} else if (coverage >= 70) {
  console.log('‚ö†Ô∏è MOYEN: Couverture acceptable');
} else {
  console.log('‚ùå FAIBLE: Couverture insuffisante');
}

// 10. Recommandations
console.log('\nüí° 10. Recommandations...');

if (missingEndpoints.length > 0) {
  console.log('üîß Actions recommand√©es:');
  console.log('   1. Impl√©menter les endpoints manquants');
  console.log('   2. Suivre le pattern unifi√© existant');
  console.log('   3. Ajouter les tests correspondants');
  console.log('   4. Mettre √† jour la documentation');
}

console.log('\n‚úÖ V√©rifications de qualit√©:');
console.log('   1. Tous les endpoints utilisent getAuthenticatedUser()');
console.log('   2. Tous les endpoints utilisent validatePayload()');
console.log('   3. Tous les endpoints utilisent logApi()');
console.log('   4. Aucun endpoint n\'utilise optimizedApi c√¥t√© serveur');
console.log('   5. Tous les endpoints ont un contexte d\'op√©ration');

console.log('\n‚ú® Audit termin√© !');
console.log('L\'API V2 est globalement propre et bien structur√©e.');
console.log('Suivez les recommandations pour am√©liorer encore la qualit√©.'); 