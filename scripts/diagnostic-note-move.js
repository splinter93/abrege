#!/usr/bin/env node

/**
 * Script de diagnostic pour le probl√®me de d√©placement des notes
 * V√©rifie la coh√©rence entre la base de donn√©es et l'interface
 */

console.log('üîç Diagnostic du probl√®me de d√©placement des notes...\n');

// 1. Analyse du probl√®me
console.log('üìã 1. Analyse du probl√®me...');

const problem = [
  '‚ùå Note d√©plac√©e c√¥t√© serveur (‚úÖ dans les logs)',
  '‚ùå Note dispara√Æt de l\'interface',
  '‚ùå Note n\'appara√Æt pas dans le dossier de destination',
  '‚ùå Probl√®me de synchronisation DB ‚Üî Interface'
];

problem.forEach(item => console.log(`   ${item}`));

// 2. Causes possibles identifi√©es
console.log('\nüîç 2. Causes possibles identifi√©es...');

const causes = [
  'üîç Store Zustand: moveNote met √† jour folder_id mais pas classeur_id',
  'üîç Filtrage UI: notes.filter(n => n.classeur_id === classeurId && ...)',
  'üîç Coh√©rence DB: folder_id vs classeur_id dans la table articles',
  'üîç Rafra√Æchissement: L\'interface ne se met pas √† jour apr√®s le d√©placement'
];

causes.forEach(cause => console.log(`   ${cause}`));

// 3. V√©rifications √† effectuer
console.log('\nüîß 3. V√©rifications √† effectuer...');

const verifications = [
  '‚úÖ V√©rifier que la note a le bon folder_id dans la DB',
  '‚úÖ V√©rifier que la note a le bon classeur_id dans la DB',
  '‚úÖ V√©rifier que le store Zustand est bien mis √† jour',
  '‚úÖ V√©rifier que l\'interface se rafra√Æchit correctement',
  '‚úÖ V√©rifier que le filtrage fonctionne avec les bonnes donn√©es'
];

verifications.forEach(verif => console.log(`   ${verif}`));

// 4. Solutions propos√©es
console.log('\nüí° 4. Solutions propos√©es...');

const solutions = [
  'üîß Corriger moveNote pour mettre √† jour classeur_id aussi',
  'üîß Forcer le rafra√Æchissement de l\'interface apr√®s d√©placement',
  'üîß V√©rifier la coh√©rence des donn√©es dans la DB',
  'üîß Ajouter des logs de debug pour tracer le probl√®me',
  'üîß Tester avec un rechargement manuel de la page'
];

solutions.forEach(solution => console.log(`   ${solution}`));

// 5. Test de diagnostic
console.log('\nüß™ 5. Test de diagnostic...');
console.log('   1. Ouvrir la console du navigateur');
console.log('   2. Aller sur /private/dossiers');
console.log('   3. S√©lectionner un classeur');
console.log('   4. Cr√©er un dossier "Test"');
console.log('   5. Cr√©er une note "Note test"');
console.log('   6. Faire glisser la note dans le dossier');
console.log('   7. V√©rifier dans la console:');
console.log('      - store.getState().notes[noteId]');
console.log('      - folder_id et classeur_id de la note');
console.log('   8. V√©rifier dans la DB:');
console.log('      - SELECT * FROM articles WHERE id = \'noteId\'');
console.log('      - folder_id et classeur_id');

// 6. Commandes de debug
console.log('\nüêõ 6. Commandes de debug...');
console.log('   // Dans la console du navigateur:');
console.log('   const store = useFileSystemStore.getState();');
console.log('   console.log(\'Notes:\', store.notes);');
console.log('   console.log(\'Folders:\', store.folders);');
console.log('   console.log(\'Classeurs:\', store.classeurs);');
console.log('   // V√©rifier une note sp√©cifique:');
console.log('   const note = store.notes[\'noteId\'];');
console.log('   console.log(\'Note:\', note);');
console.log('   console.log(\'folder_id:\', note.folder_id);');
console.log('   console.log(\'classeur_id:\', note.classeur_id);');

console.log('\n‚ú® Diagnostic termin√© !');
console.log('Suivez les √©tapes de test pour identifier la cause exacte du probl√®me.'); 