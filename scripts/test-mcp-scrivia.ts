/**
 * Script de test pour v√©rifier la configuration du serveur MCP Scrivia
 * V√©rifie que le JWT est correctement inject√© dans les headers
 */

import { mcpConfigService } from '../src/services/llm/mcpConfigService';

async function testMcpScriviaConfig() {
  console.log('üß™ Test de configuration MCP Scrivia\n');

  try {
    // Simuler un agentId et un userToken
    const testAgentId = 'test-agent-id';
    const testUserToken = 'test-jwt-token-123';
    
    // Outils OpenAPI de test
    const testOpenApiTools = [
      {
        type: 'function' as const,
        function: {
          name: 'test_tool',
          description: 'Outil de test',
          parameters: {}
        }
      }
    ];

    console.log('üìã Configuration de test:');
    console.log(`   Agent ID: ${testAgentId}`);
    console.log(`   User Token: ${testUserToken.substring(0, 20)}...`);
    console.log('');

    // R√©cup√©rer la configuration MCP pour l'agent
    const mcpConfig = await mcpConfigService.getAgentMcpConfig(testAgentId);
    
    if (!mcpConfig) {
      console.log('‚ÑπÔ∏è  Aucun serveur MCP configur√© pour cet agent de test');
      console.log('');
      console.log('üí° Pour tester avec un vrai agent:');
      console.log('   1. Cr√©ez ou s√©lectionnez un agent dans la base de donn√©es');
      console.log('   2. Liez-le au serveur MCP Scrivia via agent_mcp_servers');
      console.log('   3. Relancez ce script avec le bon agent_id');
      return;
    }

    console.log(`‚úÖ Configuration MCP trouv√©e: ${mcpConfig.servers.length} serveur(s)`);
    console.log('');

    // Tester la construction des tools hybrides
    const hybridTools = await mcpConfigService.buildHybridTools(
      testAgentId,
      testUserToken,
      testOpenApiTools
    );

    console.log(`üì¶ Tools hybrides g√©n√©r√©s: ${hybridTools.length} au total`);
    console.log('');

    // Analyser les serveurs MCP
    const mcpServers = hybridTools.filter(t => t.type === 'mcp');
    const openApiToolsCount = hybridTools.filter(t => t.type === 'function').length;

    console.log(`   üîß OpenAPI tools: ${openApiToolsCount}`);
    console.log(`   üåê MCP servers: ${mcpServers.length}`);
    console.log('');

    // V√©rifier l'injection du JWT
    let scriviaFound = false;
    for (const server of mcpServers) {
      if ('server_label' in server && 'headers' in server) {
        console.log(`üì° Serveur MCP: ${server.server_label}`);
        console.log(`   URL: ${server.server_url}`);
        
        if (server.headers) {
          console.log('   Headers:');
          for (const [key, value] of Object.entries(server.headers)) {
            const displayValue = value.includes('Bearer') 
              ? `Bearer ${testUserToken}... ‚úÖ (JWT inject√©)`
              : value;
            console.log(`      ${key}: ${displayValue}`);
            
            if (value === `Bearer ${testUserToken}`) {
              scriviaFound = true;
            }
          }
        }
        console.log('');
      }
    }

    if (scriviaFound) {
      console.log('‚úÖ Le JWT a √©t√© correctement inject√© dans le serveur MCP Scrivia !');
    } else {
      console.log('‚ö†Ô∏è  Aucun serveur MCP Scrivia avec JWT inject√© trouv√©');
      console.log('   V√©rifiez que le serveur est li√© √† l\'agent et que api_key = "{{USER_JWT}}"');
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    if (error instanceof Error) {
      console.error('   Message:', error.message);
      console.error('   Stack:', error.stack);
    }
  }
}

// Ex√©cuter le test
testMcpScriviaConfig();

