#!/usr/bin/env node

// Charger les variables d'environnement depuis .env.local
require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('   NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.error('   SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkFoldersStructure() {
  try {
    console.log('üîç V√âRIFICATION DE LA STRUCTURE DE LA TABLE FOLDERS');
    console.log('===================================================');
    
    // 1. V√©rifier la configuration
    console.log('\nüìã Configuration:');
    console.log('   URL Supabase:', supabaseUrl);
    console.log('   Service Role Key:', supabaseServiceKey ? `${supabaseServiceKey.substring(0, 20)}...` : '‚ùå Manquante');
    
    // 2. Tester la connexion
    console.log('\nüîå Test de connexion...');
    try {
      const { data, error } = await supabase
        .from('folders')
        .select('*')
        .limit(0);
      
      if (error) {
        console.log('‚ùå Erreur de connexion:', error.message);
        return;
      }
      console.log('‚úÖ Connexion Supabase OK');
    } catch (e) {
      console.log('‚ùå Erreur de connexion:', e.message);
      return;
    }
    
    // 3. Essayer de r√©cup√©rer la structure via une requ√™te vide
    console.log('\nüìä Structure de la table (m√©thode 1: select vide)...');
    try {
      const { data, error } = await supabase
        .from('folders')
        .select('*')
        .limit(0);
      
      if (error) {
        console.log('‚ùå Erreur r√©cup√©ration structure:', error.message);
      } else {
        console.log('‚úÖ Structure accessible via select vide');
        console.log('   Type de data:', typeof data);
        console.log('   Data:', data);
        if (data && typeof data === 'object') {
          console.log('   Cl√©s disponibles:', Object.keys(data));
        }
      }
    } catch (e) {
      console.log('‚ùå Erreur m√©thode 1:', e.message);
    }
    
    // 4. Essayer de r√©cup√©rer une ligne existante
    console.log('\nüìä Structure de la table (m√©thode 2: premi√®re ligne)...');
    try {
      const { data, error } = await supabase
        .from('folders')
        .select('*')
        .limit(1);
      
      if (error) {
        console.log('‚ùå Erreur r√©cup√©ration premi√®re ligne:', error.message);
      } else {
        console.log('‚úÖ Premi√®re ligne r√©cup√©r√©e');
        if (data && data.length > 0) {
          const firstRow = data[0];
          console.log('   Colonnes disponibles:', Object.keys(firstRow));
          console.log('   Types des colonnes:');
          Object.entries(firstRow).forEach(([key, value]) => {
            console.log(`     - ${key}: ${typeof value} (${value})`);
          });
        } else {
          console.log('   Aucune donn√©e dans la table');
        }
      }
    } catch (e) {
      console.log('‚ùå Erreur m√©thode 2:', e.message);
    }
    
    // 5. Essayer d'ins√©rer avec des colonnes minimales
    console.log('\nüß™ Test insertion avec colonnes minimales...');
    try {
      // R√©cup√©rer un utilisateur
      const { data: { users }, error: usersError } = await supabase.auth.admin.listUsers();
      
      if (usersError || !users.users.length) {
        console.log('‚ö†Ô∏è Aucun utilisateur trouv√© pour le test');
      } else {
        const testUser = users.users[0];
        console.log(`üë§ Utilisateur de test: ${testUser.email}`);
        
        // Essayer avec juste name et user_id
        const testFolder = {
          name: `Test Structure - ${new Date().toISOString()}`,
          user_id: testUser.id
        };
        
        console.log('üì¶ Donn√©es du dossier de test:', testFolder);
        
        const { data: newFolder, error: createError } = await supabase
          .from('folders')
          .insert([testFolder])
          .select('*')
          .single();
        
        if (createError) {
          console.log('‚ùå Erreur cr√©ation dossier:', createError.message);
          
          if (createError.message.includes('column')) {
            console.log('\nüö® PROBL√àME DE STRUCTURE D√âTECT√â');
            console.log('==================================');
            console.log('La table folders n\'a pas les colonnes attendues.');
            console.log('');
            console.log('üîß SOLUTIONS:');
            console.log('1. V√©rifier la structure r√©elle de la table');
            console.log('2. Adapter le code √† la vraie structure');
            console.log('3. Ou migrer la table vers la structure attendue');
          }
        } else {
          console.log(`‚úÖ Cr√©ation dossier OK:`, newFolder);
          
          // Nettoyer
          try {
            await supabase
              .from('folders')
              .delete()
              .eq('id', newFolder.id);
            console.log('üßπ Dossier de test supprim√©');
          } catch (cleanupError) {
            console.log('‚ö†Ô∏è Impossible de supprimer:', cleanupError.message);
          }
        }
      }
    } catch (e) {
      console.log('‚ùå Erreur test insertion:', e.message);
    }
    
    // 6. V√©rifier les migrations existantes
    console.log('\nüìã V√©rification des migrations...');
    try {
      const { data: migrations, error: migrationsError } = await supabase
        .from('supabase_migrations.schema_migrations')
        .select('*')
        .order('version', { ascending: false })
        .limit(10);
      
      if (migrationsError) {
        console.log('‚ö†Ô∏è Impossible de r√©cup√©rer les migrations:', migrationsError.message);
      } else {
        console.log('üìä Derni√®res migrations:');
        migrations.forEach(migration => {
          console.log(`   - ${migration.version}: ${migration.name}`);
        });
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Impossible de v√©rifier les migrations:', e.message);
    }
    
    console.log('\nüéâ V√âRIFICATION STRUCTURE TERMIN√âE');
    console.log('====================================');
    console.log('üìã R√©sum√©:');
    console.log('   - Si structure OK: Adapter le code');
    console.log('   - Si colonnes manquantes: Cr√©er une migration');
    console.log('   - Si erreur RLS: D√©sactiver RLS dans le dashboard');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
    process.exit(1);
  }
}

// Ex√©cuter le script
checkFoldersStructure().catch(console.error); 