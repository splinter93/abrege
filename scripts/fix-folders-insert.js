#!/usr/bin/env node

// Charger les variables d'environnement depuis .env.local
require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('   NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.error('   SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixFoldersInsert() {
  try {
    console.log('üîß CORRECTION CR√âATION DE DOSSIERS - STRUCTURE CORRECTE');
    console.log('========================================================');
    
    // 1. V√©rifier la configuration
    console.log('\nüìã Configuration:');
    console.log('   URL Supabase:', supabaseUrl);
    console.log('   Service Role Key:', supabaseServiceKey ? `${supabaseServiceKey.substring(0, 20)}...` : '‚ùå Manquante');
    
    // 2. R√©cup√©rer un utilisateur
    console.log('\nüë• R√©cup√©ration des utilisateurs...');
    try {
      const { data, error: usersError } = await supabase.auth.admin.listUsers();
      
      if (usersError || !data || !data.users || !data.users.length) {
        console.log('‚ö†Ô∏è Aucun utilisateur trouv√© pour le test');
        console.log('   Erreur:', usersError?.message || 'Donn√©es invalides');
        return;
      }
      
      const testUser = data.users[0];
      console.log(`üë§ Utilisateur de test: ${testUser.email} (${testUser.id})`);
      
      // 3. R√©cup√©rer un classeur existant
      console.log('\nüìö R√©cup√©ration d\'un classeur...');
      try {
        const { data: classeurs, error: classeursError } = await supabase
          .from('classeurs')
          .select('id, name')
          .eq('user_id', testUser.id)
          .limit(1);
        
        if (classeursError || !classeurs.length) {
          console.log('‚ö†Ô∏è Aucun classeur trouv√©, cr√©ation d\'un classeur de test...');
          
          const testClasseur = {
            name: 'Classeur de Test',
            user_id: testUser.id,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          };
          
          const { data: newClasseur, error: createClasseurError } = await supabase
            .from('classeurs')
            .insert([testClasseur])
            .select('id, name')
            .single();
          
          if (createClasseurError) {
            console.log('‚ùå Impossible de cr√©er un classeur de test:', createClasseurError.message);
            return;
          }
          
          console.log(`‚úÖ Classeur de test cr√©√©: ${newClasseur.name} (${newClasseur.id})`);
          const testClasseurId = newClasseur.id;
          
          // Continuer avec la cr√©ation du dossier
          await createTestFolder(testUser, testClasseurId, true);
          
        } else {
          const testClasseur = classeurs[0];
          console.log(`üìö Classeur de test: ${testClasseur.name} (${testClasseur.id})`);
          
          // Continuer avec la cr√©ation du dossier
          await createTestFolder(testUser, testClasseur.id, false);
        }
        
      } catch (e) {
        console.log('‚ùå Erreur r√©cup√©ration classeur:', e.message);
      }
      
    } catch (e) {
      console.log('‚ùå Erreur r√©cup√©ration utilisateurs:', e.message);
    }
    
    console.log('\nüéâ CORRECTION STRUCTURE TERMIN√âE');
    console.log('==================================');
    console.log('üìã R√©sum√©:');
    console.log('   - Si cr√©ation OK: Le probl√®me √©tait la structure, pas RLS');
    console.log('   - Si erreur RLS: D√©sactiver RLS dans le dashboard');
    console.log('   - Si autre erreur: V√©rifier les colonnes manquantes');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error);
    process.exit(1);
  }
}

async function createTestFolder(testUser, classeurId, isTestClasseur) {
  // 4. Tester la cr√©ation avec la structure correcte
  console.log('\nüß™ Test cr√©ation avec structure correcte...');
  
  const testFolder = {
    name: `Test Structure Fix - ${new Date().toISOString()}`,
    user_id: testUser.id,
    classeur_id: classeurId,
    created_at: new Date().toISOString(),
    position: 0,
    slug: `test-structure-fix-${Date.now()}`
  };
  
  console.log('üì¶ Donn√©es du dossier de test (structure correcte):');
  console.log(JSON.stringify(testFolder, null, 2));
  
  const { data: newFolder, error: createError } = await supabase
    .from('folders')
    .insert([testFolder])
    .select('*')
    .single();
  
  if (createError) {
    console.log('‚ùå Erreur cr√©ation dossier:', createError.message);
    
    if (createError.message.includes('RLS')) {
      console.log('\nüö® PROBL√àME RLS CONFIRM√â');
      console.log('==========================');
      console.log('La cr√©ation est bloqu√©e par RLS malgr√© la structure correcte.');
      console.log('');
      console.log('üîß SOLUTION: D√©sactiver RLS dans le dashboard Supabase');
      console.log('');
      console.log('üìã √âtapes:');
      console.log('1. Aller sur https://supabase.com/dashboard');
      console.log('2. S√©lectionner votre projet');
      console.log('3. Database > Tables > folders');
      console.log('4. Onglet RLS > D√©sactiver le toggle');
    } else if (createError.message.includes('column')) {
      console.log('\nüö® PROBL√àME DE STRUCTURE');
      console.log('========================');
      console.log('Il manque encore des colonnes.');
      console.log('Erreur:', createError.message);
    } else {
      console.log('\n‚ö†Ô∏è Autre type d\'erreur');
      console.log('Erreur:', createError.message);
    }
  } else {
    console.log(`‚úÖ Cr√©ation dossier OK!`);
    console.log('üìã Dossier cr√©√©:');
    console.log(JSON.stringify(newFolder, null, 2));
    
    // 5. Nettoyer le dossier de test
    console.log('\nüßπ Nettoyage du dossier de test...');
    try {
      const { error: deleteError } = await supabase
        .from('folders')
        .delete()
        .eq('id', newFolder.id);
      
      if (deleteError) {
        console.log('‚ö†Ô∏è Impossible de supprimer le dossier de test:', deleteError.message);
      } else {
        console.log('‚úÖ Dossier de test supprim√©');
      }
    } catch (cleanupError) {
      console.log('‚ö†Ô∏è Erreur lors de la suppression:', cleanupError.message);
    }
    
    // 6. Nettoyer le classeur de test si n√©cessaire
    if (isTestClasseur) {
      console.log('\nüßπ Nettoyage du classeur de test...');
      try {
        const { error: deleteClasseurError } = await supabase
          .from('classeurs')
          .delete()
          .eq('id', classeurId);
        
        if (deleteClasseurError) {
          console.log('‚ö†Ô∏è Impossible de supprimer le classeur de test:', deleteClasseurError.message);
        } else {
          console.log('‚úÖ Classeur de test supprim√©');
        }
      } catch (cleanupClasseurError) {
        console.log('‚ö†Ô∏è Erreur lors de la suppression du classeur:', cleanupClasseurError.message);
      }
    }
    
    // 7. Afficher la solution
    console.log('\nüéâ SUCC√àS! STRUCTURE CORRECTE IDENTIFI√âE');
    console.log('==========================================');
    console.log('‚úÖ La cr√©ation de dossiers fonctionne avec la structure correcte');
    console.log('‚úÖ Le probl√®me n\'√©tait PAS RLS mais la structure de la table');
    console.log('');
    console.log('üîß SOLUTION POUR L\'API V2:');
    console.log('Utiliser cette structure pour create_folder:');
    console.log(JSON.stringify({
      name: 'Nom du dossier',
      user_id: 'UUID de l\'utilisateur',
      classeur_id: 'UUID du classeur',
      created_at: 'ISO string',
      position: 0,
      slug: 'slug-du-dossier'
    }, null, 2));
    console.log('');
    console.log('‚ùå NE PAS UTILISER:');
    console.log('- updated_at (n\'existe pas)');
    console.log('- Autres colonnes non list√©es ci-dessus');
  }
}

// Ex√©cuter le script
fixFoldersInsert().catch(console.error); 