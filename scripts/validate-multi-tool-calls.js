#!/usr/bin/env node

/**
 * üß™ Script de Validation des Am√©liorations Multi Tool Calls
 * 
 * Ce script v√©rifie que toutes les am√©liorations ont √©t√© correctement impl√©ment√©es
 * et que le syst√®me peut g√©rer jusqu'√† 20 tool calls simultan√©s.
 */

const fs = require('fs');
const path = require('path');

// Couleurs pour la console
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

function logHeader(message) {
  log(`\n${colors.bright}${colors.cyan}${message}${colors.reset}`);
  log('‚îÄ'.repeat(message.length));
}

// Configuration des tests
const TESTS = {
  'MAX_TOOL_CALLS': {
    file: 'src/services/llm/groqGptOss120b.ts',
    pattern: /const MAX_TOOL_CALLS = (\d+);/,
    expected: 20,
    description: 'Limite des tool calls augment√©e √† 20'
  },
  'BATCH_EXECUTION': {
    file: 'src/services/llm/groqGptOss120b.ts',
    pattern: /ex√©cution par batch de \$\{MAX_TOOL_CALLS\}/,
    expected: true,
    description: 'Ex√©cution par batch impl√©ment√©e'
  },
  'ANTI_LOOP_TTL': {
    file: 'src/services/llm/toolCallManager.ts',
    pattern: /const TTL_MS = 5_000;/,
    expected: true,
    description: 'TTL anti-boucle r√©duit √† 5 secondes'
  },
  'TOOL_CALL_COUNT_WARNING': {
    file: 'src/components/chat/ToolCallMessage.tsx',
    pattern: /tool-call-count-warning/,
    expected: true,
    description: 'Indicateur de warning pour multiples tool calls'
  },
  'CSS_WARNING_STYLES': {
    file: 'src/components/chat/ToolCallMessage.css',
    pattern: /\.tool-call-count-warning/,
    expected: true,
    description: 'Styles CSS pour l\'indicateur de warning'
  },
  'TEST_COMPONENT': {
    file: 'src/components/test/TestMultiToolCalls.tsx',
    pattern: /TestMultiToolCalls/,
    expected: true,
    description: 'Composant de test cr√©√©'
  },
  'TEST_PAGE': {
    file: 'src/app/test-multi-tool-calls/page.tsx',
    pattern: /TestMultiToolCalls/,
    expected: true,
    description: 'Page de test cr√©√©e'
  },
  'ENHANCED_LOGGING': {
    file: 'src/services/llm/groqGptOss120b.ts',
    pattern: /Statistiques des tool calls/,
    expected: true,
    description: 'Logging d√©taill√© des statistiques'
  }
};

// Fonction de validation principale
function validateMultiToolCalls() {
  logHeader('üß™ VALIDATION DES AM√âLIORATIONS MULTI TOOL CALLS');
  
  let totalTests = 0;
  let passedTests = 0;
  let failedTests = 0;
  
  for (const [testName, test] of Object.entries(TESTS)) {
    totalTests++;
    logInfo(`\nTest: ${test.description}`);
    
    try {
      // V√©rifier que le fichier existe
      if (!fs.existsSync(test.file)) {
        logError(`Fichier non trouv√©: ${test.file}`);
        failedTests++;
        continue;
      }
      
      // Lire le contenu du fichier
      const content = fs.readFileSync(test.file, 'utf8');
      
      // Ex√©cuter le test
      const result = executeTest(test, content);
      
      if (result.success) {
        logSuccess(`${testName}: ${result.message}`);
        passedTests++;
      } else {
        logError(`${testName}: ${result.message}`);
        failedTests++;
      }
      
    } catch (error) {
      logError(`${testName}: Erreur lors de la validation - ${error.message}`);
      failedTests++;
    }
  }
  
  // R√©sum√© final
  logHeader('üìä R√âSUM√â DES TESTS');
  log(`Total des tests: ${totalTests}`, 'bright');
  log(`Tests r√©ussis: ${passedTests}`, 'green');
  log(`Tests √©chou√©s: ${failedTests}`, 'red');
  
  const successRate = ((passedTests / totalTests) * 100).toFixed(1);
  log(`Taux de succ√®s: ${successRate}%`, successRate >= 80 ? 'green' : 'yellow');
  
  if (failedTests === 0) {
    log('\nüéâ Tous les tests sont pass√©s ! Le syst√®me multi tool calls est pr√™t.', 'green');
    return true;
  } else {
    log('\n‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les impl√©mentations.', 'yellow');
    return false;
  }
}

// Fonction d'ex√©cution d'un test sp√©cifique
function executeTest(test, content) {
  const match = content.match(test.pattern);
  
  if (!match) {
    return {
      success: false,
      message: `Pattern non trouv√©: ${test.pattern}`
    };
  }
  
  if (test.expected === true) {
    // Test de pr√©sence
    return {
      success: true,
      message: 'Pattern trouv√© avec succ√®s'
    };
  } else if (typeof test.expected === 'number') {
    // Test de valeur num√©rique
    const actualValue = parseInt(match[1]);
    if (actualValue === test.expected) {
      return {
        success: true,
        message: `Valeur correcte: ${actualValue}`
      };
    } else {
      return {
        success: false,
        message: `Valeur attendue: ${test.expected}, trouv√©e: ${actualValue}`
      };
    }
  } else {
    // Test de pr√©sence simple
    return {
      success: true,
      message: 'Pattern trouv√© avec succ√®s'
    };
  }
}

// Fonction de v√©rification des d√©pendances
function checkDependencies() {
  logHeader('üîç V√âRIFICATION DES D√âPENDANCES');
  
  const requiredFiles = [
    'package.json',
    'src/services/llm/groqGptOss120b.ts',
    'src/services/llm/toolCallManager.ts',
    'src/components/chat/ToolCallMessage.tsx',
    'src/components/chat/ToolCallMessage.css'
  ];
  
  let missingFiles = 0;
  
  for (const file of requiredFiles) {
    if (fs.existsSync(file)) {
      logSuccess(`${file} - Pr√©sent`);
    } else {
      logError(`${file} - Manquant`);
      missingFiles++;
    }
  }
  
  if (missingFiles === 0) {
    logSuccess('Toutes les d√©pendances sont pr√©sentes');
  } else {
    logWarning(`${missingFiles} fichier(s) manquant(s)`);
  }
  
  return missingFiles === 0;
}

// Fonction de v√©rification de la structure du projet
function checkProjectStructure() {
  logHeader('üèóÔ∏è  V√âRIFICATION DE LA STRUCTURE DU PROJET');
  
  const projectRoot = process.cwd();
  logInfo(`Racine du projet: ${projectRoot}`);
  
  // V√©rifier la structure des dossiers
  const requiredDirs = [
    'src/services/llm',
    'src/components/chat',
    'src/components/test',
    'src/app/test-multi-tool-calls'
  ];
  
  let missingDirs = 0;
  
  for (const dir of requiredDirs) {
    if (fs.existsSync(dir)) {
      logSuccess(`${dir}/ - Pr√©sent`);
    } else {
      logError(`${dir}/ - Manquant`);
      missingDirs++;
    }
  }
  
  if (missingDirs === 0) {
    logSuccess('Structure du projet correcte');
  } else {
    logWarning(`${missingDirs} dossier(s) manquant(s)`);
  }
  
  return missingDirs === 0;
}

// Fonction principale
function main() {
  logHeader('üöÄ VALIDATION DU SYST√àME MULTI TOOL CALLS');
  log('Projet Abr√®ge - Am√©liorations Multi Tool Calls\n');
  
  try {
    // V√©rifications pr√©liminaires
    const depsOk = checkDependencies();
    const structureOk = checkProjectStructure();
    
    if (!depsOk || !structureOk) {
      logWarning('Probl√®mes d√©tect√©s dans les d√©pendances ou la structure');
      log('Continuer la validation...\n');
    }
    
    // Validation principale
    const validationOk = validateMultiToolCalls();
    
    // Recommandations
    logHeader('üí° RECOMMANDATIONS');
    
    if (validationOk) {
      logSuccess('Le syst√®me est pr√™t pour les tests en production');
      logInfo('1. Testez avec 5-10 tool calls pour valider le fonctionnement normal');
      logInfo('2. Testez avec 15-20 tool calls pour valider la limite');
      logInfo('3. Testez avec 25+ tool calls pour valider le mode batch');
      logInfo('4. Acc√©dez √† /test-multi-tool-calls pour les tests automatis√©s');
    } else {
      logWarning('Corrigez les tests √©chou√©s avant de passer en production');
      logInfo('1. V√©rifiez les impl√©mentations dans les fichiers modifi√©s');
      logInfo('2. Relancez la validation apr√®s correction');
      logInfo('3. Testez manuellement les fonctionnalit√©s');
    }
    
    log('\nüìö Documentation: AMELIORATIONS-MULTI-TOOL-CALLS.md');
    log('üß™ Page de test: /test-multi-tool-calls');
    
  } catch (error) {
    logError(`Erreur lors de la validation: ${error.message}`);
    process.exit(1);
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  main();
}

module.exports = {
  validateMultiToolCalls,
  checkDependencies,
  checkProjectStructure
}; 