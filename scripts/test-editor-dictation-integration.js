#!/usr/bin/env node

/**
 * Script de test pour v√©rifier l'int√©gration de la dict√©e vocale dans l'√©diteur
 * Teste que tous les composants sont bien connect√©s
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üé§ Test de l\'int√©gration de la dict√©e vocale dans l\'√©diteur\n');

// 1. V√©rifier que le composant AudioRecorder existe
console.log('1Ô∏è‚É£ V√©rification du composant AudioRecorder...');
const audioRecorderPath = path.join(__dirname, '../src/components/chat/AudioRecorder.tsx');
if (fs.existsSync(audioRecorderPath)) {
  console.log('‚úÖ AudioRecorder.tsx existe');
  
  const content = fs.readFileSync(audioRecorderPath, 'utf8');
  if (content.includes('variant?: \'chat\' | \'toolbar\'')) {
    console.log('‚úÖ Support du variant toolbar');
  } else {
    console.log('‚ùå Variant toolbar manquant');
  }
} else {
  console.log('‚ùå AudioRecorder.tsx manquant');
}

// 2. V√©rifier que EditorToolbar utilise AudioRecorder
console.log('\n2Ô∏è‚É£ V√©rification de EditorToolbar...');
const editorToolbarPath = path.join(__dirname, '../src/components/editor/EditorToolbar.tsx');
if (fs.existsSync(editorToolbarPath)) {
  console.log('‚úÖ EditorToolbar.tsx existe');
  
  const content = fs.readFileSync(editorToolbarPath, 'utf8');
  if (content.includes('import AudioRecorder')) {
    console.log('‚úÖ AudioRecorder import√©');
  } else {
    console.log('‚ùå AudioRecorder non import√©');
  }
  
  if (content.includes('variant="toolbar"')) {
    console.log('‚úÖ Variant toolbar configur√©');
  } else {
    console.log('‚ùå Variant toolbar non configur√©');
  }
} else {
  console.log('‚ùå EditorToolbar.tsx manquant');
}

// 3. V√©rifier que l'√©diteur principal utilise EditorToolbar
console.log('\n3Ô∏è‚É£ V√©rification de l\'√©diteur principal...');
const editorPath = path.join(__dirname, '../src/components/editor/Editor.tsx');
if (fs.existsSync(editorPath)) {
  console.log('‚úÖ Editor.tsx existe');
  
  const content = fs.readFileSync(editorPath, 'utf8');
  if (content.includes('handleTranscriptionComplete')) {
    console.log('‚úÖ Fonction handleTranscriptionComplete d√©finie');
  } else {
    console.log('‚ùå Fonction handleTranscriptionComplete manquante');
  }
  
  if (content.includes('onTranscriptionComplete={handleTranscriptionComplete}')) {
    console.log('‚úÖ handleTranscriptionComplete pass√©e √† EditorToolbar');
  } else {
    console.log('‚ùå handleTranscriptionComplete non pass√©e √† EditorToolbar');
  }
} else {
  console.log('‚ùå Editor.tsx manquant');
}

// 4. V√©rifier que les styles CSS existent
console.log('\n4Ô∏è‚É£ V√©rification des styles CSS...');
const cssPath = path.join(__dirname, '../src/components/editor/editor-toolbar.css');
if (fs.existsSync(cssPath)) {
  console.log('‚úÖ editor-toolbar.css existe');
  
  const content = fs.readFileSync(cssPath, 'utf8');
  if (content.includes('.toolbar-button.processing')) {
    console.log('‚úÖ Styles pour l\'√©tat processing');
  } else {
    console.log('‚ùå Styles pour l\'√©tat processing manquants');
  }
  
  if (content.includes('.toolbar-button.recording')) {
    console.log('‚úÖ Styles pour l\'√©tat recording');
  } else {
    console.log('‚ùå Styles pour l\'√©tat recording manquants');
  }
} else {
  console.log('‚ùå editor-toolbar.css manquant');
}

// 5. V√©rifier que la page de test existe
console.log('\n5Ô∏è‚É£ V√©rification de la page de test...');
const testPagePath = path.join(__dirname, '../src/app/test-editor-dictation/page.tsx');
if (fs.existsSync(testPagePath)) {
  console.log('‚úÖ Page de test existe');
} else {
  console.log('‚ùå Page de test manquante');
}

console.log('\nüéØ R√©sum√© de l\'int√©gration :');
console.log('La dict√©e vocale est maintenant int√©gr√©e dans l\'√©diteur principal !');
console.log('\nüìù Pour tester :');
console.log('1. Ouvrir une note existante ou en cr√©er une nouvelle');
console.log('2. Cliquer sur le bouton microphone üé§ dans la toolbar');
console.log('3. Parler dans le microphone');
console.log('4. Cliquer √† nouveau pour arr√™ter');
console.log('5. Le texte transcrit s\'ins√®re √† la position du curseur');
console.log('\nüîó Page de test : /test-editor-dictation');
console.log('üîó API Whisper : /api/v2/whisper/transcribe'); 