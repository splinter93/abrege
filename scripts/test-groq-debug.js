// üß™ Test Groq - Diagnostic des Probl√®mes
// Ce script diagnostique les probl√®mes avec l'int√©gration Groq

console.log('üß™ Diagnostic des probl√®mes avec Groq...\n');

// 1. V√©rifier les variables d'environnement
console.log('üìã 1. V√©rification des variables d\'environnement:');

const requiredEnvVars = [
  'GROQ_API_KEY',
  'NEXT_PUBLIC_SUPABASE_URL',
  'SUPABASE_SERVICE_ROLE_KEY'
];

requiredEnvVars.forEach(envVar => {
  const value = process.env[envVar];
  const status = value ? '‚úÖ' : '‚ùå';
  const displayValue = value ? `${value.substring(0, 10)}...` : 'Non d√©fini';
  console.log(`   ${status} ${envVar}: ${displayValue}`);
});

// 2. V√©rifier la logique de d√©tection dans l'API Route
console.log('\nüîß 2. Analyse de la logique de d√©tection:');

const apiRoutePath = 'src/app/api/chat/llm/route.ts';
const fs = require('fs');

try {
  const apiContent = fs.readFileSync(apiRoutePath, 'utf8');
  
  const checks = [
    {
      name: 'D√©tection GPT-OSS',
      condition: apiContent.includes('isGptOss = config.model.includes(\'gpt-oss\')'),
      description: 'D√©tection du mod√®le GPT-OSS'
    },
    {
      name: 'D√©cision Groq',
      condition: apiContent.includes('const useGroq = isGptOss'),
      description: 'D√©cision d\'utiliser Groq pour GPT-OSS'
    },
    {
      name: 'URL Groq',
      condition: apiContent.includes('https://api.groq.com/openai/v1/chat/completions'),
      description: 'URL de l\'API Groq'
    },
    {
      name: 'Payload Groq',
      condition: apiContent.includes('max_completion_tokens'),
      description: 'Payload sp√©cifique √† Groq'
    },
    {
      name: 'Cl√© API Groq',
      condition: apiContent.includes('process.env.GROQ_API_KEY'),
      description: 'Utilisation de la cl√© API Groq'
    },
    {
      name: 'Reasoning effort',
      condition: apiContent.includes('reasoning_effort: \'medium\''),
      description: 'Activation du reasoning pour Groq'
    }
  ];

  checks.forEach(check => {
    const status = check.condition ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${check.name}: ${check.description}`);
  });

} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification de l\'API route:', error.message);
}

// 3. V√©rifier la configuration de l'agent Groq
console.log('\nüìã 3. V√©rification de la configuration de l\'agent Groq:');

const agentConfig = {
  name: 'Groq GPT-OSS',
  model: 'openai/gpt-oss-120b',
  provider: 'groq'
};

console.log('üìã Configuration attendue:');
console.log(`   - Nom: ${agentConfig.name}`);
console.log(`   - Mod√®le: ${agentConfig.model}`);
console.log(`   - Provider: ${agentConfig.provider}`);

// 4. Test de la logique de d√©tection
console.log('\nüß™ 4. Test de la logique de d√©tection:');

const testModels = [
  'openai/gpt-oss-120b',
  'meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8',
  'Qwen/Qwen3-235B-A22B-fp8-tput',
  'deepseek-chat'
];

testModels.forEach(model => {
  const isGptOss = model.includes('gpt-oss');
  const useGroq = isGptOss;
  const provider = useGroq ? 'Groq' : 'Together AI';
  
  console.log(`   Mod√®le: ${model}`);
  console.log(`   - isGptOss: ${isGptOss}`);
  console.log(`   - useGroq: ${useGroq}`);
  console.log(`   - Provider: ${provider}`);
  console.log('');
});

// 5. Sc√©narios de test
console.log('üß™ 5. Sc√©narios de test:');

const scenarios = [
  {
    name: 'Agent Groq s√©lectionn√©',
    description: 'Agent avec provider=groq et mod√®le=gpt-oss',
    expected: '‚úÖ Utilise l\'API Groq'
  },
  {
    name: 'Agent Together GPT-OSS',
    description: 'Agent avec provider=together et mod√®le=gpt-oss',
    expected: '‚ùå Utilise Together AI au lieu de Groq'
  },
  {
    name: 'Variables d\'environnement manquantes',
    description: 'GROQ_API_KEY non d√©finie',
    expected: '‚ùå Erreur 500'
  },
  {
    name: 'Payload incorrect',
    description: 'Payload mal format√© pour Groq',
    expected: '‚ùå Erreur API'
  }
];

scenarios.forEach(scenario => {
  console.log(`   ${scenario.name}: ${scenario.description} - ${scenario.expected}`);
});

// 6. Recommandations de correction
console.log('\nüîß 6. Recommandations de correction:');

const recommendations = [
  {
    priority: 'üî¥ CRITIQUE',
    issue: 'Variables d\'environnement manquantes',
    solution: 'V√©rifier que GROQ_API_KEY est d√©finie dans .env.local',
    impact: 'Erreur 500 imm√©diate'
  },
  {
    priority: 'üü° MOYEN',
    issue: 'Logique de d√©tection incorrecte',
    solution: 'V√©rifier que l\'agent a bien provider=groq',
    impact: 'Utilise le mauvais provider'
  },
  {
    priority: 'üü¢ FAIBLE',
    issue: 'Payload mal format√©',
    solution: 'V√©rifier le format du payload pour Groq',
    impact: 'Erreur API'
  }
];

recommendations.forEach(rec => {
  console.log(`   ${rec.priority} ${rec.issue}: ${rec.solution} - Impact: ${rec.impact}`);
});

// 7. Test avec l'exemple d'erreur
console.log('\nüìã 7. Analyse de l\'erreur fournie:');

const errorInfo = {
  error: 'POST /api/chat/llm 500 in 302ms',
  line: '283',
  message: 'D√©sol√©, une erreur est survenue lors du traitement de votre message.'
};

console.log('üì• Erreur d√©tect√©e:');
console.log(`   - Type: ${errorInfo.error}`);
console.log(`   - Ligne: ${errorInfo.line}`);
console.log(`   - Message: ${errorInfo.message}`);

console.log('\nüéØ Diagnostic probable:');
console.log('   - Erreur 500 sur la route /api/chat/llm');
console.log('   - Probablement li√© √† une variable d\'environnement manquante');
console.log('   - Ou √† une logique de d√©tection incorrecte');

console.log('\nüìù Actions recommand√©es:');
console.log('   1. V√©rifier que GROQ_API_KEY est d√©finie dans .env.local');
console.log('   2. V√©rifier que l\'agent s√©lectionn√© a provider=groq');
console.log('   3. V√©rifier les logs de l\'API pour plus de d√©tails');
console.log('   4. Tester avec un agent Together AI pour comparer');

console.log('\nüîó Documentation:');
console.log('   - API Route: src/app/api/chat/llm/route.ts');
console.log('   - Ligne ~283: Probablement dans la logique de d√©tection');
console.log('   - Variables d\'environnement: .env.local');
console.log('   - Agent Groq: scripts/create-groq-agent.js'); 