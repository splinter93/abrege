#!/usr/bin/env node

/**
 * üîÑ Script de Migration vers le Syst√®me Realtime Unifi√©
 * 
 * Script pour migrer progressivement de l'ancien syst√®me RealtimeEditorService
 * vers le nouveau UnifiedRealtimeService.
 */

const fs = require('fs');
const path = require('path');

console.log('üîÑ D√©marrage de la migration vers le syst√®me Realtime unifi√©...\n');

// Fichiers √† migrer
const filesToMigrate = [
  'src/components/editor/Editor.tsx',
  'src/components/DossiersPage.tsx',
  'src/components/ClasseursPage.tsx',
  'src/app/editor/[noteId]/page.tsx'
];

// Patterns de remplacement
const replacements = [
  // Imports
  {
    from: /import { useRealtimeEditor } from '@/hooks\/RealtimeEditorHook';/g,
    to: "import { useUnifiedRealtime } from '@/hooks/useUnifiedRealtime';"
  },
  {
    from: /import { useDatabaseRealtime } from '@/hooks\/useDatabaseRealtime';/g,
    to: "import { useUnifiedRealtime } from '@/hooks/useUnifiedRealtime';"
  },
  {
    from: /import { RealtimeEditorDebug } from '@/components\/RealtimeEditorDebug';/g,
    to: "import { UnifiedRealtimeDebug } from '@/components/UnifiedRealtimeDebug';"
  },
  {
    from: /import RealtimeEditorManager from '@/components\/RealtimeEditorManager';/g,
    to: "import RealtimeMigration from '@/components/RealtimeMigration';"
  },
  
  // Hooks
  {
    from: /const realtimeEditor = useRealtimeEditor\(/g,
    to: "const unifiedRealtime = useUnifiedRealtime("
  },
  {
    from: /const databaseRealtime = useDatabaseRealtime\(/g,
    to: "const unifiedRealtime = useUnifiedRealtime("
  },
  
  // Composants
  {
    from: /<RealtimeEditorDebug/g,
    to: "<UnifiedRealtimeDebug"
  },
  {
    from: /<RealtimeEditorManager/g,
    to: "<RealtimeMigration"
  },
  
  // Propri√©t√©s des hooks
  {
    from: /realtimeEditor\./g,
    to: "unifiedRealtime."
  },
  {
    from: /databaseRealtime\./g,
    to: "unifiedRealtime."
  }
];

// Fonction pour migrer un fichier
function migrateFile(filePath) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  Fichier non trouv√©: ${filePath}`);
    return false;
  }

  console.log(`üìù Migration de: ${filePath}`);
  
  let content = fs.readFileSync(filePath, 'utf8');
  let hasChanges = false;

  // Appliquer les remplacements
  replacements.forEach(({ from, to }) => {
    const newContent = content.replace(from, to);
    if (newContent !== content) {
      content = newContent;
      hasChanges = true;
    }
  });

  if (hasChanges) {
    // Cr√©er une sauvegarde
    const backupPath = filePath + '.backup';
    fs.writeFileSync(backupPath, fs.readFileSync(filePath, 'utf8'));
    console.log(`üíæ Sauvegarde cr√©√©e: ${backupPath}`);

    // √âcrire le fichier migr√©
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ Fichier migr√©: ${filePath}`);
    return true;
  } else {
    console.log(`‚è≠Ô∏è  Aucun changement n√©cessaire: ${filePath}`);
    return false;
  }
}

// Fonction pour nettoyer les anciens fichiers
function cleanupOldFiles() {
  const oldFiles = [
    'src/services/RealtimeEditorService.ts',
    'src/services/DatabaseRealtimeService.ts',
    'src/hooks/RealtimeEditorHook.ts',
    'src/hooks/useDatabaseRealtime.ts',
    'src/components/RealtimeEditorManager.tsx',
    'src/components/RealtimeEditorDebug.tsx',
    'src/components/RealtimeEditorMonitor.tsx'
  ];

  console.log('\nüßπ Nettoyage des anciens fichiers...');
  
  oldFiles.forEach(file => {
    if (fs.existsSync(file)) {
      // D√©placer vers un dossier de sauvegarde
      const backupDir = 'backup/old-realtime-files';
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      
      const fileName = path.basename(file);
      const backupPath = path.join(backupDir, fileName);
      
      fs.renameSync(file, backupPath);
      console.log(`üì¶ Ancien fichier d√©plac√©: ${file} ‚Üí ${backupPath}`);
    }
  });
}

// Fonction pour cr√©er un rapport de migration
function createMigrationReport(migratedFiles) {
  const report = {
    timestamp: new Date().toISOString(),
    migratedFiles,
    newFiles: [
      'src/services/UnifiedRealtimeService.ts',
      'src/hooks/useUnifiedRealtime.ts',
      'src/components/UnifiedRealtimeDebug.tsx',
      'src/components/RealtimeMigration.tsx',
      'src/utils/testUnifiedRealtime.ts'
    ],
    improvements: [
      'Architecture unifi√©e - Un seul service au lieu de deux',
      'Circuit breaker pour √©viter les reconnexions en boucle',
      'Backoff exponentiel avec jitter pour √©viter les reconnexions simultan√©es',
      'Gestion d\'erreurs robuste avec retry intelligent',
      'Monitoring de l\'authentification automatique',
      'Heartbeat optimis√© (1 minute au lieu de 30 secondes)',
      'Gestion de visibilit√© am√©lior√©e',
      'Statistiques et monitoring avanc√©s',
      'Tests complets et validation'
    ],
    breakingChanges: [
      'RealtimeEditorService et DatabaseRealtimeService supprim√©s',
      'useRealtimeEditor et useDatabaseRealtime remplac√©s par useUnifiedRealtime',
      'RealtimeEditorManager remplac√© par RealtimeMigration',
      'API des hooks l√©g√®rement modifi√©e'
    ]
  };

  const reportPath = 'MIGRATION-REALTIME-UNIFIED-REPORT.json';
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`üìä Rapport de migration cr√©√©: ${reportPath}`);
}

// Ex√©cution de la migration
async function runMigration() {
  try {
    const migratedFiles = [];

    // Migrer les fichiers
    console.log('üîÑ Migration des fichiers...\n');
    filesToMigrate.forEach(file => {
      if (migrateFile(file)) {
        migratedFiles.push(file);
      }
    });

    // Nettoyer les anciens fichiers
    cleanupOldFiles();

    // Cr√©er le rapport
    createMigrationReport(migratedFiles);

    console.log('\n‚úÖ Migration termin√©e avec succ√®s !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Tester le nouveau syst√®me avec: npm run test:realtime');
    console.log('2. V√©rifier que tous les composants fonctionnent correctement');
    console.log('3. Supprimer les fichiers de sauvegarde si tout fonctionne');
    console.log('4. Mettre √† jour la documentation');

  } catch (error) {
    console.error('‚ùå Erreur lors de la migration:', error);
    process.exit(1);
  }
}

// Ex√©cuter la migration
runMigration();
