require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

// Client avec service role pour contourner RLS
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function disableRLSTemporarily() {
  try {
    console.log('üîß D√âSACTIVATION TEMPORAIRE DE RLS');
    console.log('==================================\n');

    // 1. V√©rifier l'√©tat actuel
    console.log('üîç V√©rification de l\'√©tat actuel...');
    const { data: articles, error: selectError } = await supabase
      .from('articles')
      .select('id, source_title, user_id')
      .limit(1);

    if (selectError) {
      console.log(`‚ùå Erreur acc√®s articles: ${selectError.message}`);
      return;
    }

    console.log(`‚úÖ Table articles accessible: ${articles?.length || 0} articles trouv√©s`);

    // 2. Cr√©er des politiques RLS permissives (temporaires pour d√©veloppement)
    console.log('\nüîì Cr√©ation de politiques RLS permissives...');
    
    // Note: Ces politiques sont temporaires et ne doivent PAS √™tre utilis√©es en production
    const permissivePolicies = [
      // Politique SELECT - permettre √† tous de voir les articles
      {
        name: 'Temporary allow all users to select articles',
        table: 'articles',
        operation: 'SELECT',
        using: 'true'
      },
      // Politique INSERT - permettre √† tous de cr√©er des articles
      {
        name: 'Temporary allow all users to insert articles',
        table: 'articles',
        operation: 'INSERT',
        with_check: 'true'
      },
      // Politique UPDATE - permettre √† tous de modifier les articles
      {
        name: 'Temporary allow all users to update articles',
        table: 'articles',
        operation: 'UPDATE',
        using: 'true',
        with_check: 'true'
      },
      // Politique DELETE - permettre √† tous de supprimer les articles
      {
        name: 'Temporary allow all users to delete articles',
        table: 'articles',
        operation: 'DELETE',
        using: 'true'
      }
    ];

    // 3. Essayer de cr√©er les politiques via des requ√™tes SQL directes
    console.log('üìù Tentative de cr√©ation des politiques...');
    
    // M√©thode 1: Utiliser des requ√™tes SQL directes si possible
    try {
      // Cr√©er une politique simple pour SELECT
      const { error: selectPolicyError } = await supabase
        .rpc('exec_sql', { 
          sql: `CREATE POLICY IF NOT EXISTS "temp_select_all" ON articles FOR SELECT USING (true);` 
        });
      
      if (selectPolicyError) {
        console.log(`‚ö†Ô∏è Impossible de cr√©er la politique SELECT: ${selectPolicyError.message}`);
      } else {
        console.log('‚úÖ Politique SELECT cr√©√©e');
      }
    } catch (e) {
      console.log('‚ö†Ô∏è Fonction exec_sql non disponible');
    }

    // 4. Test de cr√©ation d'une note
    console.log('\nüß™ Test de cr√©ation de note...');
    
    // R√©cup√©rer un classeur et un utilisateur existants
    const { data: classeurs } = await supabase
      .from('classeurs')
      .select('id, name')
      .limit(1);

    const { data: users } = await supabase
      .from('users')
      .select('id, email')
      .limit(1);

    if (!classeurs || !users) {
      console.log('‚ùå Donn√©es de test manquantes');
      return;
    }

    const testNote = {
      source_title: 'Test RLS Disabled',
      markdown_content: 'Test content after RLS fix',
      html_content: 'Test content after RLS fix',
      user_id: users[0].id,
      classeur_id: classeurs[0].id,
      slug: `test-rls-disabled-${Date.now()}`,
      position: 0
    };

    console.log('üìù Tentative de cr√©ation...');
    const { data: createdNote, error: createError } = await supabase
      .from('articles')
      .insert(testNote)
      .select()
      .single();

    if (createError) {
      console.log(`‚ùå Test √©chou√©: ${createError.message}`);
      
      if (createError.message.includes('row-level security policy')) {
        console.log('\nüö® RLS BLOQUE TOUJOURS LA CR√âATION');
        console.log('üí° Solution manuelle requise:');
        console.log('   1. Allez sur https://supabase.com/dashboard');
        console.log('   2. S√©lectionnez votre projet');
        console.log('   3. Database > Tables > articles');
        console.log('   4. Onglet RLS > D√©sactivez le toggle');
        console.log('   5. Ou cr√©ez des politiques permissives manuellement');
      }
    } else {
      console.log('‚úÖ Test de cr√©ation r√©ussi !');
      console.log(`üìã Note cr√©√©e: ${createdNote.id}`);
      
      // Nettoyer le test
      await supabase
        .from('articles')
        .delete()
        .eq('id', createdNote.id);
      console.log('üßπ Note de test supprim√©e');
    }

    // 5. Recommandations
    console.log('\nüéØ R√âSUM√â ET RECOMMANDATIONS');
    console.log('==============================');
    console.log('‚úÖ Table articles accessible via service role');
    console.log('‚ùå RLS bloque toujours la cr√©ation via l\'API normale');
    console.log('\nüîß SOLUTIONS:');
    console.log('1. D√âSACTIVER RLS TEMPORAIREMENT (Recommand√© pour d√©veloppement):');
    console.log('   - Dashboard Supabase > Database > Tables > articles > RLS > Toggle OFF');
    console.log('\n2. CR√âER DES POLITIQUES PERMISSIVES:');
    console.log('   - Dashboard Supabase > Database > Tables > articles > RLS');
    console.log('   - Cr√©er des politiques avec USING (true) et WITH CHECK (true)');
    console.log('\n3. UTILISER LA SERVICE ROLE KEY:');
    console.log('   - Modifier l\'API pour utiliser SUPABASE_SERVICE_ROLE_KEY');
    console.log('   - ‚ö†Ô∏è ATTENTION: Cela contourne compl√®tement la s√©curit√©');
    console.log('\n‚ö†Ô∏è  IMPORTANT: Ces solutions sont temporaires pour le d√©veloppement');
    console.log('   En production, cr√©ez des politiques RLS appropri√©es bas√©es sur auth.uid()');

  } catch (error) {
    console.error('‚ùå Erreur lors de la d√©sactivation RLS:', error);
  }
}

disableRLSTemporarily(); 