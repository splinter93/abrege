// üß™ Test Tool Calls - Diagnostic des Probl√®mes
// Ce script diagnostique les probl√®mes avec les tool calls

console.log('üß™ Diagnostic des probl√®mes avec les tool calls...\n');

// 1. V√©rifier la logique de relance dans l'API Route
console.log('üìã 1. Analyse de la logique de relance:');

const apiRoutePath = 'src/app/api/chat/llm/route.ts';
const fs = require('fs');

try {
  const apiContent = fs.readFileSync(apiRoutePath, 'utf8');
  
  const checks = [
    {
      name: 'Ex√©cution tool',
      condition: apiContent.includes('Tool Together AI ex√©cut√©:'),
      description: 'Log de confirmation d\'ex√©cution du tool'
    },
    {
      name: 'Injection message tool',
      condition: apiContent.includes('Injection du message tool et relance'),
      description: 'Log d\'injection du message tool'
    },
    {
      name: 'Relance avec historique',
      condition: apiContent.includes('Relance Together AI avec historique tool'),
      description: 'Log de relance avec l\'historique complet'
    },
    {
      name: 'Payload final',
      condition: apiContent.includes('finalPayload'),
      description: 'Cr√©ation du payload final pour la relance'
    },
    {
      name: 'Streaming final',
      condition: apiContent.includes('Streaming final Together AI'),
      description: 'Gestion du streaming de la relance'
    },
    {
      name: 'Broadcast completion',
      condition: apiContent.includes('llm-complete'),
      description: 'Broadcast de completion apr√®s relance'
    },
    {
      name: 'Anti-boucle',
      condition: apiContent.includes('ANTI-BOUCLE: Pas de tools lors de la relance'),
      description: 'Protection contre les boucles infinies'
    }
  ];

  checks.forEach(check => {
    const status = check.condition ? '‚úÖ' : '‚ùå';
    console.log(`   ${status} ${check.name}: ${check.description}`);
  });

} catch (error) {
  console.log('‚ùå Erreur lors de la v√©rification de l\'API route:', error.message);
}

// 2. Analyser les points de d√©faillance potentiels
console.log('\nüîß 2. Points de d√©faillance potentiels:');

const failurePoints = [
  {
    name: 'Ex√©cution tool',
    description: 'L\'ex√©cution du tool peut √©chouer',
    check: 'Tool Together AI ex√©cut√©:',
    impact: 'Pas de r√©sultat √† injecter'
  },
  {
    name: 'Injection message',
    description: 'L\'injection du message tool peut √©chouer',
    check: 'toolResultMessage.content = JSON.stringify(result)',
    impact: 'Historique incomplet'
  },
  {
    name: 'Relance API',
    description: 'La relance de l\'API peut √©chouer',
    check: 'Relance Together AI avec historique tool',
    impact: 'Pas de r√©ponse finale'
  },
  {
    name: 'Streaming final',
    description: 'Le streaming de la relance peut √©chouer',
    check: 'Streaming final Together AI',
    impact: 'Pas de tokens re√ßus'
  },
  {
    name: 'Broadcast completion',
    description: 'Le broadcast de completion peut √©chouer',
    check: 'llm-complete',
    impact: 'Interface ne se met pas √† jour'
  }
];

failurePoints.forEach(point => {
  console.log(`   ‚ö†Ô∏è ${point.name}: ${point.description} - Impact: ${point.impact}`);
});

// 3. Sc√©narios de test
console.log('\nüß™ 3. Sc√©narios de test:');

const scenarios = [
  {
    name: 'Tool call r√©ussi',
    description: 'Tool ex√©cut√© + relance r√©ussie',
    expected: '‚úÖ R√©ponse finale re√ßue'
  },
  {
    name: 'Tool call √©chou√©',
    description: 'Tool √©chou√© + relance avec erreur',
    expected: '‚ùå Message d\'erreur affich√©'
  },
  {
    name: 'Relance √©chou√©e',
    description: 'Tool r√©ussi + relance √©chou√©e',
    expected: '‚ùå Pas de r√©ponse finale'
  },
  {
    name: 'Streaming interrompu',
    description: 'Tool r√©ussi + streaming interrompu',
    expected: '‚ùå R√©ponse incompl√®te'
  }
];

scenarios.forEach(scenario => {
  console.log(`   ${scenario.name}: ${scenario.description} - ${scenario.expected}`);
});

// 4. Recommandations de correction
console.log('\nüîß 4. Recommandations de correction:');

const recommendations = [
  {
    priority: 'üî¥ CRITIQUE',
    issue: 'Relance peut ne pas fonctionner',
    solution: 'Ajouter des logs d√©taill√©s pour tracer la relance',
    impact: 'Diagnostic plus facile'
  },
  {
    priority: 'üü° MOYEN',
    issue: 'Broadcast peut √©chouer',
    solution: 'Ajouter des try/catch autour des broadcasts',
    impact: 'Plus de robustesse'
  },
  {
    priority: 'üü¢ FAIBLE',
    issue: 'Timeout possible',
    solution: 'Augmenter le timeout de 15s √† 30s',
    impact: 'Plus de temps pour les tools complexes'
  },
  {
    priority: 'üî¥ CRITIQUE',
    issue: 'Pas de fallback',
    solution: 'Ajouter un fallback si la relance √©choue',
    impact: 'Garantie de r√©ponse'
  }
];

recommendations.forEach(rec => {
  console.log(`   ${rec.priority} ${rec.issue}: ${rec.solution} - Impact: ${rec.impact}`);
});

// 5. Test avec l'exemple fourni
console.log('\nüìã 5. Analyse de l\'exemple fourni:');

const exampleLog = {
  toolCall: {
    name: "get_notebooks",
    arguments: "{}"
  },
  result: {
    success: true,
    classeurs: [
      {
        id: "75b35cbc-9de3-4b0e-abb1-d4970b2a24a9",
        name: "Movies",
        emoji: "üé¨",
        slug: "backstage-reloaded"
      },
      {
        id: "580879b1-213e-4e1e-a292-e1a6ddf1b4a7",
        name: "D√©mo",
        emoji: "üì∏",
        slug: "demo"
      }
    ]
  }
};

console.log('üì• Tool call d√©tect√©:', exampleLog.toolCall.name);
console.log('üì§ R√©sultat re√ßu:', JSON.stringify(exampleLog.result, null, 2));

// V√©rifications
const checks = [
  {
    name: 'Tool call valide',
    condition: exampleLog.toolCall.name === 'get_notebooks',
    status: exampleLog.toolCall.name === 'get_notebooks' ? '‚úÖ' : '‚ùå'
  },
  {
    name: 'R√©sultat valide',
    condition: exampleLog.result.success === true,
    status: exampleLog.result.success === true ? '‚úÖ' : '‚ùå'
  },
  {
    name: 'Classeurs pr√©sents',
    condition: exampleLog.result.classeurs && exampleLog.result.classeurs.length > 0,
    status: (exampleLog.result.classeurs && exampleLog.result.classeurs.length > 0) ? '‚úÖ' : '‚ùå'
  },
  {
    name: 'Structure correcte',
    condition: exampleLog.result.classeurs[0].name && exampleLog.result.classeurs[0].emoji,
    status: (exampleLog.result.classeurs[0].name && exampleLog.result.classeurs[0].emoji) ? '‚úÖ' : '‚ùå'
  }
];

checks.forEach(check => {
  console.log(`   ${check.status} ${check.name}`);
});

console.log('\nüéØ Diagnostic:');
console.log('   - Le tool call semble fonctionner correctement');
console.log('   - Le r√©sultat est valide et contient les classeurs');
console.log('   - Le probl√®me semble √™tre dans la relance apr√®s l\'ex√©cution du tool');
console.log('   - Il faut v√©rifier les logs de relance dans l\'API');

console.log('\nüìù Actions recommand√©es:');
console.log('   1. V√©rifier les logs de l\'API pour voir si la relance se fait');
console.log('   2. Ajouter des logs d√©taill√©s dans la section de relance');
console.log('   3. V√©rifier que le broadcast de completion fonctionne');
console.log('   4. Tester avec un tool call simple pour isoler le probl√®me');

console.log('\nüîó Documentation:');
console.log('   - API Route: src/app/api/chat/llm/route.ts');
console.log('   - Tool Execution: Ligne ~1224');
console.log('   - Relance: Ligne ~1230');
console.log('   - Broadcast: Ligne ~1340'); 