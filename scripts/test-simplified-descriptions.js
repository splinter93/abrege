require('dotenv').config({ path: '.env.local' });

// Simulation des descriptions simplifi√©es
const simplifiedTools = [
  {
    name: 'create_note',
    description: 'Cr√©er une nouvelle note. IMPORTANT: Fournir UN SEUL objet JSON avec les param√®tres suivants.',
    parameters: {
      type: 'object',
      properties: {
        source_title: {
          type: 'string',
          description: 'Titre de la note (obligatoire)'
        },
        notebook_id: {
          type: 'string',
          description: 'ID ou slug du classeur (obligatoire)'
        },
        markdown_content: {
          type: 'string',
          description: 'Contenu markdown de la note (optionnel)'
        }
      },
      required: ['source_title', 'notebook_id']
    }
  },
  {
    name: 'get_notebooks',
    description: 'R√©cup√©rer la liste des classeurs. IMPORTANT: Cette fonction ne prend aucun param√®tre, mais vous devez toujours fournir un objet JSON vide {} comme arguments.',
    parameters: {
      type: 'object',
      properties: {},
      required: []
    }
  }
];

// Simulation des descriptions complexes (anciennes)
const complexTools = [
  {
    name: 'create_note',
    description: 'Cr√©er une nouvelle note structur√©e dans un classeur sp√©cifique (par ID ou slug), avec un titre obligatoire, un contenu markdown optionnel, et un dossier parent facultatif. La note sera automatiquement positionn√©e dans l\'ordre du classeur.',
    parameters: {
      type: 'object',
      properties: {
        source_title: {
          type: 'string',
          description: 'Titre de la note (obligatoire, max 255 caract√®res)'
        },
        notebook_id: {
          type: 'string',
          description: 'ID ou slug du classeur o√π cr√©er la note (obligatoire). Utilise le param√®tre "notebook_id" exactement comme nomm√© ici.'
        },
        markdown_content: {
          type: 'string',
          description: 'Contenu markdown de la note (optionnel, sera ajout√© au d√©but)'
        }
      },
      required: ['source_title', 'notebook_id']
    }
  }
];

console.log('üß™ Test des descriptions simplifi√©es vs complexes\n');

console.log('üìã DESCRIPTIONS SIMPLIFI√âES:');
simplifiedTools.forEach((tool, index) => {
  console.log(`\n${index + 1}. ${tool.name}:`);
  console.log(`   Description: ${tool.description}`);
  console.log(`   Longueur: ${tool.description.length} caract√®res`);
  console.log(`   Clart√©: ‚úÖ Simple et directe`);
});

console.log('\nüìã DESCRIPTIONS COMPLEXES (anciennes):');
complexTools.forEach((tool, index) => {
  console.log(`\n${index + 1}. ${tool.name}:`);
  console.log(`   Description: ${tool.description}`);
  console.log(`   Longueur: ${tool.description.length} caract√®res`);
  console.log(`   Clart√©: ‚ùå Trop verbeuse et confuse`);
});

console.log('\nüéØ ANALYSE:');
console.log('=====================================');
console.log('‚úÖ Descriptions simplifi√©es:');
console.log('   - Courtes et directes');
console.log('   - Instructions claires');
console.log('   - Moins de confusion pour le LLM');
console.log('   - "IMPORTANT: Fournir UN SEUL objet JSON"');

console.log('\n‚ùå Descriptions complexes:');
console.log('   - Trop verbeuses');
console.log('   - Instructions confuses');
console.log('   - LLM se perd dans les d√©tails');
console.log('   - Risque de payload malform√©');

console.log('\nüí° HYPOTH√àSE:');
console.log('Les descriptions simplifi√©es devraient r√©duire les payloads malform√©s');
console.log('car le LLM aura des instructions plus claires et directes.');

console.log('\nüéâ Test termin√© !');
console.log('\nüí° Prochain test:');
console.log('   1. Red√©marrer le serveur');
console.log('   2. Tester avec un agent');
console.log('   3. V√©rifier les payloads g√©n√©r√©s'); 