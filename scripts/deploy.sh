#!/bin/bash

# Script de d√©ploiement pour l'API avec support des slugs
# Usage: ./scripts/deploy.sh

set -e  # Arr√™ter en cas d'erreur

echo "üöÄ D√©ploiement de l'API avec support des slugs..."
echo "================================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "package.json" ]; then
    log_error "package.json non trouv√©. Assurez-vous d'√™tre dans le r√©pertoire du projet."
    exit 1
fi

# √âtape 1: V√©rifier les d√©pendances
log_info "V√©rification des d√©pendances..."
npm install

# √âtape 2: V√©rifier les variables d'environnement
log_info "V√©rification des variables d'environnement..."
if [ ! -f ".env" ]; then
    log_error "Fichier .env non trouv√©. Veuillez le cr√©er avec vos variables Supabase."
    exit 1
fi

# √âtape 3: Linter le code
log_info "V√©rification du code avec ESLint..."
npm run lint

# √âtape 4: Tests
log_info "Ex√©cution des tests..."
npm run test-endpoints

# √âtape 5: Build
log_info "Build du projet..."
npm run build

# √âtape 6: V√©rification des colonnes slug
log_info "V√©rification des colonnes slug dans Supabase..."
npm run add-slug-columns

# √âtape 7: Migration des donn√©es (optionnel)
read -p "Voulez-vous migrer les donn√©es existantes vers les slugs ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_info "Migration des donn√©es existantes..."
    npm run migrate-slugs
else
    log_warn "Migration des donn√©es ignor√©e. Vous pourrez la faire plus tard avec: npm run migrate-slugs"
fi

# √âtape 8: Tests finaux
log_info "Tests finaux..."
npm run test-slugs

# √âtape 9: D√©ploiement
log_info "D√©ploiement..."
echo "Choisissez votre plateforme de d√©ploiement:"
echo "1. Vercel (recommand√©)"
echo "2. Netlify"
echo "3. Autre (manuel)"

read -p "Votre choix (1-3): " choice

case $choice in
    1)
        log_info "D√©ploiement sur Vercel..."
        if command -v vercel &> /dev/null; then
            vercel --prod
        else
            log_warn "Vercel CLI non install√©. Installez-le avec: npm i -g vercel"
            log_info "Ou d√©ployez manuellement sur vercel.com"
        fi
        ;;
    2)
        log_info "D√©ploiement sur Netlify..."
        if command -v netlify &> /dev/null; then
            netlify deploy --prod
        else
            log_warn "Netlify CLI non install√©. Installez-le avec: npm i -g netlify-cli"
            log_info "Ou d√©ployez manuellement sur netlify.com"
        fi
        ;;
    3)
        log_info "D√©ploiement manuel..."
        log_warn "D√©ployez manuellement votre build sur votre plateforme pr√©f√©r√©e."
        ;;
    *)
        log_error "Choix invalide"
        exit 1
        ;;
esac

# √âtape 10: V√©rification post-d√©ploiement
log_info "V√©rification post-d√©ploiement..."
echo "V√©rifiez que votre API fonctionne avec:"
echo "curl https://votre-domaine.com/api/v1/slug/generate"

log_info "üéâ D√©ploiement termin√© !"
echo ""
echo "üìã Prochaines √©tapes:"
echo "1. Tester vos endpoints avec des slugs"
echo "2. V√©rifier la migration des donn√©es"
echo "3. Mettre √† jour votre documentation"
echo ""
echo "üìö Documentation:"
echo "- API V2 int√©gr√©e"
echo "- MIGRATION-GUIDE.md"
echo ""
echo "üîß Scripts utiles:"
echo "- npm run test-endpoints : Tester les endpoints"
echo "- npm run migrate-slugs : Migrer les donn√©es"
echo "- npm run test-slugs : Tester la g√©n√©ration de slugs" 