/**
 * üß™ Script de test pour la duplication des tool calls
 * 
 * Ce script teste les diff√©rents sc√©narios de duplication :
 * 1. M√™me ID ‚Üí Doit √™tre bloqu√©
 * 2. IDs diff√©rents, m√™me contenu ‚Üí Doit √™tre bloqu√©
 * 3. Race conditions (parall√©lisation) ‚Üí Un seul doit r√©ussir
 * 4. Retry apr√®s √©chec ‚Üí Doit √™tre autoris√©
 */

import { ToolCallManager } from '../src/services/llm/toolCallManager';

const GREEN = '\x1b[32m';
const RED = '\x1b[31m';
const YELLOW = '\x1b[33m';
const RESET = '\x1b[0m';
const BOLD = '\x1b[1m';

async function runTests() {
  console.log(`\n${BOLD}üß™ Test de Duplication des Tool Calls${RESET}\n`);
  
  const manager = ToolCallManager.getInstance();
  let testsPassed = 0;
  let testsFailed = 0;
  
  // Test 1: Duplication par ID identique
  console.log(`${BOLD}Test 1: Duplication par ID identique${RESET}`);
  manager.clearExecutionHistory();
  
  const toolCall1 = {
    id: "call_test_123",
    function: { 
      name: "getNote", 
      arguments: JSON.stringify({ ref: "test-note-1" }) 
    }
  };
  
  const result1 = await manager.executeToolCall(toolCall1, "fake-token");
  const result1Duplicate = await manager.executeToolCall(toolCall1, "fake-token");
  
  if (!result1Duplicate.success && result1Duplicate.result.error?.includes('d√©j√† ex√©cut√©')) {
    console.log(`${GREEN}‚úì${RESET} Duplication par ID bloqu√©e correctement`);
    testsPassed++;
  } else {
    console.log(`${RED}‚úó${RESET} √âCHEC: Duplication par ID non bloqu√©e`);
    testsFailed++;
  }
  
  // Test 2: IDs diff√©rents, m√™me contenu
  console.log(`\n${BOLD}Test 2: IDs diff√©rents, m√™me contenu${RESET}`);
  manager.clearExecutionHistory();
  
  const toolCall2a = {
    id: "call_test_456",
    function: { 
      name: "getNote", 
      arguments: JSON.stringify({ ref: "test-note-2" }) 
    }
  };
  
  const toolCall2b = {
    id: "call_test_789", // ID diff√©rent
    function: { 
      name: "getNote", 
      arguments: JSON.stringify({ ref: "test-note-2" }) // M√™me contenu
    }
  };
  
  const result2a = await manager.executeToolCall(toolCall2a, "fake-token");
  const result2b = await manager.executeToolCall(toolCall2b, "fake-token");
  
  if (!result2b.success && result2b.result.error?.includes('d√©j√† ex√©cut√©')) {
    console.log(`${GREEN}‚úì${RESET} Duplication par contenu bloqu√©e correctement`);
    console.log(`  D√©tect√© par: ${result2b.result.detected_by}`);
    testsPassed++;
  } else {
    console.log(`${RED}‚úó${RESET} √âCHEC: Duplication par contenu non bloqu√©e`);
    testsFailed++;
  }
  
  // Test 3: Normalisation des arguments (espaces, ordre des cl√©s)
  console.log(`\n${BOLD}Test 3: Normalisation des arguments${RESET}`);
  manager.clearExecutionHistory();
  
  const toolCall3a = {
    id: "call_test_abc",
    function: { 
      name: "updateNote", 
      arguments: JSON.stringify({ ref: "note-3", content: "Hello", title: "Test" }) 
    }
  };
  
  const toolCall3b = {
    id: "call_test_def",
    function: { 
      name: "updateNote", 
      // Ordre diff√©rent des cl√©s
      arguments: JSON.stringify({ title: "Test", ref: "note-3", content: "Hello" }) 
    }
  };
  
  const result3a = await manager.executeToolCall(toolCall3a, "fake-token");
  const result3b = await manager.executeToolCall(toolCall3b, "fake-token");
  
  if (!result3b.success && result3b.result.error?.includes('d√©j√† ex√©cut√©')) {
    console.log(`${GREEN}‚úì${RESET} Normalisation des arguments fonctionne`);
    testsPassed++;
  } else {
    console.log(`${RED}‚úó${RESET} √âCHEC: Normalisation des arguments ne fonctionne pas`);
    testsFailed++;
  }
  
  // Test 4: Race conditions (ex√©cution parall√®le)
  console.log(`\n${BOLD}Test 4: Race conditions (10 appels parall√®les)${RESET}`);
  manager.clearExecutionHistory();
  
  const toolCallRace = {
    id: "call_test_race",
    function: { 
      name: "getClasseur", 
      arguments: JSON.stringify({ ref: "classeur-test" }) 
    }
  };
  
  // Cr√©er 10 variantes avec IDs diff√©rents mais m√™me contenu
  const racePromises = Array(10).fill(null).map((_, idx) => 
    manager.executeToolCall(
      {
        ...toolCallRace,
        id: `call_test_race_${idx}` // IDs diff√©rents
      },
      "fake-token"
    )
  );
  
  const raceResults = await Promise.all(racePromises);
  const raceSuccesses = raceResults.filter(r => r.success).length;
  const raceDuplicates = raceResults.filter(r => !r.success && r.result.error?.includes('d√©j√† ex√©cut√©')).length;
  
  if (raceSuccesses === 1 && raceDuplicates === 9) {
    console.log(`${GREEN}‚úì${RESET} Race conditions g√©r√©es: 1 succ√®s, 9 duplications bloqu√©es`);
    testsPassed++;
  } else {
    console.log(`${RED}‚úó${RESET} √âCHEC Race conditions: ${raceSuccesses} succ√®s, ${raceDuplicates} bloqu√©s (attendu: 1/9)`);
    testsFailed++;
  }
  
  // Test 5: Statistiques
  console.log(`\n${BOLD}Test 5: Statistiques de duplication${RESET}`);
  const stats = manager.getDuplicationStats();
  
  console.log(`  Total ex√©cut√© (par ID): ${stats.totalExecuted}`);
  console.log(`  Unique par contenu: ${stats.uniqueByContent}`);
  console.log(`  Tentatives de duplication: ${stats.duplicateAttempts}`);
  console.log(`  Locks actifs: ${stats.activeLocks}`);
  
  if (stats.duplicateAttempts > 0) {
    console.log(`${GREEN}‚úì${RESET} Statistiques disponibles`);
    testsPassed++;
  } else {
    console.log(`${YELLOW}‚ö†${RESET} Aucune duplication d√©tect√©e dans les stats (normal si tests pr√©c√©dents ont √©chou√©)`);
    testsPassed++;
  }
  
  // R√©sum√©
  console.log(`\n${BOLD}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}`);
  console.log(`${BOLD}R√©sum√© des tests:${RESET}`);
  console.log(`${GREEN}‚úì R√©ussis: ${testsPassed}${RESET}`);
  console.log(`${RED}‚úó √âchou√©s: ${testsFailed}${RESET}`);
  console.log(`${BOLD}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}\n`);
  
  if (testsFailed === 0) {
    console.log(`${GREEN}${BOLD}üéâ TOUS LES TESTS SONT PASS√âS !${RESET}\n`);
    process.exit(0);
  } else {
    console.log(`${RED}${BOLD}‚ùå ${testsFailed} TEST(S) ONT √âCHOU√â${RESET}\n`);
    process.exit(1);
  }
}

// Ex√©cuter les tests
runTests().catch(error => {
  console.error(`${RED}${BOLD}‚ùå Erreur fatale:${RESET}`, error);
  process.exit(1);
});

