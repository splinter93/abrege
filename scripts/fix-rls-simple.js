require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

// Client avec service role pour contourner RLS
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixRLSSimple() {
  try {
    console.log('üîß CORRECTION RLS SIMPLE');
    console.log('========================\n');

    // 1. V√©rifier l'√©tat actuel de la table articles
    console.log('üîç V√©rification de la table articles...');
    const { data: articles, error: selectError } = await supabase
      .from('articles')
      .select('id, source_title, user_id')
      .limit(1);

    if (selectError) {
      console.log(`‚ùå Erreur acc√®s articles: ${selectError.message}`);
      return;
    }

    console.log(`‚úÖ Table articles accessible: ${articles?.length || 0} articles trouv√©s`);

    // 2. Test de cr√©ation d'une note (simulation API)
    console.log('\nüß™ Test de cr√©ation de note...');
    
    // D'abord, r√©cup√©rer un classeur existant pour √©viter l'erreur de cl√© √©trang√®re
    const { data: classeurs, error: classeurError } = await supabase
      .from('classeurs')
      .select('id, name')
      .limit(1);

    if (classeurError || !classeurs || classeurs.length === 0) {
      console.log('‚ùå Aucun classeur trouv√© pour le test');
      return;
    }

    const classeurId = classeurs[0].id;
    console.log(`üìö Utilisation du classeur: ${classeurs[0].name} (${classeurId})`);

    // R√©cup√©rer un utilisateur existant
    const { data: users, error: userError } = await supabase
      .from('users')
      .select('id, email')
      .limit(1);

    if (userError || !users || users.length === 0) {
      console.log('‚ùå Aucun utilisateur trouv√© pour le test');
      return;
    }

    const userId = users[0].id;
    console.log(`üë§ Utilisation de l'utilisateur: ${users[0].email} (${userId})`);

    // Test de cr√©ation
    const testNote = {
      source_title: 'Test RLS Fix',
      markdown_content: 'Test content',
      html_content: 'Test content',
      user_id: userId,
      classeur_id: classeurId,
      slug: `test-rls-fix-${Date.now()}`,
      position: 0
    };

    console.log('üìù Tentative de cr√©ation...');
    const { data: createdNote, error: createError } = await supabase
      .from('articles')
      .insert(testNote)
      .select()
      .single();

    if (createError) {
      console.log(`‚ùå Test √©chou√©: ${createError.message}`);
      
      // Si c'est une erreur RLS, on peut essayer de d√©sactiver temporairement
      if (createError.message.includes('row-level security policy')) {
        console.log('\nüîß Tentative de d√©sactivation temporaire de RLS...');
        
        // Note: Cette op√©ration n√©cessite des privil√®ges admin sur Supabase
        // Pour l'instant, on va essayer de cr√©er une note avec un utilisateur authentifi√©
        console.log('üí° Solution: Utiliser un utilisateur authentifi√© via l\'API');
      }
    } else {
      console.log('‚úÖ Test de cr√©ation r√©ussi');
      console.log(`üìã Note cr√©√©e: ${createdNote.id}`);
      
      // Nettoyer le test
      const { error: deleteError } = await supabase
        .from('articles')
        .delete()
        .eq('id', createdNote.id);
      
      if (deleteError) {
        console.log(`‚ö†Ô∏è Erreur suppression note de test: ${deleteError.message}`);
      } else {
        console.log('üßπ Note de test supprim√©e');
      }
    }

    // 3. V√©rifier les politiques RLS actuelles
    console.log('\nüìã V√©rification des politiques RLS...');
    try {
      // Cette requ√™te peut ne pas fonctionner selon les permissions
      const { data: policies, error: policyError } = await supabase
        .from('pg_policies')
        .select('*')
        .eq('tablename', 'articles');

      if (policyError) {
        console.log(`‚ö†Ô∏è Impossible de r√©cup√©rer les politiques: ${policyError.message}`);
      } else {
        console.log(`üìä Politiques trouv√©es: ${policies?.length || 0}`);
        policies?.forEach(policy => {
          console.log(`  - ${policy.policyname}: ${policy.cmd} sur ${policy.tablename}`);
        });
      }
    } catch (e) {
      console.log(`‚ö†Ô∏è V√©rification des politiques impossible: ${e.message}`);
    }

    console.log('\nüéØ RECOMMANDATIONS');
    console.log('==================');
    console.log('1. ‚úÖ La table articles est accessible');
    console.log('2. ‚ùå Les politiques RLS bloquent la cr√©ation');
    console.log('3. üí° Solution: D√©sactiver temporairement RLS sur articles');
    console.log('4. üîß Ou cr√©er des politiques RLS appropri√©es');
    console.log('\nüìö Pour d√©sactiver RLS temporairement:');
    console.log('   - Allez sur le Dashboard Supabase');
    console.log('   - Database > Tables > articles > RLS');
    console.log('   - D√©sactivez le toggle RLS');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification RLS:', error);
  }
}

fixRLSSimple(); 