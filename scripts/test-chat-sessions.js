#!/usr/bin/env node

/**
 * Script de test pour les endpoints de sessions de chat
 * Usage: node scripts/test-chat-sessions.js
 */

const BASE_URL = 'http://localhost:3001';

// Fonction utilitaire pour les requ√™tes
async function makeRequest(endpoint, options = {}) {
  const url = `${BASE_URL}${endpoint}`;
  const defaultOptions = {
    headers: {
      'Content-Type': 'application/json',
    },
  };

  const finalOptions = { ...defaultOptions, ...options };
  
  console.log(`\nüîÑ ${options.method || 'GET'} ${url}`);
  if (options.body) {
    console.log('üì¶ Body:', JSON.stringify(options.body, null, 2));
  }

  try {
    const response = await fetch(url, finalOptions);
    const data = await response.json();
    
    console.log(`üì° Status: ${response.status}`);
    console.log('üìÑ Response:', JSON.stringify(data, null, 2));
    
    return { success: response.ok, data, status: response.status };
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    return { success: false, error: error.message };
  }
}

// Tests des endpoints
async function runTests() {
  console.log('üß™ TESTS DES ENDPOINTS CHAT SESSIONS');
  console.log('=====================================');

  // Test 1: Cr√©er une session
  console.log('\nüìù Test 1: Cr√©er une session');
  const createResult = await makeRequest('/api/v1/chat-sessions', {
    method: 'POST',
    body: {
      name: 'Test Conversation',
      initial_message: 'Bonjour, c\'est un test !',
      metadata: { test: true }
    }
  });

  if (!createResult.success) {
    console.log('‚ùå √âchec de la cr√©ation de session');
    return;
  }

  const sessionId = createResult.data?.data?.id;
  console.log(`‚úÖ Session cr√©√©e avec l'ID: ${sessionId}`);

  // Test 2: R√©cup√©rer la session
  console.log('\nüìñ Test 2: R√©cup√©rer la session');
  const getResult = await makeRequest(`/api/v1/chat-sessions/${sessionId}`);
  
  if (!getResult.success) {
    console.log('‚ùå √âchec de la r√©cup√©ration de session');
    return;
  }

  console.log('‚úÖ Session r√©cup√©r√©e avec succ√®s');

  // Test 3: Ajouter un message
  console.log('\nüí¨ Test 3: Ajouter un message');
  const addMessageResult = await makeRequest(`/api/v1/chat-sessions/${sessionId}/messages`, {
    method: 'POST',
    body: {
      role: 'user',
      content: 'Comment √ßa va ?'
    }
  });

  if (!addMessageResult.success) {
    console.log('‚ùå √âchec de l\'ajout de message');
    return;
  }

  console.log('‚úÖ Message ajout√© avec succ√®s');

  // Test 4: R√©cup√©rer les messages
  console.log('\nüìã Test 4: R√©cup√©rer les messages');
  const getMessagesResult = await makeRequest(`/api/v1/chat-sessions/${sessionId}/messages`);
  
  if (!getMessagesResult.success) {
    console.log('‚ùå √âchec de la r√©cup√©ration des messages');
    return;
  }

  console.log('‚úÖ Messages r√©cup√©r√©s avec succ√®s');
  console.log(`üìä Nombre de messages: ${getMessagesResult.data?.data?.messages?.length || 0}`);

  // Test 5: Mettre √† jour la session
  console.log('\n‚úèÔ∏è Test 5: Mettre √† jour la session');
  const updateResult = await makeRequest(`/api/v1/chat-sessions/${sessionId}`, {
    method: 'PUT',
    body: {
      name: 'Test Conversation Modifi√©e',
      metadata: { updated: true, test: true }
    }
  });

  if (!updateResult.success) {
    console.log('‚ùå √âchec de la mise √† jour de session');
    return;
  }

  console.log('‚úÖ Session mise √† jour avec succ√®s');

  // Test 6: Lister toutes les sessions
  console.log('\nüìö Test 6: Lister toutes les sessions');
  const listResult = await makeRequest('/api/v1/chat-sessions');
  
  if (!listResult.success) {
    console.log('‚ùå √âchec de la r√©cup√©ration des sessions');
    return;
  }

  console.log('‚úÖ Sessions list√©es avec succ√®s');
  console.log(`üìä Nombre de sessions: ${listResult.data?.data?.length || 0}`);

  // Test 7: Supprimer la session
  console.log('\nüóëÔ∏è Test 7: Supprimer la session');
  const deleteResult = await makeRequest(`/api/v1/chat-sessions/${sessionId}`, {
    method: 'DELETE'
  });

  if (!deleteResult.success) {
    console.log('‚ùå √âchec de la suppression de session');
    return;
  }

  console.log('‚úÖ Session supprim√©e avec succ√®s');

  console.log('\nüéâ TOUS LES TESTS SONT PASS√âS !');
}

// Gestion des erreurs
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Erreur non g√©r√©e:', error);
  process.exit(1);
});

// Ex√©cuter les tests
runTests().catch(console.error); 