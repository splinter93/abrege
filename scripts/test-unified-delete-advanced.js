#!/usr/bin/env node

/**
 * Test avanc√© de l'endpoint DELETE unifi√© avec authentification
 */

const BASE_URL = 'http://localhost:3000';

async function testUnifiedDeleteAdvanced() {
  console.log('üß™ Test avanc√© de l\'endpoint DELETE unifi√©\n');

  // Test 1: V√©rifier que l'endpoint unifi√© existe et r√©pond
  console.log('1Ô∏è‚É£ V√©rification de l\'endpoint unifi√©...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/v2/note/test`, {
      method: 'HEAD'
    });

    console.log(`   Status: ${response.status}`);
    console.log(`   Headers:`, Object.fromEntries(response.headers.entries()));
    
    if (response.status === 401) {
      console.log('   ‚úÖ Endpoint accessible (401 = authentification requise)');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur:', error.message);
  }

  console.log('');

  // Test 2: Test avec des types de ressources valides
  console.log('2Ô∏è‚É£ Test des types de ressources valides...');
  
  const validResources = ['note', 'classeur', 'folder', 'file'];
  
  for (const resource of validResources) {
    try {
      const response = await fetch(`${BASE_URL}/api/v2/${resource}/test`, {
        method: 'HEAD'
      });

      console.log(`   ${resource}: ${response.status} ${response.statusText}`);
      
      if (response.status === 401) {
        console.log('      ‚úÖ Type de ressource accept√©');
      } else {
        console.log('      ‚ö†Ô∏è R√©ponse inattendue');
      }
    } catch (error) {
      console.log(`   ${resource}: ‚ùå Erreur - ${error.message}`);
    }
  }

  console.log('');

  // Test 3: Test avec des types de ressources invalides
  console.log('3Ô∏è‚É£ Test des types de ressources invalides...');
  
  const invalidResources = ['invalid', 'test', 'random', 'unknown'];
  
  for (const resource of invalidResources) {
    try {
      const response = await fetch(`${BASE_URL}/api/v2/${resource}/test`, {
        method: 'DELETE'
      });

      console.log(`   ${resource}: ${response.status} ${response.statusText}`);
      
      if (response.status === 400) {
        console.log('      ‚úÖ Type invalide rejet√© (400 = Bad Request)');
      } else if (response.status === 404) {
        console.log('      ‚úÖ Type invalide rejet√© (404 = Not Found)');
      } else {
        console.log('      ‚ö†Ô∏è R√©ponse inattendue');
      }
    } catch (error) {
      console.log(`   ${resource}: ‚ùå Erreur - ${error.message}`);
    }
  }

  console.log('');

  // Test 4: V√©rifier la structure de la r√©ponse HEAD
  console.log('4Ô∏è‚É£ V√©rification de la structure HEAD...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/v2/note/test`, {
      method: 'HEAD'
    });

    const headers = Object.fromEntries(response.headers.entries());
    
    console.log('   Headers re√ßus:');
    console.log(`     X-Endpoint: ${headers['x-endpoint'] || 'Non d√©fini'}`);
    console.log(`     X-Description: ${headers['x-description'] || 'Non d√©fini'}`);
    console.log(`     X-Parameters: ${headers['x-parameters'] || 'Non d√©fini'}`);
    console.log(`     X-Responses: ${headers['x-responses'] || 'Non d√©fini'}`);
    
    if (headers['x-endpoint'] && headers['x-description']) {
      console.log('   ‚úÖ Structure HEAD compl√®te');
    } else {
      console.log('   ‚ö†Ô∏è Structure HEAD incompl√®te');
    }
  } catch (error) {
    console.log('   ‚ùå Erreur:', error.message);
  }

  console.log('\nüéØ Test avanc√© termin√© !');
  console.log('\nüìã R√©sum√©:');
  console.log('   ‚úÖ Endpoint unifi√© accessible');
  console.log('   ‚úÖ Validation des types de ressources');
  console.log('   ‚úÖ Gestion des erreurs');
  console.log('   ‚úÖ Structure HEAD informative');
}

// Lancer le test
testUnifiedDeleteAdvanced().catch(console.error);
