#!/usr/bin/env node

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testPublicAccess() {
  try {
    console.log('üß™ TEST D\'ACC√àS PUBLIC AUX NOTES');
    console.log('==================================\n');
    
    // Test 1: Compter le total des articles (devrait fonctionner maintenant)
    console.log('üìä Test 1: Compter le total des articles...');
    try {
      const { count: totalArticles, error: totalError } = await supabase
        .from('articles')
        .select('*', { count: 'exact', head: true });
      
      if (totalError) {
        console.log(`   ‚ùå Erreur: ${totalError.message}`);
      } else {
        console.log(`   ‚úÖ Total articles: ${totalArticles || 0}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Exception: ${error.message}`);
    }
    
    // Test 2: R√©cup√©rer les notes publiques
    console.log('\nüåê Test 2: R√©cup√©rer les notes publiques...');
    try {
      const { data: publicNotes, error: publicError } = await supabase
        .from('articles')
        .select('id, slug, source_title, user_id, share_settings')
        .not('share_settings->>visibility', 'eq', 'private');
      
      if (publicError) {
        console.log(`   ‚ùå Erreur: ${publicError.message}`);
      } else {
        console.log(`   ‚úÖ Notes publiques trouv√©es: ${publicNotes?.length || 0}`);
        if (publicNotes && publicNotes.length > 0) {
          publicNotes.forEach((note, index) => {
            console.log(`      ${index + 1}. "${note.source_title}" (${note.slug}) - Visibilit√©: ${note.share_settings?.visibility}`);
          });
        }
      }
    } catch (error) {
      console.log(`   ‚ùå Exception: ${error.message}`);
    }
    
    // Test 3: R√©cup√©rer une note sp√©cifique par slug
    console.log('\nüîç Test 3: R√©cup√©rer une note par slug...');
    try {
      // D'abord, trouver une note avec un slug
      const { data: noteWithSlug, error: slugError } = await supabase
        .from('articles')
        .select('slug, user_id')
        .not('slug', 'is', null)
        .limit(1)
        .single();
      
      if (slugError || !noteWithSlug) {
        console.log('   ‚ùå Aucune note avec slug trouv√©e');
      } else {
        console.log(`   ‚úÖ Note trouv√©e avec slug: ${noteWithSlug.slug}`);
        
        // Maintenant, r√©cup√©rer l'utilisateur
        const { data: user, error: userError } = await supabase
          .from('users')
          .select('username')
          .eq('id', noteWithSlug.user_id)
          .single();
        
        if (userError || !user) {
          console.log('   ‚ùå Utilisateur non trouv√©');
        } else {
          console.log(`   ‚úÖ Username: ${user.username}`);
          
          // Tester l'URL publique
          const publicUrl = `/${user.username}/${noteWithSlug.slug}`;
          console.log(`   ‚úÖ URL publique: ${publicUrl}`);
          
          // Tester l'API publique
          console.log('\nüåê Test 4: Test de l\'API publique...');
          try {
            const apiUrl = `${supabaseUrl.replace('/rest/v1', '')}/api/v1/public/note/${user.username}/${noteWithSlug.slug}`;
            console.log(`   üîó Test de l'API: ${apiUrl}`);
            
            // Note: Ce test n√©cessiterait une requ√™te HTTP r√©elle
            console.log('   üí° Pour tester l\'API compl√®tement, utilisez un navigateur ou curl');
          } catch (error) {
            console.log(`   ‚ùå Erreur test API: ${error.message}`);
          }
        }
      }
    } catch (error) {
      console.log(`   ‚ùå Exception: ${error.message}`);
    }
    
    // Test 5: V√©rifier la structure des donn√©es
    console.log('\nüèóÔ∏è  Test 5: V√©rifier la structure des donn√©es...');
    try {
      const { data: sampleNote, error: sampleError } = await supabase
        .from('articles')
        .select('*')
        .limit(1)
        .single();
      
      if (sampleError) {
        console.log(`   ‚ùå Erreur: ${sampleError.message}`);
      } else if (sampleNote) {
        console.log('   ‚úÖ Structure de la note:');
        console.log(`      - ID: ${sampleNote.id}`);
        console.log(`      - Titre: ${sampleNote.source_title}`);
        console.log(`      - Slug: ${sampleNote.slug || 'NULL'}`);
        console.log(`      - User ID: ${sampleNote.user_id}`);
        console.log(`      - Share Settings: ${JSON.stringify(sampleNote.share_settings)}`);
        console.log(`      - HTML Content: ${sampleNote.html_content ? `${sampleNote.html_content.substring(0, 50)}...` : 'NULL'}`);
        console.log(`      - Markdown Content: ${sampleNote.markdown_content ? `${sampleNote.markdown_content.substring(0, 50)}...` : 'NULL'}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Exception: ${error.message}`);
    }
    
    console.log('\nüìã R√âSUM√â DES TESTS');
    console.log('====================');
    console.log('‚úÖ Tests termin√©s');
    console.log('üí° V√©rifiez les r√©sultats ci-dessus');
    
    if (process.argv.includes('--fix')) {
      console.log('\nüîß Application de la correction RLS...');
      const { execSync } = require('child_process');
      try {
        execSync('node scripts/apply-public-access-fix.js', { stdio: 'inherit' });
      } catch (error) {
        console.log('‚ùå Erreur lors de l\'application de la correction');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
}

// Ex√©cuter les tests
testPublicAccess().catch(console.error); 