#!/usr/bin/env node

// Script de mise √† jour des action IDs OAuth ChatGPT
// Usage: node scripts/update-oauth-action-ids.js

require('dotenv').config();

const { createClient } = require('@supabase/supabase-js');

// Configuration
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  console.error('NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.error('SUPABASE_SERVICE_ROLE_KEY:', supabaseServiceKey ? '‚úÖ' : '‚ùå');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Configuration des action IDs
const ACTION_IDS = {
  OLD: 'g-011f24575c8d3b9d5d69e124bafa1364ae3badf9',
  NEW: 'g-369c00bd47b6f501275b414d19d5244ac411097b'
};

async function updateOAuthActionIds() {
  console.log('üîÑ MISE √Ä JOUR DES ACTION IDS OAUTH CHATGPT');
  console.log('==========================================\n');

  try {
    // 1. V√©rifier que la table oauth_clients existe
    console.log('1Ô∏è‚É£ V√©rification de la table oauth_clients...');
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'oauth_clients');

    if (tablesError || tables.length === 0) {
      console.error('‚ùå Table oauth_clients non trouv√©e');
      process.exit(1);
    }
    console.log('‚úÖ Table oauth_clients trouv√©e');

    // 2. R√©cup√©rer le client OAuth ChatGPT
    console.log('\n2Ô∏è‚É£ R√©cup√©ration du client OAuth ChatGPT...');
    const { data: client, error: clientError } = await supabase
      .from('oauth_clients')
      .select('*')
      .eq('client_id', 'scrivia-custom-gpt')
      .single();

    if (clientError || !client) {
      console.error('‚ùå Client OAuth ChatGPT non trouv√©');
      process.exit(1);
    }

    console.log('‚úÖ Client OAuth ChatGPT trouv√©:');
    console.log('   ID:', client.id);
    console.log('   Nom:', client.name);
    console.log('   URLs actuelles:', client.redirect_uris.join(', '));

    // 3. V√©rifier si les deux action IDs sont d√©j√† configur√©s
    const hasOldActionId = client.redirect_uris.some(uri => uri.includes(ACTION_IDS.OLD));
    const hasNewActionId = client.redirect_uris.some(uri => uri.includes(ACTION_IDS.NEW));

    if (hasOldActionId && hasNewActionId) {
      console.log('\n‚úÖ Les deux action IDs sont d√©j√† configur√©s !');
      console.log('   Ancienne action ID:', ACTION_IDS.OLD);
      console.log('   Nouvelle action ID:', ACTION_IDS.NEW);
      return;
    }

    // 4. Mettre √† jour les URLs pour inclure les deux action IDs
    console.log('\n3Ô∏è‚É£ Mise √† jour des action IDs...');
    
    const updatedUris = [...client.redirect_uris];
    
    if (!hasOldActionId) {
      const oldActionUri = `https://chat.openai.com/aip/${ACTION_IDS.OLD}/oauth/callback`;
      updatedUris.push(oldActionUri);
      console.log('   ‚ûï Ajout ancienne action ID:', oldActionUri);
    }
    
    if (!hasNewActionId) {
      const newActionUri = `https://chat.openai.com/aip/${ACTION_IDS.NEW}/oauth/callback`;
      updatedUris.push(newActionUri);
      console.log('   ‚ûï Ajout nouvelle action ID:', newActionUri);
    }

    const { error: updateError } = await supabase
      .from('oauth_clients')
      .update({ 
        redirect_uris: updatedUris,
        updated_at: new Date().toISOString()
      })
      .eq('client_id', 'scrivia-custom-gpt');

    if (updateError) {
      console.error('‚ùå Erreur mise √† jour:', updateError.message);
      process.exit(1);
    }

    console.log('‚úÖ Action IDs mis √† jour avec succ√®s !');
    console.log('   URLs finales:', updatedUris.join(', '));

    // 5. V√©rification finale
    console.log('\n4Ô∏è‚É£ V√©rification finale...');
    const { data: finalClient, error: finalError } = await supabase
      .from('oauth_clients')
      .select('redirect_uris')
      .eq('client_id', 'scrivia-custom-gpt')
      .single();

    if (finalError || !finalClient) {
      console.error('‚ùå Erreur v√©rification finale:', finalError?.message);
      process.exit(1);
    }

    console.log('‚úÖ V√©rification r√©ussie:');
    console.log('   URLs finales:', finalClient.redirect_uris.join(', '));

    // 6. R√©sum√© des action IDs support√©s
    console.log('\nüéØ ACTION IDS SUPPORT√âS:');
    console.log('================================');
    console.log('‚úÖ Ancienne action ID:', ACTION_IDS.OLD);
    console.log('‚úÖ Nouvelle action ID:', ACTION_IDS.NEW);
    console.log('‚úÖ URLs de callback:');
    finalClient.redirect_uris.forEach(uri => {
      if (uri.includes('chat.openai.com')) {
        console.log('   -', uri);
      }
    });

    console.log('\nüéØ PROCHAINES √âTAPES:');
    console.log('1. Tester la configuration: node scripts/test-chatgpt-oauth.js');
    console.log('2. V√©rifier que les deux action IDs fonctionnent');
    console.log('3. Tester le flux OAuth avec l\'ancienne et la nouvelle action ID');

    console.log('\n‚úÖ Mise √† jour des action IDs OAuth termin√©e avec succ√®s !');

  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// Ex√©cuter le script
updateOAuthActionIds().catch(console.error);
