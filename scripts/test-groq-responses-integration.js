#!/usr/bin/env node

/**
 * Test d'int√©gration du GroqResponsesProvider avec le syst√®me existant
 * Usage: node scripts/test-groq-responses-integration.js
 */

require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// Charger les variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.log('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testGroqResponsesIntegration() {
  try {
    console.log('üß™ Test d\'int√©gration GroqResponsesProvider...\n');

    // 1. R√©cup√©rer l'agent GroqResponses
    console.log('1Ô∏è‚É£ R√©cup√©ration de l\'agent GroqResponses...');
    const { data: groqResponsesAgent, error: agentError } = await supabase
      .from('agents')
      .select('*')
      .eq('provider', 'groq-responses')
      .eq('is_active', true)
      .single();

    if (agentError || !groqResponsesAgent) {
      console.log('‚ùå Agent GroqResponses non trouv√©');
      return;
    }

    console.log(`‚úÖ Agent trouv√©: ${groqResponsesAgent.name}`);
    console.log(`   Provider: ${groqResponsesAgent.provider}`);
    console.log(`   Mod√®le: ${groqResponsesAgent.model}`);
    console.log(`   Browser Search: ${groqResponsesAgent.api_config?.enableBrowserSearch ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Code Execution: ${groqResponsesAgent.api_config?.enableCodeExecution ? '‚úÖ' : '‚ùå'}`);

    // 2. Simuler un appel via l'API route
    console.log('\n2Ô∏è‚É£ Test d\'appel via l\'API route...');
    
    const testPayload = {
      message: "Quelle est la m√©t√©o actuelle √† Paris ?",
      context: {
        type: 'chat_session',
        id: 'test-session-groq-responses',
        name: 'Test GroqResponses',
        sessionId: 'test-session-groq-responses' // ‚úÖ Ajout du sessionId requis
      },
      history: [
        {
          id: '1',
          role: 'user',
          content: 'Bonjour',
          timestamp: new Date().toISOString(),
          tool_calls: undefined,
          tool_call_id: undefined,
          name: undefined,
          tool_results: undefined,
          isStreaming: false
        }
      ],
      provider: 'groq-responses',
      agentId: groqResponsesAgent.id,
      channelId: 'test-channel-groq-responses'
    };

    // Appel √† l'API route
    const response = await fetch('http://localhost:3004/api/chat/llm', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.SUPABASE_SERVICE_ROLE_KEY}`
      },
      body: JSON.stringify(testPayload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.log(`‚ùå Erreur API: ${response.status} - ${errorText}`);
      return;
    }

    const result = await response.json();
    console.log('‚úÖ Appel API r√©ussi !');
    console.log(`   R√©ponse re√ßue: ${result.success ? '‚úÖ Succ√®s' : '‚ùå √âchec'}`);
    
    if (result.success && result.content) {
      console.log(`   Contenu: ${result.content.substring(0, 200)}...`);
    }

    // 3. Comparer avec l'agent Groq classique
    console.log('\n3Ô∏è‚É£ Comparaison avec l\'agent Groq classique...');
    
    const { data: groqClassicAgent, error: classicError } = await supabase
      .from('agents')
      .select('*')
      .eq('provider', 'groq')
      .eq('is_active', true)
      .single();

    if (!classicError && groqClassicAgent) {
      console.log(`‚úÖ Agent Groq classique: ${groqClassicAgent.name}`);
      console.log(`   Provider: ${groqClassicAgent.provider}`);
      console.log(`   Mod√®le: ${groqClassicAgent.model}`);
      console.log(`   Streaming: ${groqClassicAgent.stream ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Reasoning: ${groqClassicAgent.reasoning_effort || 'N/A'}`);
    }

    // 4. R√©sum√© des diff√©rences
    console.log('\n4Ô∏è‚É£ R√©sum√© des diff√©rences:');
    console.log('   üîÑ Groq (classique):');
    console.log('      - Endpoint: /chat/completions');
    console.log('      - Streaming: ‚úÖ Support√©');
    console.log('      - Reasoning: ‚úÖ Support√©');
    console.log('      - Browser Search: ‚ùå Non support√©');
    console.log('      - Code Execution: ‚ùå Non support√©');
    
    console.log('   üöÄ GroqResponses:');
    console.log('      - Endpoint: /responses');
    console.log('      - Streaming: ‚ùå Non support√©');
    console.log('      - Reasoning: ‚ùå Non support√©');
    console.log('      - Browser Search: ‚úÖ Support√©');
    console.log('      - Code Execution: ‚úÖ Support√©');

    console.log('\nüéâ Test d\'int√©gration termin√© !');
    console.log('   Les deux providers fonctionnent en parall√®le.');
    console.log('   Le choix se fait via le champ "provider" dans la table agents.');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Ex√©cuter le test
testGroqResponsesIntegration(); 