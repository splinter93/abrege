const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Charger les variables d'environnement depuis .env
function loadEnv() {
  try {
    const envPath = path.join(process.cwd(), '.env');
    if (fs.existsSync(envPath)) {
      const envContent = fs.readFileSync(envPath, 'utf8');
      const envLines = envContent.split('\n');
      
      envLines.forEach(line => {
        const [key, ...valueParts] = line.split('=');
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').trim();
          if (value && !key.startsWith('#')) {
            process.env[key.trim()] = value.replace(/^["']|["']$/g, '');
          }
        }
      });
      
      console.log('‚úÖ Variables d\'environnement charg√©es depuis .env');
    } else {
      console.log('‚ö†Ô∏è Fichier .env non trouv√©, utilisation des variables syst√®me');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erreur chargement .env:', error.message);
  }
}

// Charger les variables d'environnement
loadEnv();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('   NEXT_PUBLIC_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
  console.error('   SUPABASE_SERVICE_ROLE_KEY:', supabaseKey ? '‚úÖ' : '‚ùå');
  console.error('\nüí° V√©rifiez que votre fichier .env contient ces variables');
  process.exit(1);
}

console.log('üîó Connexion √† Supabase...');

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixAPIRouteAgentConfig() {
  try {
    console.log('üîß Correction de la route API pour r√©cup√©rer l\'agentConfig depuis la base...\n');

    // 1. V√©rifier l'√©tat actuel de la route API
    const routePath = 'src/app/api/chat/llm/route.ts';
    console.log(`üìÅ V√©rification de la route: ${routePath}`);
    
    if (!fs.existsSync(routePath)) {
      console.error(`‚ùå Route non trouv√©e: ${routePath}`);
      return;
    }

    const currentRouteContent = fs.readFileSync(routePath, 'utf8');
    console.log('‚úÖ Route trouv√©e');

    // 2. Analyser le contenu actuel
    console.log('\nüîç Analyse du contenu actuel...');
    
    const hasAgentConfigRetrieval = currentRouteContent.includes('getAgentByProvider') || 
                                   currentRouteContent.includes('from(\'agents\')') ||
                                   currentRouteContent.includes('agentConfig.*provider');
    
    if (hasAgentConfigRetrieval) {
      console.log('‚úÖ La route r√©cup√®re d√©j√† l\'agentConfig depuis la base');
      console.log('üìã Contenu actuel de la route:');
      console.log(currentRouteContent);
      return;
    }

    console.log('‚ö†Ô∏è La route ne r√©cup√®re pas l\'agentConfig depuis la base');
    console.log('üîÑ Correction n√©cessaire...');

    // 3. Cr√©er la nouvelle version de la route
    const newRouteContent = `import { NextRequest, NextResponse } from 'next/server';
import { handleGroqGptOss120b } from '@/services/llm/groqGptOss120b';
import { simpleLogger as logger } from '@/utils/logger';
import { createClient } from '@supabase/supabase-js';

// Client Supabase admin pour acc√©der aux agents
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { message, context, history, provider, channelId } = body;

    // Validation des param√®tres requis
    if (!message || !context || !history || !channelId) {
      return NextResponse.json(
        { error: 'Param√®tres manquants', required: ['message', 'context', 'history', 'channelId'] },
        { status: 400 }
      );
    }

    // Extraire le token d'authentification depuis le header Authorization
    const authHeader = request.headers.get('authorization');
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return NextResponse.json(
        { error: 'Token d\\'authentification manquant ou invalide' },
        { status: 401 }
      );
    }
    
    const userToken = authHeader.replace('Bearer ', '');
    
    // Extraire les valeurs n√©cessaires depuis le contexte
    const { sessionId } = context;

    if (!sessionId) {
      return NextResponse.json(
        { error: 'sessionId manquant dans le contexte' },
        { status: 400 }
      );
    }

    logger.info(\`[LLM Route] üöÄ D√©marrage pour session \${sessionId} avec provider \${provider}\`);

    // üéØ CORRECTION : R√©cup√©rer l'agentConfig depuis la base de donn√©es
    let agentConfig = null;
    
    if (provider) {
      try {
        logger.dev(\`[LLM Route] üîç R√©cup√©ration de l'agent pour le provider: \${provider}\`);
        
        const { data: agent, error: agentError } = await supabase
          .from('agents')
          .select('*')
          .eq('provider', provider)
          .eq('is_active', true)
          .order('priority', { ascending: false })
          .limit(1)
          .single();

        if (agentError) {
          logger.warn(\`[LLM Route] ‚ö†Ô∏è Erreur r√©cup√©ration agent \${provider}: \${agentError.message}\`);
        } else if (agent) {
          agentConfig = agent;
          logger.dev(\`[LLM Route] ‚úÖ Agent r√©cup√©r√©: \${agent.name} (ID: \${agent.id})\`);
          logger.dev(\`[LLM Route] üéØ Configuration agent:\`, {
            model: agent.model,
            temperature: agent.temperature,
            max_tokens: agent.max_tokens,
            system_instructions: agent.system_instructions ? '‚úÖ Pr√©sentes' : '‚ùå Manquantes',
            context_template: agent.context_template ? '‚úÖ Pr√©sent' : '‚ùå Manquant',
            api_config: agent.api_config ? '‚úÖ Pr√©sent' : '‚ùå Manquant',
            capabilities: agent.capabilities?.length || 0,
            api_v2_capabilities: agent.api_v2_capabilities?.length || 0
          });
        } else {
          logger.warn(\`[LLM Route] ‚ö†Ô∏è Aucun agent trouv√© pour le provider: \${provider}\`);
        }
      } catch (error) {
        logger.error(\`[LLM Route] ‚ùå Erreur lors de la r√©cup√©ration de l'agent: \${error}\`);
      }
    }

    // Appel √† la logique Groq OSS 120B avec l'agentConfig r√©cup√©r√©
    const result = await handleGroqGptOss120b({
      message,
      appContext: context,
      sessionHistory: history,
      agentConfig: agentConfig, // ‚úÖ Maintenant r√©cup√©r√© depuis la base
      incomingChannelId: channelId,
      userToken,
      sessionId
    });

    logger.info(\`[LLM Route] ‚úÖ Session \${sessionId} termin√©e avec succ√®s\`);
    return result;

  } catch (error) {
    logger.error(\`[LLM Route] ‚ùå Erreur fatale: \${error}\`);

    return NextResponse.json(
      {
        error: 'Erreur interne du serveur',
        details: error instanceof Error ? error.message : 'Erreur inconnue'
      },
      { status: 500 }
    );
  }
}`;

    // 4. Sauvegarder la nouvelle route
    console.log('üíæ Sauvegarde de la nouvelle route...');
    
    // Cr√©er une sauvegarde
    const backupPath = routePath + '.backup';
    fs.writeFileSync(backupPath, currentRouteContent);
    console.log(`‚úÖ Sauvegarde cr√©√©e: ${backupPath}`);

    // √âcrire la nouvelle route
    fs.writeFileSync(routePath, newRouteContent);
    console.log(`‚úÖ Nouvelle route √©crite: ${routePath}`);

    // 5. V√©rification de la correction
    console.log('\nüîç V√©rification de la correction...');
    
    const updatedRouteContent = fs.readFileSync(routePath, 'utf8');
    const hasNewAgentConfigRetrieval = updatedRouteContent.includes('from(\'agents\')') &&
                                      updatedRouteContent.includes('agentConfig = agent') &&
                                      updatedRouteContent.includes('provider, provider');

    if (hasNewAgentConfigRetrieval) {
      console.log('‚úÖ Correction appliqu√©e avec succ√®s !');
      console.log('\nüìã Changements effectu√©s:');
      console.log('   - Ajout de la r√©cup√©ration de l\'agent depuis la table agents');
      console.log('   - Utilisation du provider pour identifier l\'agent');
      console.log('   - Passage de l\'agentConfig complet √† handleGroqGptOss120b');
      console.log('   - Logs d√©taill√©s pour le debugging');
    } else {
      console.log('‚ùå Correction non appliqu√©e correctement');
      console.log('üìã Contenu de la route apr√®s modification:');
      console.log(updatedRouteContent);
    }

    // 6. Test de la nouvelle route
    console.log('\nüß™ Test de la nouvelle route...');
    
    try {
      // V√©rifier que la route compile
      const { execSync } = require('child_process');
      execSync('npx tsc --noEmit --skipLibCheck src/app/api/chat/llm/route.ts', { stdio: 'pipe' });
      console.log('‚úÖ La route compile correctement');
    } catch (error) {
      console.log('‚ö†Ô∏è La route ne compile pas (peut √™tre normal si d√©pendances manquantes)');
    }

    console.log('\nüéâ Correction termin√©e avec succ√®s !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('   1. Red√©marrer l\'application pour charger la nouvelle route');
    console.log('   2. Tester un chat pour v√©rifier que l\'agentConfig est r√©cup√©r√©');
    console.log('   3. V√©rifier les logs pour confirmer la r√©cup√©ration de l\'agent');
    console.log('   4. Tester les function calls avec l\'agent configur√©');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le script
fixAPIRouteAgentConfig(); 