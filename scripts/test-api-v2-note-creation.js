import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import { resolve } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// Configuration pour ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Charger les variables d'environnement
config({ path: resolve(__dirname, '..', '.env') });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testApiV2NoteCreation() {
  console.log('üß™ Test de cr√©ation de note via API V2 avec g√©n√©ration automatique de slug...\n');
  
  try {
    // 1. R√©cup√©rer un utilisateur de test (premier utilisateur trouv√©)
    console.log('1Ô∏è‚É£ R√©cup√©ration d\'un utilisateur de test...');
    const { data: users, error: userError } = await supabase
      .from('users')
      .select('id, username')
      .limit(1);
    
    if (userError || !users || users.length === 0) {
      console.error('‚ùå Aucun utilisateur trouv√©:', userError);
      return;
    }
    
    const testUser = users[0];
    console.log(`‚úÖ Utilisateur de test: ${testUser.username} (${testUser.id})`);
    
    // 2. R√©cup√©rer un classeur de test
    console.log('\n2Ô∏è‚É£ R√©cup√©ration d\'un classeur de test...');
    const { data: classeurs, error: classeurError } = await supabase
      .from('classeurs')
      .select('id, name, slug')
      .eq('user_id', testUser.id)
      .limit(1);
    
    if (classeurError || !classeurs || classeurs.length === 0) {
      console.error('‚ùå Aucun classeur trouv√© pour cet utilisateur:', classeurError);
      return;
    }
    
    const testClasseur = classeurs[0];
    console.log(`‚úÖ Classeur de test: ${testClasseur.name} (${testClasseur.slug})`);
    
    // 3. Cr√©er une note de test via l'API V2
    console.log('\n3Ô∏è‚É£ Cr√©ation d\'une note de test via API V2...');
    const testTitle = `Note de test API V2 ${Date.now()}`;
    
    // Simuler un appel √† l'API V2
    const noteData = {
      source_title: testTitle,
      markdown_content: 'Contenu de test pour v√©rifier la g√©n√©ration automatique de slug via API V2',
      notebook_id: testClasseur.slug, // Utiliser le slug du classeur
      folder_id: null
    };
    
    console.log('üì§ Donn√©es envoy√©es √† l\'API V2:', noteData);
    
    // Appeler l'API V2
    const response = await fetch(`${supabaseUrl.replace('/rest/v1/', '')}/api/v2/note/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${supabaseAnonKey}` // Note: ceci ne fonctionnera pas sans authentification r√©elle
      },
      body: JSON.stringify(noteData)
    });
    
    if (!response.ok) {
      console.error(`‚ùå Erreur API V2: ${response.status} ${response.statusText}`);
      const errorText = await response.text();
      console.error('D√©tails de l\'erreur:', errorText);
      
      // Test alternatif: v√©rifier que la note existe d√©j√† avec un slug
      console.log('\nüîç Test alternatif: v√©rification des notes existantes...');
      const { data: existingNotes, error: listError } = await supabase
        .from('articles')
        .select('id, source_title, slug, public_url, created_at')
        .eq('user_id', testUser.id)
        .order('created_at', { ascending: false })
        .limit(5);
      
      if (listError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des notes:', listError);
        return;
      }
      
      console.log(`üìã ${existingNotes.length} notes trouv√©es:`);
      existingNotes.forEach((note, index) => {
        const hasSlug = note.slug ? '‚úÖ' : '‚ùå';
        const hasUrl = note.public_url ? '‚úÖ' : '‚ùå';
        console.log(`${index + 1}. ${note.source_title}`);
        console.log(`   - Slug: ${hasSlug} ${note.slug || 'MANQUANT'}`);
        console.log(`   - URL: ${hasUrl} ${note.public_url || 'MANQUANT'}`);
        console.log(`   - Cr√©√©e: ${new Date(note.created_at).toLocaleDateString()}`);
        console.log('');
      });
      
      return;
    }
    
    const result = await response.json();
    console.log('‚úÖ R√©ponse API V2:', result);
    
    if (result.note) {
      const note = result.note;
      console.log(`\n‚úÖ Note cr√©√©e avec succ√®s via API V2!`);
      console.log(`   - ID: ${note.id}`);
      console.log(`   - Titre: ${note.source_title}`);
      console.log(`   - Slug: ${note.slug || '‚ùå MANQUANT!'}`);
      console.log(`   - URL publique: ${note.public_url || '‚ùå MANQUANT!'}`);
      
      // V√©rifier que le slug a √©t√© g√©n√©r√© automatiquement
      if (!note.slug) {
        console.error('\n‚ùå PROBL√àME D√âTECT√â: La note a √©t√© cr√©√©e sans slug automatique!');
      } else {
        console.log('\n‚úÖ SUCC√àS: La note a √©t√© cr√©√©e avec un slug automatique!');
        console.log(`   - Slug: ${note.slug}`);
        console.log(`   - URL publique: ${note.public_url || 'Non disponible'}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale lors du test:', error);
  }
}

// Ex√©cuter le test
testApiV2NoteCreation().catch(console.error); 