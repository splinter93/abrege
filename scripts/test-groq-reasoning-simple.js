#!/usr/bin/env node

/**
 * üß† Test Simple du Reasoning Groq GPT-OSS
 * 
 * Ce script teste la configuration du reasoning pour Groq
 */

console.log('üß™ Test Simple du Reasoning Groq GPT-OSS...\n');

// 1. V√©rifier les variables d'environnement
console.log('üîë Variables d\'environnement:');
console.log('   - GROQ_API_KEY:', process.env.GROQ_API_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');
console.log('   - NEXT_PUBLIC_SUPABASE_URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? '‚úÖ Configur√©' : '‚ùå Manquant');
console.log('   - SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? '‚úÖ Configur√©' : '‚ùå Manquant');

// 2. Configuration attendue pour Groq
console.log('\nüîß Configuration Attendue pour Groq:');
console.log('   - Mod√®le: openai/gpt-oss-120b');
console.log('   - Reasoning effort: medium');
console.log('   - Temperature: 0.7');
console.log('   - Max completion tokens: 1000');
console.log('   - Top p: 0.9');

// 3. Payload de test
const testPayload = {
  model: 'openai/gpt-oss-120b',
  messages: [
    {
      role: 'system',
      content: 'Tu es un assistant IA avec capacit√© de raisonnement. Montre ton processus de pens√©e.'
    },
    {
      role: 'user',
      content: 'Explique-moi la th√©orie de la relativit√© en d√©tail.'
    }
  ],
  stream: true,
  temperature: 0.7,
  max_completion_tokens: 1000,
  top_p: 0.9,
  reasoning_effort: 'medium'
};

console.log('\nüì§ Payload de Test:');
console.log(JSON.stringify(testPayload, null, 2));

// 4. V√©rifications du code
console.log('\nüîç V√©rifications du Code:');

// V√©rifier si le fichier route.ts contient la gestion du reasoning pour Groq
const fs = require('fs');
const path = require('path');

const routePath = path.join(__dirname, '../src/app/api/chat/llm/route.ts');
if (fs.existsSync(routePath)) {
  const routeContent = fs.readFileSync(routePath, 'utf8');
  
  const checks = [
    {
      name: 'Gestion reasoning Groq dans Together AI section',
      condition: routeContent.includes('if (delta.reasoning_content && useGroq)') && routeContent.includes('Reasoning Groq d√©tect√©'),
      description: 'Gestion du reasoning pour Groq dans la section Together AI'
    },
    {
      name: 'Gestion reasoning Groq dans Groq section',
      condition: routeContent.includes('if (delta.reasoning_content && useGroq)') && routeContent.includes('Reasoning Groq d√©tect√©'),
      description: 'Gestion du reasoning pour Groq dans la section Groq'
    },
    {
      name: 'Payload reasoning_effort pour Groq',
      condition: routeContent.includes('reasoning_effort: \'medium\'') && routeContent.includes('// ‚úÖ Activer le reasoning pour Groq'),
      description: 'Configuration reasoning_effort dans le payload Groq'
    },
    {
      name: 'Broadcast llm-reasoning',
      condition: routeContent.includes('event: \'llm-reasoning\'') && routeContent.includes('reasoning: delta.reasoning_content'),
      description: 'Broadcast du reasoning en temps r√©el'
    }
  ];

  checks.forEach(check => {
    console.log(`   - ${check.name}: ${check.condition ? '‚úÖ' : '‚ùå'}`);
    if (!check.condition) {
      console.log(`     ${check.description}`);
    }
  });
} else {
  console.log('   - Fichier route.ts: ‚ùå Non trouv√©');
}

// 5. Instructions de test
console.log('\nüß™ Instructions de Test:');
console.log('1. Red√©marrez le serveur: npm run dev');
console.log('2. S√©lectionnez l\'agent Groq GPT-OSS');
console.log('3. Posez une question complexe (ex: "Explique-moi la th√©orie de la relativit√©")');
console.log('4. V√©rifiez que le reasoning appara√Æt en temps r√©el');
console.log('5. V√©rifiez les logs dans le terminal pour voir "üß† Reasoning Groq d√©tect√©"');

// 6. R√©sum√©
console.log('\nüìä R√©sum√©:');
const hasGroqApiKey = !!process.env.GROQ_API_KEY;
const hasSupabaseConfig = !!(process.env.NEXT_PUBLIC_SUPABASE_URL && process.env.SUPABASE_SERVICE_ROLE_KEY);

console.log(`   - Configuration API: ${hasGroqApiKey ? '‚úÖ' : '‚ùå'}`);
console.log(`   - Configuration Supabase: ${hasSupabaseConfig ? '‚úÖ' : '‚ùå'}`);

if (hasGroqApiKey && hasSupabaseConfig) {
  console.log('\nüéâ Configuration compl√®te ! Testez maintenant dans l\'interface.');
} else {
  console.log('\n‚ö†Ô∏è Probl√®mes de configuration d√©tect√©s.');
  if (!hasGroqApiKey) console.log('   - Ajoutez GROQ_API_KEY dans .env.local');
  if (!hasSupabaseConfig) console.log('   - V√©rifiez les variables Supabase');
} 