#!/usr/bin/env node

/**
 * Script de configuration du syst√®me OAuth Scrivia
 * Usage: node scripts/setup-oauth.js
 */

import bcrypt from 'bcryptjs';
import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes:');
  console.error('   - NEXT_PUBLIC_SUPABASE_URL');
  console.error('   - SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function setupOAuth() {
  console.log('üöÄ Configuration du syst√®me OAuth Scrivia...\n');

  try {
    // 1. V√©rifier la connexion √† la base
    console.log('1Ô∏è‚É£ V√©rification de la connexion √† la base...');
    const { data: testData, error: testError } = await supabase
      .from('oauth_clients')
      .select('count')
      .limit(1);

    if (testError) {
      console.log('   ‚ö†Ô∏è  Tables OAuth non trouv√©es, ex√©cution de la migration...');
      await runMigration();
    } else {
      console.log('   ‚úÖ Tables OAuth d√©j√† pr√©sentes');
    }

    // 2. Configuration des clients OAuth
    console.log('\n2Ô∏è‚É£ Configuration des clients OAuth...');
    await setupOAuthClients();

    // 3. V√©rification finale
    console.log('\n3Ô∏è‚É£ V√©rification finale...');
    await verifySetup();

    console.log('\nüéâ Configuration OAuth termin√©e avec succ√®s !');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('   1. Red√©marrer votre application');
    console.log('   2. Tester le flux OAuth avec ChatGPT');
    console.log('   3. V√©rifier les logs pour d√©tecter d\'√©ventuelles erreurs');

  } catch (error) {
    console.error('\n‚ùå Erreur lors de la configuration:', error);
    process.exit(1);
  }
}

async function runMigration() {
  console.log('   üìù Ex√©cution de la migration OAuth...');
  
  // Note: En production, utilisez Supabase CLI ou l'interface web
  // pour ex√©cuter les migrations
  console.log('   ‚ÑπÔ∏è  Veuillez ex√©cuter la migration SQL manuellement:');
  console.log('      - Allez dans votre dashboard Supabase');
  console.log('      - Onglet SQL Editor');
  console.log('      - Ex√©cutez le fichier: supabase/migrations/20241220000000_create_oauth_system.sql');
  
  // Attendre la confirmation de l'utilisateur
  console.log('\n   ‚è≥ Appuyez sur Entr√©e une fois la migration ex√©cut√©e...');
  await new Promise(resolve => {
    process.stdin.once('data', resolve);
  });
}

async function setupOAuthClients() {
  console.log('   üîë Configuration du client ChatGPT...');

  // G√©n√©rer le hash du secret
  const clientSecret = 'scrivia-gpt-secret-2024';
  const saltRounds = 12;
  const hashedSecret = await bcrypt.hash(clientSecret, saltRounds);

  // V√©rifier si le client existe d√©j√†
  const { data: existingClient } = await supabase
    .from('oauth_clients')
    .select('*')
    .eq('client_id', 'scrivia-custom-gpt')
    .single();

  if (existingClient) {
    console.log('   ‚úÖ Client ChatGPT d√©j√† configur√©');
    
    // Mettre √† jour le secret si n√©cessaire
    if (existingClient.client_secret_hash !== hashedSecret) {
      console.log('   üîÑ Mise √† jour du secret client...');
      await supabase
        .from('oauth_clients')
        .update({ client_secret_hash: hashedSecret })
        .eq('client_id', 'scrivia-custom-gpt');
      console.log('   ‚úÖ Secret client mis √† jour');
    }
  } else {
    console.log('   ‚ûï Cr√©ation du client ChatGPT...');
    
    const { error: insertError } = await supabase
      .from('oauth_clients')
      .insert({
        client_id: 'scrivia-custom-gpt',
        client_secret_hash: hashedSecret,
        name: 'Scrivia ChatGPT Action',
        description: 'Action personnalis√©e ChatGPT pour interagir avec l\'API Scrivia',
        redirect_uris: [
          'https://chat.openai.com/auth/callback',
          'https://scrivia.app/auth/callback'
        ],
        scopes: [
          'notes:read',
          'notes:write',
          'dossiers:read',
          'dossiers:write',
          'classeurs:read',
          'classeurs:write'
        ],
        is_active: true
      });

    if (insertError) {
      throw new Error(`Erreur cr√©ation client: ${insertError.message}`);
    }
    
    console.log('   ‚úÖ Client ChatGPT cr√©√©');
  }

  console.log('\n   üìã Informations de configuration ChatGPT:');
  console.log(`      Client ID: scrivia-custom-gpt`);
  console.log(`      Client Secret: ${clientSecret}`);
  console.log(`      Authorization URL: https://scrivia.app/api/auth/authorize`);
  console.log(`      Token URL: https://scrivia.app/api/auth/token`);
  console.log(`      Redirect URI: https://chat.openai.com/auth/callback`);
}

async function verifySetup() {
  console.log('   üîç V√©rification de la configuration...');

  // V√©rifier que le client est actif
  const { data: client, error: clientError } = await supabase
    .from('oauth_clients')
    .select('*')
    .eq('client_id', 'scrivia-custom-gpt')
    .eq('is_active', true)
    .single();

  if (clientError || !client) {
    throw new Error('Client OAuth non trouv√© ou inactif');
  }

  console.log('   ‚úÖ Client OAuth actif et configur√©');
  console.log(`   ‚úÖ Scopes disponibles: ${client.scopes.join(', ')}`);
  console.log(`   ‚úÖ Redirect URIs: ${client.redirect_uris.join(', ')}`);

  // V√©rifier que les tables existent
  const tables = ['oauth_authorization_codes', 'oauth_access_tokens', 'oauth_refresh_tokens'];
  for (const table of tables) {
    const { error: tableError } = await supabase
      .from(table)
      .select('count')
      .limit(1);
    
    if (tableError) {
      throw new Error(`Table ${table} non accessible: ${tableError.message}`);
    }
  }

  console.log('   ‚úÖ Toutes les tables OAuth sont accessibles');
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error);
  process.exit(1);
});

// Ex√©cuter la configuration
setupOAuth().catch(console.error);
