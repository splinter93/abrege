#!/usr/bin/env node

/**
 * Script de v√©rification du syst√®me de tools nettoy√©
 * V√©rifie que le syst√®me utilise maintenant uniquement OpenAPI et plus de tools obsol√®tes
 */

const { agentApiV2Tools } = require('../src/services/agentApiV2Tools.ts');

async function verifyCleanToolsSystem() {
  console.log('üßπ V√âRIFICATION DU SYST√àME DE TOOLS NETTOY√â');
  console.log('============================================\n');

  try {
    // Attendre que l'initialisation soit compl√®te
    console.log('‚è≥ Attente de l\'initialisation OpenAPI...');
    await agentApiV2Tools.waitForInitialization();
    
    // Obtenir la liste des tools disponibles
    const availableTools = agentApiV2Tools.getAvailableTools();
    const toolsForFunctionCalling = agentApiV2Tools.getToolsForFunctionCalling();
    
    console.log('üìä R√âSULTATS DU NETTOYAGE:');
    console.log('==========================');
    console.log(`   ‚Ä¢ Tools disponibles: ${availableTools.length}`);
    console.log(`   ‚Ä¢ Tools pour function calling: ${toolsForFunctionCalling.length}`);
    
    console.log('\nüîß TOOLS DISPONIBLES:');
    console.log('=====================');
    if (availableTools.length > 0) {
      availableTools.forEach((toolName, index) => {
        console.log(`   ${index + 1}. ${toolName}`);
      });
    } else {
      console.log('   ‚ùå Aucun tool disponible');
    }
    
    console.log('\nüéØ TOOLS POUR FUNCTION CALLING:');
    console.log('===============================');
    if (toolsForFunctionCalling.length > 0) {
      toolsForFunctionCalling.forEach((tool, index) => {
        console.log(`   ${index + 1}. ${tool.function.name}`);
        console.log(`      Description: ${tool.function.description}`);
      });
    } else {
      console.log('   ‚ùå Aucun tool pour function calling');
    }
    
    // V√©rifier qu'il n'y a plus de tools obsol√®tes
    const obsoleteTools = [
      'add_content_to_section',
      'clear_section', 
      'erase_section',
      'merge_note',
      'publish_note',
      'get_note_metadata',
      'get_note_insights',
      'get_note_statistics',
      'delete_folder',
      'delete_notebook',
      'generate_slug'
    ];
    
    const foundObsoleteTools = availableTools.filter(tool => obsoleteTools.includes(tool));
    
    console.log('\nüö® V√âRIFICATION DES TOOLS OBSOL√àTES:');
    console.log('====================================');
    if (foundObsoleteTools.length === 0) {
      console.log('   ‚úÖ Aucun tool obsol√®te trouv√© - Nettoyage r√©ussi !');
    } else {
      console.log('   ‚ùå Tools obsol√®tes encore pr√©sents:');
      foundObsoleteTools.forEach(tool => {
        console.log(`      ‚Ä¢ ${tool}`);
      });
    }
    
    // V√©rifier que les tools sont bas√©s sur OpenAPI
    console.log('\nüîç V√âRIFICATION DE LA SOURCE OPENAPI:');
    console.log('=====================================');
    
    // Les tools OpenAPI ont des noms en camelCase (ex: createNote, getNote)
    const openApiTools = availableTools.filter(tool => 
      tool.match(/^[a-z][a-zA-Z0-9]*$/) && // camelCase
      !tool.includes('_') // Pas de snake_case
    );
    
    const nonOpenApiTools = availableTools.filter(tool => 
      !tool.match(/^[a-z][a-zA-Z0-9]*$/) || // Pas camelCase
      tool.includes('_') // snake_case
    );
    
    console.log(`   ‚Ä¢ Tools OpenAPI (camelCase): ${openApiTools.length}`);
    console.log(`   ‚Ä¢ Tools non-OpenAPI (snake_case): ${nonOpenApiTools.length}`);
    
    if (nonOpenApiTools.length === 0) {
      console.log('   ‚úÖ Tous les tools sont bas√©s sur OpenAPI !');
    } else {
      console.log('   ‚ö†Ô∏è  Tools non-OpenAPI trouv√©s:');
      nonOpenApiTools.forEach(tool => {
        console.log(`      ‚Ä¢ ${tool}`);
      });
    }
    
    console.log('\nüìà R√âSUM√â FINAL:');
    console.log('================');
    console.log(`   ‚Ä¢ Total tools: ${availableTools.length}`);
    console.log(`   ‚Ä¢ Tools obsol√®tes: ${foundObsoleteTools.length}`);
    console.log(`   ‚Ä¢ Tools non-OpenAPI: ${nonOpenApiTools.length}`);
    console.log(`   ‚Ä¢ Tools OpenAPI: ${openApiTools.length}`);
    
    if (foundObsoleteTools.length === 0 && nonOpenApiTools.length === 0) {
      console.log('\nüéâ SUCC√àS ! Le syst√®me de tools est maintenant propre et bas√© uniquement sur OpenAPI !');
    } else {
      console.log('\n‚ö†Ô∏è  ATTENTION ! Le nettoyage n\'est pas complet.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error);
  }
}

// Ex√©cuter la v√©rification
verifyCleanToolsSystem().catch(console.error);
