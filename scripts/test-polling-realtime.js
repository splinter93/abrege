require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Variables d\'environnement Supabase manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Simulation du service de polling
class PollingSimulator {
  constructor(userId) {
    this.userId = userId;
    this.lastTimestamps = new Map();
    this.lastCounts = new Map();
    this.isRunning = false;
  }

  async startPolling(table, interval = 2000) {
    if (this.isRunning) {
      console.log(`[Simulator] ‚ö†Ô∏è Polling d√©j√† actif pour ${table}`);
      return;
    }

    console.log(`[Simulator] üîÑ D√©marrage polling pour ${table} (${interval}ms)`);
    this.isRunning = true;

    const poll = async () => {
      if (!this.isRunning) return;

      try {
        await this.checkForChanges(table);
      } catch (error) {
        console.error(`[Simulator] ‚ùå Erreur polling ${table}:`, error);
      }

      // Continuer le polling
      setTimeout(poll, interval);
    };

    // D√©marrer le premier polling
    poll();
  }

  stopPolling() {
    console.log(`[Simulator] ‚èπÔ∏è Arr√™t du polling`);
    this.isRunning = false;
  }

  async checkForChanges(table) {
    console.log(`[Simulator] üîç V√©rification changements pour ${table}...`);
    
    // V√©rifier les UPDATE
    await this.checkForUpdates(table);
    
    // V√©rifier les INSERT/DELETE
    await this.checkForStructureChanges(table);
  }

  async checkForUpdates(table) {
    const lastTimestamp = this.lastTimestamps.get(table);
    
    console.log(`[Simulator] üìä V√©rification UPDATE pour ${table} (lastTimestamp: ${lastTimestamp || 'aucun'})`);

    let query = supabase.from(table).select('*').eq('user_id', this.userId).order('updated_at', { ascending: false }).limit(10);
    
    if (lastTimestamp) {
      query = query.gt('updated_at', lastTimestamp);
    }

    const { data, error } = await query;

    if (error) {
      console.error(`[Simulator] ‚ùå Erreur polling UPDATE ${table}:`, error);
      return;
    }

    console.log(`[Simulator] üìä R√©sultats UPDATE ${table}: ${data?.length || 0} √©l√©ments`);

    if (data && data.length > 0) {
      // Mettre √† jour le timestamp avec le plus r√©cent
      const latestTimestamp = data.reduce((max, item) => 
        item.updated_at > max ? item.updated_at : max, 
        this.lastTimestamps.get(table) || ''
      );
      this.lastTimestamps.set(table, latestTimestamp);

      console.log(`[Simulator] ‚úÖ ${data.length} UPDATE(s) d√©tect√©(s) pour ${table}`);

      // Simuler les notifications
      data.forEach(item => {
        console.log(`[Simulator] üì° Notification UPDATE pour ${table}:`, {
          id: item.id,
          title: item.source_title || item.name,
          updated_at: item.updated_at
        });
      });
    } else {
      console.log(`[Simulator] ‚è≠Ô∏è Aucun UPDATE d√©tect√© pour ${table}`);
    }
  }

  async checkForStructureChanges(table) {
    const { count, error } = await supabase
      .from(table)
      .select('*', { count: 'exact', head: true })
      .eq('user_id', this.userId);

    if (error) {
      console.error(`[Simulator] ‚ùå Erreur polling structure ${table}:`, error);
      return;
    }

    const currentCount = count || 0;
    const lastCount = this.lastCounts.get(table);

    if (lastCount !== undefined && lastCount !== currentCount) {
      if (currentCount > lastCount) {
        console.log(`[Simulator] ‚ûï INSERT d√©tect√© pour ${table}: ${currentCount - lastCount} √©l√©ment(s)`);
      } else if (currentCount < lastCount) {
        console.log(`[Simulator] ‚ûñ DELETE d√©tect√© pour ${table}: ${lastCount - currentCount} √©l√©ment(s)`);
      }
      this.lastCounts.set(table, currentCount);
    } else if (lastCount === undefined) {
      console.log(`[Simulator] üìä Initialisation compteur pour ${table}: ${currentCount}`);
      this.lastCounts.set(table, currentCount);
    }
  }
}

async function testRealtimePolling() {
  try {
    console.log('üß™ Test du polling en temps r√©el...');
    
    const USER_ID = "3223651c-5580-4471-affb-b3f4456bd729";
    const simulator = new PollingSimulator(USER_ID);
    
    // D√©marrer le polling pour les articles
    await simulator.startPolling('articles', 3000);
    
    // D√©marrer le polling pour les dossiers
    await simulator.startPolling('folders', 5000);
    
    console.log('\nüîÑ Polling en cours... (Ctrl+C pour arr√™ter)');
    
    // Arr√™ter apr√®s 30 secondes
    setTimeout(() => {
      console.log('\n‚èπÔ∏è Arr√™t du polling...');
      simulator.stopPolling();
      process.exit(0);
    }, 30000);
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de polling realtime:', error);
  }
}

testRealtimePolling(); 