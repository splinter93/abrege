const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testDonnaAgent() {
  console.log('üîç TEST DE L\'AGENT DONNA');
  console.log('=' .repeat(40));

  try {
    // 1. R√©cup√©rer tous les agents
    console.log('\nüìä 1. R√©cup√©ration de tous les agents...');
    
    const { data: agents, error: error1 } = await supabase
      .from('agents')
      .select('*')
      .eq('is_active', true);

    if (error1) {
      console.error('‚ùå Erreur r√©cup√©ration agents:', error1);
      return;
    }

    console.log(`‚úÖ ${agents.length} agents actifs trouv√©s`);
    
    // 2. Chercher Donna sp√©cifiquement
    console.log('\nüéØ 2. Recherche de l\'agent Donna...');
    
    const donna = agents.find(a => a.name.toLowerCase().includes('donna'));
    
    if (donna) {
      console.log('‚úÖ Donna trouv√©e !');
      console.log(`   - ID: ${donna.id}`);
      console.log(`   - Nom: ${donna.name}`);
      console.log(`   - Mod√®le: ${donna.model}`);
      console.log(`   - Temp√©rature: ${donna.temperature}`);
      console.log(`   - Instructions: ${donna.system_instructions?.substring(0, 100)}...`);
      console.log(`   - Capacit√©s: ${donna.capabilities?.join(', ')}`);
      console.log(`   - Par d√©faut: ${donna.is_default ? 'Oui' : 'Non'}`);
    } else {
      console.log('‚ùå Donna non trouv√©e');
      console.log('Agents disponibles:');
      agents.forEach(agent => {
        console.log(`   - ${agent.name} (${agent.model})`);
      });
    }

    // 3. Tester la r√©cup√©ration par ID
    if (donna) {
      console.log('\nüîç 3. Test de r√©cup√©ration par ID...');
      
      const { data: donnaById, error: error2 } = await supabase
        .from('agents')
        .select('*')
        .eq('id', donna.id)
        .single();

      if (error2) {
        console.error('‚ùå Erreur r√©cup√©ration par ID:', error2);
      } else {
        console.log('‚úÖ R√©cup√©ration par ID r√©ussie');
        console.log(`   - Nom: ${donnaById.name}`);
        console.log(`   - Mod√®le: ${donnaById.model}`);
      }
    }

    // 4. V√©rifier la configuration compl√®te
    if (donna) {
      console.log('\n‚öôÔ∏è 4. V√©rification de la configuration...');
      
      const requiredFields = ['model', 'max_tokens', 'system_instructions', 'context_template', 'api_config'];
      const missingFields = requiredFields.filter(field => !donna[field]);
      
      if (missingFields.length > 0) {
        console.warn(`‚ö†Ô∏è Champs manquants: ${missingFields.join(', ')}`);
      } else {
        console.log('‚úÖ Configuration compl√®te');
      }
      
      console.log('\nüìã Configuration d√©taill√©e:');
      console.log(`   - Mod√®le: ${donna.model}`);
      console.log(`   - Max tokens: ${donna.max_tokens}`);
      console.log(`   - Temp√©rature: ${donna.temperature}`);
      console.log(`   - Top P: ${donna.top_p}`);
      console.log(`   - API Config: ${JSON.stringify(donna.api_config)}`);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

testDonnaAgent(); 