#!/bin/bash

# üöÄ Script de Correction des Blocants Production
# Date: 12 Octobre 2025
# Usage: bash scripts/fix-production-blockers.sh

set -e  # Exit on error

echo "üöÄ CORRECTION DES BLOCANTS PRODUCTION"
echo "===================================="
echo ""

# Couleurs
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 1. V√©rifier si .env.production existe
echo -e "${BLUE}[1/5] V√©rification du fichier .env.production...${NC}"
if [ -f ".env.production" ]; then
    echo -e "${RED}‚ö†Ô∏è  ALERTE : .env.production trouv√© dans le d√©p√¥t !${NC}"
    echo ""
    echo -e "${YELLOW}ACTION REQUISE MANUELLEMENT :${NC}"
    echo "1. R√©voquer ces cl√©s API :"
    echo "   - Supabase: https://supabase.com/dashboard"
    echo "   - Groq: https://console.groq.com/"
    echo "   - DeepSeek: https://platform.deepseek.com/"
    echo "   - Together AI: https://together.ai/"
    echo ""
    echo "2. Cr√©er nouvelles cl√©s API"
    echo ""
    echo "3. Configurer sur Vercel Dashboard"
    echo ""
    echo "4. Puis ex√©cuter:"
    echo "   git filter-repo --path .env.production --invert-paths"
    echo ""
    read -p "Appuyez sur Entr√©e quand c'est fait..."
else
    echo -e "${GREEN}‚úÖ Pas de .env.production dans le d√©p√¥t${NC}"
fi
echo ""

# 2. Ajouter au .gitignore
echo -e "${BLUE}[2/5] Mise √† jour du .gitignore...${NC}"
if ! grep -q "^\.env\.production$" .gitignore 2>/dev/null; then
    echo ".env.production" >> .gitignore
    echo ".env.local" >> .gitignore
    echo ".env.*.local" >> .gitignore
    echo -e "${GREEN}‚úÖ .gitignore mis √† jour${NC}"
else
    echo -e "${GREEN}‚úÖ .gitignore d√©j√† √† jour${NC}"
fi
echo ""

# 3. Remplacer console.log par logger.dev
echo -e "${BLUE}[3/5] Remplacement des console.log par logger.dev...${NC}"
echo "Fichiers √† corriger :"
find src -type f \( -name "*.ts" -o -name "*.tsx" -o -name "*.js" \) \
    -exec grep -l "console\.log\|console\.debug" {} \; | head -10

read -p "Voulez-vous remplacer automatiquement ? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    # Backup
    mkdir -p .backups
    tar -czf ".backups/before-console-fix-$(date +%Y%m%d-%H%M%S).tar.gz" src/
    
    # Remplacement
    find src -type f \( -name "*.ts" -o -name "*.tsx" \) \
        -exec sed -i '' 's/console\.log(/logger.dev(/g' {} \;
    find src -type f \( -name "*.ts" -o -name "*.tsx" \) \
        -exec sed -i '' 's/console\.debug(/logger.dev(/g' {} \;
    
    echo -e "${GREEN}‚úÖ console.log remplac√©s (backup dans .backups/)${NC}"
else
    echo -e "${YELLOW}‚è≠  Skipped${NC}"
fi
echo ""

# 4. Corriger les variables inutilis√©es
echo -e "${BLUE}[4/5] Correction automatique ESLint...${NC}"
npm run lint:fix
echo -e "${GREEN}‚úÖ ESLint fix√© automatiquement${NC}"
echo ""

# 5. V√©rifier TypeScript
echo -e "${BLUE}[5/5] V√©rification TypeScript...${NC}"
if grep -q '"strict": false' tsconfig.json; then
    echo -e "${YELLOW}‚ö†Ô∏è  TypeScript strict mode d√©sactiv√©${NC}"
    echo ""
    echo "Pour activer (RECOMMAND√â) :"
    echo "  sed -i '' 's/\"strict\": false/\"strict\": true/' tsconfig.json"
    echo ""
    read -p "Activer maintenant ? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sed -i '' 's/"strict": false/"strict": true/' tsconfig.json
        echo -e "${GREEN}‚úÖ TypeScript strict mode activ√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Lancez 'npm run audit' pour voir les erreurs √† corriger${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ TypeScript strict mode d√©j√† activ√©${NC}"
fi
echo ""

# R√©sum√©
echo ""
echo "========================================"
echo -e "${GREEN}‚úÖ CORRECTIONS TERMIN√âES${NC}"
echo "========================================"
echo ""
echo "PROCHAINES √âTAPES :"
echo ""
echo "1. V√©rifier le build :"
echo "   npm run build"
echo ""
echo "2. Corriger les erreurs TypeScript restantes :"
echo "   npm run audit"
echo ""
echo "3. Tester localement :"
echo "   npm run dev"
echo ""
echo "4. Configurer les variables sur Vercel :"
echo "   https://vercel.com/dashboard"
echo ""
echo "5. D√©ployer :"
echo "   git add ."
echo "   git commit -m 'fix: corrections blocants production'"
echo "   git push"
echo ""
echo -e "${BLUE}üìÑ Voir d√©tails : AUDIT-PRODUCTION-COMPLET-OCT2025.md${NC}"





