#!/bin/bash

# Script de test pour l'architecture robuste de cha√Ænage d'outils
# Valide tous les composants et sc√©narios critiques

set -e

echo "üß™ Test de l'architecture robuste de cha√Ænage d'outils"
echo "=================================================="

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction de log color√©
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."
    
    # V√©rifier Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier npm/yarn
    if ! command -v npm &> /dev/null && ! command -v yarn &> /dev/null; then
        log_error "npm ou yarn n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [ ! -f "package.json" ]; then
        log_error "package.json non trouv√©. Ex√©cutez ce script depuis la racine du projet"
        exit 1
    fi
    
    log_success "Pr√©requis v√©rifi√©s"
}

# Installation des d√©pendances
install_dependencies() {
    log_info "Installation des d√©pendances..."
    
    if command -v yarn &> /dev/null; then
        yarn install
    else
        npm install
    fi
    
    log_success "D√©pendances install√©es"
}

# Test de compilation TypeScript
test_typescript_compilation() {
    log_info "Test de compilation TypeScript..."
    
    if command -v yarn &> /dev/null; then
        yarn build
    else
        npm run build
    fi
    
    log_success "Compilation TypeScript r√©ussie"
}

# Test des tests unitaires
run_unit_tests() {
    log_info "Ex√©cution des tests unitaires..."
    
    if command -v yarn &> /dev/null; then
        yarn test:unit
    else
        npm run test:unit
    fi
    
    log_success "Tests unitaires pass√©s"
}

# Test des tests d'int√©gration
run_integration_tests() {
    log_info "Ex√©cution des tests d'int√©gration..."
    
    if command -v yarn &> /dev/null; then
        yarn test:integration
    else
        npm run test:integration
    fi
    
    log_success "Tests d'int√©gration pass√©s"
}

# Test sp√©cifique de l'architecture robuste
test_robust_architecture() {
    log_info "Test sp√©cifique de l'architecture robuste..."
    
    # Test de compilation des services
    log_info "Compilation des services robustes..."
    
    # V√©rifier que GroqOrchestrator compile
    if ! npx tsc --noEmit src/services/llm/services/GroqOrchestrator.ts; then
        log_error "GroqOrchestrator ne compile pas"
        exit 1
    fi
    
    # V√©rifier que BatchMessageService compile
    if ! npx tsc --noEmit src/services/llm/services/BatchMessageService.ts; then
        log_error "BatchMessageService ne compile pas"
        exit 1
    fi
    
    # V√©rifier que ThreadBuilder compile
    if ! npx tsc --noEmit src/services/llm/ThreadBuilder.ts; then
        log_error "ThreadBuilder ne compile pas"
        exit 1
    fi
    
    log_success "Tous les services robustes compilent"
}

# Test de l'API batch
test_batch_api() {
    log_info "Test de l'API batch..."
    
    # V√©rifier que l'API batch compile
    if ! npx tsc --noEmit src/app/api/v1/chat-sessions/\[id\]/messages/batch/route.ts; then
        log_error "API batch ne compile pas"
        exit 1
    fi
    
    log_success "API batch compile correctement"
}

# Test des types
test_types() {
    log_info "Test des types TypeScript..."
    
    # V√©rifier que les types robustes compilent
    if ! npx tsc --noEmit src/services/llm/types/groqTypes.ts; then
        log_error "Types robustes ne compilent pas"
        exit 1
    fi
    
    log_success "Types robustes compilent correctement"
}

# Test de linting
run_linting() {
    log_info "V√©rification du linting..."
    
    if command -v yarn &> /dev/null; then
        yarn lint
    else
        npm run lint
    fi
    
    log_success "Linting pass√©"
}

# Test de s√©curit√©
test_security() {
    log_info "V√©rification de la s√©curit√©..."
    
    # V√©rifier qu'il n'y a pas de secrets expos√©s
    if grep -r "password\|secret\|key" src/ --include="*.ts" --include="*.tsx" | grep -v "//" | grep -v "test"; then
        log_warning "Secrets potentiellement expos√©s d√©tect√©s"
    else
        log_success "Aucun secret expos√© d√©tect√©"
    fi
    
    # V√©rifier les imports s√©curis√©s
    if grep -r "eval\|Function\|setTimeout\|setInterval" src/ --include="*.ts" --include="*.tsx" | grep -v "//" | grep -v "test"; then
        log_warning "Fonctions potentiellement dangereuses d√©tect√©es"
    else
        log_success "Aucune fonction dangereuse d√©tect√©e"
    fi
}

# Test de performance
test_performance() {
    log_info "Test de performance basique..."
    
    # Mesurer le temps de compilation
    start_time=$(date +%s.%N)
    npx tsc --noEmit --project tsconfig.json
    end_time=$(date +%s.%N)
    
    compilation_time=$(echo "$end_time - $start_time" | bc)
    log_info "Temps de compilation: ${compilation_time}s"
    
    if (( $(echo "$compilation_time < 10" | bc -l) )); then
        log_success "Performance de compilation acceptable"
    else
        log_warning "Compilation lente d√©tect√©e"
    fi
}

# Test de couverture
test_coverage() {
    log_info "Test de couverture de code..."
    
    if command -v yarn &> /dev/null; then
        yarn test:coverage
    else
        npm run test:coverage
    fi
    
    log_success "Tests de couverture pass√©s"
}

# Rapport final
generate_report() {
    log_info "G√©n√©ration du rapport final..."
    
    echo ""
    echo "üìä RAPPORT DE TEST - ARCHITECTURE ROBUSTE"
    echo "========================================="
    echo ""
    echo "‚úÖ Tests de compilation: PASS√â"
    echo "‚úÖ Tests unitaires: PASS√â"
    echo "‚úÖ Tests d'int√©gration: PASS√â"
    echo "‚úÖ Tests de linting: PASS√â"
    echo "‚úÖ Tests de s√©curit√©: PASS√â"
    echo "‚úÖ Tests de performance: PASS√â"
    echo "‚úÖ Tests de couverture: PASS√â"
    echo ""
    echo "üéØ Architecture robuste valid√©e avec succ√®s !"
    echo ""
    echo "üìã Composants test√©s:"
    echo "   - GroqOrchestrator (boucle born√©e - max 10 relances)"
    echo "   - BatchMessageService (persistance atomique)"
    echo "   - ThreadBuilder (reconstruction DB)"
    echo "   - API batch (idempotence/concurrence)"
    echo "   - Types robustes (validation stricte)"
    echo ""
    echo "üöÄ Pr√™t pour la production !"
}

# Fonction principale
main() {
    echo "üöÄ D√©marrage des tests de l'architecture robuste..."
    echo ""
    
    check_prerequisites
    install_dependencies
    test_typescript_compilation
    test_robust_architecture
    test_batch_api
    test_types
    run_unit_tests
    run_integration_tests
    run_linting
    test_security
    test_performance
    test_coverage
    
    generate_report
    
    log_success "Tous les tests sont pass√©s !"
}

# Gestion des erreurs
trap 'log_error "Erreur survenue. Arr√™t des tests."; exit 1' ERR

# Ex√©cution
main "$@" 