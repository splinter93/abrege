#!/usr/bin/env node

/**
 * üß™ Test Rapide des Function Calls
 * 
 * Teste si le code de function calling fonctionne en for√ßant les outils
 */

console.log('üß™ TEST RAPIDE DES FUNCTION CALLS');
console.log('==================================');

console.log('\nüìã SIMULATION D\'UNE REQU√äTE AVEC FUNCTION CALLING:');

// Simuler une requ√™te avec function calling activ√©
const testRequest = {
  message: "Cr√©er une note 'Test Function Call' avec le contenu 'Ceci est un test'",
  context: {
    agentId: "donna-agent", // Agent Donna avec DeepSeek
    sessionId: "test-session-123"
  },
  history: [],
  provider: "deepseek",
  channelId: "test-channel-123"
};

console.log('\nüì§ Requ√™te simul√©e:');
console.log(JSON.stringify(testRequest, null, 2));

console.log('\nüîß ANALYSE DU CODE (ligne 180):');
console.log('   const tools = agentConfig?.api_v2_capabilities?.length > 0');
console.log('     ? agentApiV2Tools.getToolsForFunctionCalling()');
console.log('     : undefined;');

console.log('\n‚ùå **PROBL√àME IDENTIFI√â:**');
console.log('   - agentConfig.api_v2_capabilities est null ou []');
console.log('   - Donc tools = undefined');
console.log('   - Pas de function calling activ√©');

console.log('\n‚úÖ **SOLUTION TEMPORAIRE POUR TESTER:**');
console.log('   Modifier temporairement la ligne 180 dans src/app/api/chat/llm/route.ts:');
console.log('   ');
console.log('   // AVANT (ligne 180):');
console.log('   const tools = agentConfig?.api_v2_capabilities?.length > 0');
console.log('     ? agentApiV2Tools.getToolsForFunctionCalling()');
console.log('     : undefined;');
console.log('   ');
console.log('   // APR√àS (pour test):');
console.log('   const tools = agentApiV2Tools.getToolsForFunctionCalling(); // Force les outils');

console.log('\nüîç **TEST MANUEL:**');
console.log('   1. Modifier la ligne 180 comme indiqu√© ci-dessus');
console.log('   2. Red√©marrer l\'application: npm run dev');
console.log('   3. Tester avec Donna: "Cr√©er une note de test"');
console.log('   4. V√©rifier les logs pour voir si les tool_calls sont d√©tect√©s');

console.log('\nüìä **R√âSULTATS ATTENDUS:**');
console.log('   ‚úÖ Si les tool_calls sont d√©tect√©s: Le code fonctionne');
console.log('   ‚ùå Si pas de tool_calls: Probl√®me dans le parsing ou l\'ex√©cution');

console.log('\nüéØ **√âTAPES DE TEST:**');

console.log('\n1Ô∏è‚É£ **Modifier le code temporairement**');
console.log('   Dans src/app/api/chat/llm/route.ts, ligne 180:');
console.log('   Remplacer la condition par: const tools = agentApiV2Tools.getToolsForFunctionCalling();');

console.log('\n2Ô∏è‚É£ **Red√©marrer l\'application**');
console.log('   npm run dev');

console.log('\n3Ô∏è‚É£ **Tester avec Donna**');
console.log('   Message: "Cr√©er une note \'Test Function Call\' avec le contenu \'Ceci est un test\'"');

console.log('\n4Ô∏è‚É£ **V√©rifier les logs**');
console.log('   Chercher: [DEV] [LLM API] üîß Tool calls d√©tect√©s');
console.log('   Ou: [DEV] [LLM API] üéØ ON ENTRE DANS LE BLOC FUNCTION CALL !');

console.log('\n5Ô∏è‚É£ **Restaurer le code**');
console.log('   Remettre la condition originale apr√®s le test');

console.log('\nüîß **OUTILS DISPONIBLES POUR TEST:**');
console.log('   - create_note: Cr√©er une nouvelle note');
console.log('   - update_note: Modifier une note existante');
console.log('   - add_content_to_note: Ajouter du contenu √† une note');
console.log('   - move_note: D√©placer une note');
console.log('   - delete_note: Supprimer une note');
console.log('   - create_folder: Cr√©er un dossier');

console.log('\nüìã **EXEMPLES DE TESTS:**');
console.log('   "Cr√©er une note \'Mon Test\' avec le contenu \'Hello World\'"');
console.log('   "Ajouter \'Nouveau paragraphe\' √† ma note \'Mon Test\'"');
console.log('   "Cr√©er un dossier \'Mes Tests\'"');
console.log('   "D√©placer ma note \'Mon Test\' vers le dossier \'Mes Tests\'"');

console.log('\n‚úÖ **CONCLUSION:**');
console.log('   Ce test permettra de v√©rifier si le code de function calling');
console.log('   fonctionne correctement une fois les outils activ√©s.');
console.log('   Si √ßa marche, le probl√®me est bien la configuration des agents.');
console.log('   Si √ßa ne marche pas, il y a un probl√®me dans le code.');

console.log('\nüöÄ **PROCHAINES ACTIONS:**');
console.log('   1. Modifier temporairement la ligne 180');
console.log('   2. Tester avec Donna');
console.log('   3. V√©rifier les logs');
console.log('   4. Restaurer le code');
console.log('   5. Appliquer la migration si le test fonctionne'); 