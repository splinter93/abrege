const API_KEY = 'your-api-key-here'; // Remplacez par votre vraie cl√© API
const BASE_URL = 'https://scrivia.app/api/v2';

// Configuration des tests
const TEST_CONFIG = {
  classeur_id: '552334a9-f012-41f3-a5eb-74ab9ab713ed', // ID de test
  delay: 1000 // D√©lai entre les tests en ms
};

// Fonction utilitaire pour attendre
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Fonction utilitaire pour logger
function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const emoji = type === 'success' ? '‚úÖ' : type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
  console.log(`${emoji} [${timestamp}] ${message}`);
}

// Test de l'endpoint /me
async function testMe() {
  try {
    log('üß™ Test de l\'endpoint /me...');
    
    const response = await fetch(`${BASE_URL}/me`, {
      method: 'GET',
      headers: {
        'X-API-Key': API_KEY
      }
    });

    if (response.ok) {
      const data = await response.json();
      log(`‚úÖ Profil utilisateur r√©cup√©r√©: ${data.user?.email || 'N/A'}`, 'success');
    } else {
      const errorData = await response.text();
      log(`‚ùå Erreur /me: ${response.status} - ${errorData}`, 'error');
    }
  } catch (error) {
    log(`üí• Erreur de connexion /me: ${error.message}`, 'error');
  }
}

// Test de l'endpoint /classeurs
async function testClasseurs() {
  try {
    log('üß™ Test de l\'endpoint /classeurs...');
    
    // Test GET
    const getResponse = await fetch(`${BASE_URL}/classeurs`, {
      method: 'GET',
      headers: {
        'X-API-Key': API_KEY
      }
    });

    if (getResponse.ok) {
      const data = await getResponse.json();
      log(`‚úÖ ${data.classeurs?.length || 0} classeurs r√©cup√©r√©s`, 'success');
    } else {
      const errorData = await getResponse.text();
      log(`‚ùå Erreur GET /classeurs: ${getResponse.status} - ${errorData}`, 'error');
    }

    await delay(TEST_CONFIG.delay);

    // Test POST
    const postResponse = await fetch(`${BASE_URL}/classeurs`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      },
      body: JSON.stringify({
        name: 'Classeur de test API v2',
        description: 'Classeur cr√©√© pour tester l\'API v2',
        emoji: 'üß™',
        color: '#ff6b6b'
      })
    });

    if (postResponse.ok) {
      const data = await postResponse.json();
      log(`‚úÖ Classeur cr√©√© avec succ√®s: ${data.classeur?.name}`, 'success');
      // Stocker l'ID pour les tests suivants
      TEST_CONFIG.test_classeur_id = data.classeur.id;
    } else {
      const errorData = await postResponse.text();
      log(`‚ùå Erreur POST /classeurs: ${postResponse.status} - ${errorData}`, 'error');
    }
  } catch (error) {
    log(`üí• Erreur de connexion /classeurs: ${error.message}`, 'error');
  }
}

// Test de l'endpoint /notes
async function testNotes() {
  try {
    log('üß™ Test de l\'endpoint /notes...');
    
    // Test GET avec pagination
    const getResponse = await fetch(`${BASE_URL}/notes?limit=5&offset=0`, {
      method: 'GET',
      headers: {
        'X-API-Key': API_KEY
      }
    });

    if (getResponse.ok) {
      const data = await getResponse.json();
      log(`‚úÖ ${data.notes?.length || 0} notes r√©cup√©r√©es (total: ${data.total})`, 'success');
    } else {
      const errorData = await getResponse.text();
      log(`‚ùå Erreur GET /notes: ${getResponse.status} - ${errorData}`, 'error');
    }

    await delay(TEST_CONFIG.delay);

    // Test POST
    const postResponse = await fetch(`${BASE_URL}/notes`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      },
      body: JSON.stringify({
        source_title: 'Note de test API v2',
        markdown_content: '# Note de test\n\nCette note a √©t√© cr√©√©e via l\'API v2.\n\n## Contenu\n- Test 1\n- Test 2\n\n**Bold text** et *italic text*.',
        classeur_id: TEST_CONFIG.classeur_id
      })
    });

    if (postResponse.ok) {
      const data = await postResponse.json();
      log(`‚úÖ Note cr√©√©e avec succ√®s: ${data.note?.source_title}`, 'success');
      // Stocker l'ID pour les tests suivants
      TEST_CONFIG.test_note_id = data.note.id;
    } else {
      const errorData = await postResponse.text();
      log(`‚ùå Erreur POST /notes: ${postResponse.status} - ${errorData}`, 'error');
    }
  } catch (error) {
    log(`üí• Erreur de connexion /notes: ${error.message}`, 'error');
  }
}

// Test de l'endpoint /folders
async function testFolders() {
  try {
    log('üß™ Test de l\'endpoint /folders...');
    
    // Test GET
    const getResponse = await fetch(`${BASE_URL}/folders`, {
      method: 'GET',
      headers: {
        'X-API-Key': API_KEY
      }
    });

    if (getResponse.ok) {
      const data = await getResponse.json();
      log(`‚úÖ ${data.folders?.length || 0} dossiers r√©cup√©r√©s`, 'success');
    } else {
      const errorData = await getResponse.text();
      log(`‚ùå Erreur GET /folders: ${getResponse.status} - ${errorData}`, 'error');
    }

    await delay(TEST_CONFIG.delay);

    // Test POST
    const postResponse = await fetch(`${BASE_URL}/folders`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      },
      body: JSON.stringify({
        name: 'Dossier de test API v2',
        classeur_id: TEST_CONFIG.classeur_id,
        position: 0
      })
    });

    if (postResponse.ok) {
      const data = await postResponse.json();
      log(`‚úÖ Dossier cr√©√© avec succ√®s: ${data.folder?.name}`, 'success');
      // Stocker l'ID pour les tests suivants
      TEST_CONFIG.test_folder_id = data.folder.id;
    } else {
      const errorData = await postResponse.text();
      log(`‚ùå Erreur POST /folders: ${postResponse.status} - ${errorData}`, 'error');
    }
  } catch (error) {
    log(`üí• Erreur de connexion /folders: ${error.message}`, 'error');
  }
}

// Test de l'endpoint /search
async function testSearch() {
  try {
    log('üß™ Test de l\'endpoint /search...');
    
    const response = await fetch(`${BASE_URL}/search?q=test&limit=10`, {
      method: 'GET',
      headers: {
        'X-API-Key': API_KEY
      }
    });

    if (response.ok) {
      const data = await response.json();
      log(`‚úÖ Recherche termin√©e: ${data.results?.length || 0} r√©sultats pour "${data.query}"`, 'success');
    } else {
      const errorData = await response.text();
      log(`‚ùå Erreur /search: ${response.status} - ${errorData}`, 'error');
    }
  } catch (error) {
    log(`üí• Erreur de connexion /search: ${error.message}`, 'error');
  }
}

// Test de l'endpoint /stats
async function testStats() {
  try {
    log('üß™ Test de l\'endpoint /stats...');
    
    const response = await fetch(`${BASE_URL}/stats`, {
      method: 'GET',
      headers: {
        'X-API-Key': API_KEY
      }
    });

    if (response.ok) {
      const data = await response.json();
      log(`‚úÖ Statistiques r√©cup√©r√©es: ${data.stats?.total_notes || 0} notes, ${data.stats?.total_classeurs || 0} classeurs`, 'success');
    } else {
      const errorData = await response.text();
      log(`‚ùå Erreur /stats: ${response.status} - ${errorData}`, 'error');
    }
  } catch (error) {
    log(`üí• Erreur de connexion /stats: ${error.message}`, 'error');
  }
}

// Test de l'endpoint /export
async function testExport() {
  try {
    log('üß™ Test de l\'endpoint /export...');
    
    const response = await fetch(`${BASE_URL}/export`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-Key': API_KEY
      },
      body: JSON.stringify({
        format: 'markdown',
        classeur_id: TEST_CONFIG.classeur_id,
        include_metadata: true
      })
    });

    if (response.ok) {
      const data = await response.json();
      log(`‚úÖ Export g√©n√©r√©: ${data.format} (${data.content_size} caract√®res)`, 'success');
    } else {
      const errorData = await response.text();
      log(`‚ùå Erreur /export: ${response.status} - ${errorData}`, 'error');
    }
  } catch (error) {
    log(`üí• Erreur de connexion /export: ${error.message}`, 'error');
  }
}

// Test des endpoints individuels
async function testIndividualEndpoints() {
  try {
    log('üß™ Test des endpoints individuels...');
    
    if (TEST_CONFIG.test_note_id) {
      // Test GET /note/[ref]
      const noteResponse = await fetch(`${BASE_URL}/note/${TEST_CONFIG.test_note_id}`, {
        method: 'GET',
        headers: {
          'X-API-Key': API_KEY
        }
      });

      if (noteResponse.ok) {
        const data = await noteResponse.json();
        log(`‚úÖ Note individuelle r√©cup√©r√©e: ${data.note?.source_title}`, 'success');
      } else {
        log(`‚ùå Erreur GET /note/[ref]: ${noteResponse.status}`, 'error');
      }
    }

    if (TEST_CONFIG.test_classeur_id) {
      // Test GET /classeur/[ref]
      const classeurResponse = await fetch(`${BASE_URL}/classeur/${TEST_CONFIG.test_classeur_id}`, {
        method: 'GET',
        headers: {
          'X-API-Key': API_KEY
        }
      });

      if (classeurResponse.ok) {
        const data = await classeurResponse.json();
        log(`‚úÖ Classeur individuel r√©cup√©r√©: ${data.classeur?.name}`, 'success');
      } else {
        log(`‚ùå Erreur GET /classeur/[ref]: ${classeurResponse.status}`, 'error');
      }
    }

    if (TEST_CONFIG.test_folder_id) {
      // Test GET /folder/[ref]
      const folderResponse = await fetch(`${BASE_URL}/folder/${TEST_CONFIG.test_folder_id}`, {
        method: 'GET',
        headers: {
          'X-API-Key': API_KEY
        }
      });

      if (folderResponse.ok) {
        const data = await folderResponse.json();
        log(`‚úÖ Dossier individuel r√©cup√©r√©: ${data.folder?.name}`, 'success');
      } else {
        log(`‚ùå Erreur GET /folder/[ref]: ${folderResponse.status}`, 'error');
      }
    }
  } catch (error) {
    log(`üí• Erreur de connexion endpoints individuels: ${error.message}`, 'error');
  }
}

// Ex√©cuter tous les tests
async function runAllTests() {
  console.log('üöÄ D√©marrage des tests complets API v2...\n');
  
  try {
    await testMe();
    await delay(TEST_CONFIG.delay);
    
    await testClasseurs();
    await delay(TEST_CONFIG.delay);
    
    await testNotes();
    await delay(TEST_CONFIG.delay);
    
    await testFolders();
    await delay(TEST_CONFIG.delay);
    
    await testSearch();
    await delay(TEST_CONFIG.delay);
    
    await testStats();
    await delay(TEST_CONFIG.delay);
    
    await testExport();
    await delay(TEST_CONFIG.delay);
    
    await testIndividualEndpoints();
    
    console.log('\nüèÅ Tous les tests sont termin√©s!');
    console.log('\nüìä R√©sum√© des tests:');
    console.log('- ‚úÖ /me - Profil utilisateur');
    console.log('- ‚úÖ /classeurs - Gestion des classeurs');
    console.log('- ‚úÖ /notes - Gestion des notes avec pagination');
    console.log('- ‚úÖ /folders - Gestion des dossiers');
    console.log('- ‚úÖ /search - Recherche textuelle');
    console.log('- ‚úÖ /stats - Statistiques utilisateur');
    console.log('- ‚úÖ /export - Export de donn√©es');
    console.log('- ‚úÖ Endpoints individuels - GET/PUT/DELETE');
    
  } catch (error) {
    console.error('\nüí• Erreur lors de l\'ex√©cution des tests:', error.message);
  }
}

// V√©rifier que l'API key est configur√©e
if (API_KEY === 'your-api-key-here') {
  console.log('‚ö†Ô∏è  Veuillez configurer votre cl√© API dans le script');
  console.log('üîë Remplacez "your-api-key-here" par votre vraie cl√© API');
} else {
  runAllTests();
}
